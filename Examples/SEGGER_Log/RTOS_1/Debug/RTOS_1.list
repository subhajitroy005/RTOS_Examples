
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800b960  0800b960  0001b960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bad8  0800bad8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800bad8  0800bad8  0001bad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bae0  0800bae0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae0  0800bae0  0001bae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800bae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014c3c  20000098  0800bb80  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014cd4  0800bb80  00024cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241fe  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005273  00000000  00000000  000442c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb0  00000000  00000000  00049540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c60  00000000  00000000  0004b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9d4  00000000  00000000  0004d050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025901  00000000  00000000  0006aa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a58f5  00000000  00000000  00090325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135c1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008824  00000000  00000000  00135c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b948 	.word	0x0800b948

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	0800b948 	.word	0x0800b948

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001300c 	.word	0x2001300c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fd73 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f85f 	bl	8000644 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000586:	f000 f8c7 	bl	8000718 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9a7 	bl	80008dc <MX_GPIO_Init>
  MX_I2C1_Init();
 800058e:	f000 f8e3 	bl	8000758 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000592:	f000 f90f 	bl	80007b4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000596:	f000 f93b 	bl	8000810 <MX_I2S3_Init>
  MX_SPI1_Init();
 800059a:	f000 f969 	bl	8000870 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800059e:	f00a f977 	bl	800a890 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  // DWT cycle counter enable
  DWT_CTRL |= (1<<0);
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0xb0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a20      	ldr	r2, [pc, #128]	; (8000628 <main+0xb0>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005ae:	f008 fc99 	bl	8008ee4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start(); // strat the segger trace
 80005b2:	f009 fbff 	bl	8009db4 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task_1", 200, "Hello 1", 2, &task_h_1);
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <main+0xb4>)
 80005c2:	22c8      	movs	r2, #200	; 0xc8
 80005c4:	491a      	ldr	r1, [pc, #104]	; (8000630 <main+0xb8>)
 80005c6:	481b      	ldr	r0, [pc, #108]	; (8000634 <main+0xbc>)
 80005c8:	f007 fb93 	bl	8007cf2 <xTaskCreate>
 80005cc:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS); // Assert here if the task creation has an error
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00a      	beq.n	80005ea <main+0x72>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e6:	bf00      	nop
 80005e8:	e7fe      	b.n	80005e8 <main+0x70>
    status = xTaskCreate(task2_handler, "Task_2", 200, "Hello 2", 2, &task_h_2);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <main+0xc0>)
 80005f4:	22c8      	movs	r2, #200	; 0xc8
 80005f6:	4911      	ldr	r1, [pc, #68]	; (800063c <main+0xc4>)
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xc8>)
 80005fa:	f007 fb7a 	bl	8007cf2 <xTaskCreate>
 80005fe:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d00a      	beq.n	800061c <main+0xa4>
        __asm volatile
 8000606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	60fb      	str	r3, [r7, #12]
    }
 8000618:	bf00      	nop
 800061a:	e7fe      	b.n	800061a <main+0xa2>

    vTaskStartScheduler();
 800061c:	f007 fcbe 	bl	8007f9c <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000620:	f00a f95c 	bl	800a8dc <MX_USB_HOST_Process>
 8000624:	e7fc      	b.n	8000620 <main+0xa8>
 8000626:	bf00      	nop
 8000628:	e0001000 	.word	0xe0001000
 800062c:	0800b960 	.word	0x0800b960
 8000630:	0800b968 	.word	0x0800b968
 8000634:	08000a91 	.word	0x08000a91
 8000638:	0800b970 	.word	0x0800b970
 800063c:	0800b978 	.word	0x0800b978
 8000640:	08000ab5 	.word	0x08000ab5

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f00a fc76 	bl	800af44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006be:	2304      	movs	r3, #4
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c2:	2307      	movs	r3, #7
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f9a0 	bl	8003a10 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006d6:	f000 fa11 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 fc02 	bl	8003f00 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f9fb 	bl	8000afc <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800072e:	2301      	movs	r3, #1
 8000730:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000732:	23c8      	movs	r3, #200	; 0xc8
 8000734:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000736:	2305      	movs	r3, #5
 8000738:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fe2f 	bl	80043a4 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800074c:	f000 f9d6 	bl	8000afc <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f002 fb57 	bl	8002e48 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f9ac 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000b4 	.word	0x200000b4
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2S2_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_I2S2_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2S2_Init+0x50>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2S2_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_I2S2_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_I2S2_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_I2S2_Init+0x50>)
 80007da:	4a0c      	ldr	r2, [pc, #48]	; (800080c <MX_I2S2_Init+0x58>)
 80007dc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2S2_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_I2S2_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2S2_Init+0x50>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_I2S2_Init+0x50>)
 80007f2:	f002 fc6d 	bl	80030d0 <HAL_I2S_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f97e 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000108 	.word	0x20000108
 8000808:	40003800 	.word	0x40003800
 800080c:	00017700 	.word	0x00017700

08000810 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_I2S3_Init+0x54>)
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_I2S3_Init+0x58>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2S3_Init+0x54>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_I2S3_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_I2S3_Init+0x54>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_I2S3_Init+0x54>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_I2S3_Init+0x54>)
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <MX_I2S3_Init+0x5c>)
 800083a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_I2S3_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_I2S3_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_I2S3_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_I2S3_Init+0x54>)
 8000850:	f002 fc3e 	bl	80030d0 <HAL_I2S_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800085a:	f000 f94f 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000150 	.word	0x20000150
 8000868:	40003c00 	.word	0x40003c00
 800086c:	00017700 	.word	0x00017700

08000870 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_SPI1_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0x64>)
 800087c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008bc:	220a      	movs	r2, #10
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008c2:	f003 febf 	bl	8004644 <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008cc:	f000 f916 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000198 	.word	0x20000198
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b61      	ldr	r3, [pc, #388]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a60      	ldr	r2, [pc, #384]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b5e      	ldr	r3, [pc, #376]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	4b5a      	ldr	r3, [pc, #360]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a59      	ldr	r2, [pc, #356]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b53      	ldr	r3, [pc, #332]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a52      	ldr	r2, [pc, #328]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b50      	ldr	r3, [pc, #320]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a4b      	ldr	r2, [pc, #300]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b49      	ldr	r3, [pc, #292]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b45      	ldr	r3, [pc, #276]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a44      	ldr	r2, [pc, #272]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a3d      	ldr	r2, [pc, #244]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2108      	movs	r1, #8
 800099e:	4838      	ldr	r0, [pc, #224]	; (8000a80 <MX_GPIO_Init+0x1a4>)
 80009a0:	f000 fe2e 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2101      	movs	r1, #1
 80009a8:	4836      	ldr	r0, [pc, #216]	; (8000a84 <MX_GPIO_Init+0x1a8>)
 80009aa:	f000 fe29 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ae:	2200      	movs	r2, #0
 80009b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009b4:	4834      	ldr	r0, [pc, #208]	; (8000a88 <MX_GPIO_Init+0x1ac>)
 80009b6:	f000 fe23 	bl	8001600 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	482c      	ldr	r0, [pc, #176]	; (8000a80 <MX_GPIO_Init+0x1a4>)
 80009ce:	f000 fc93 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4825      	ldr	r0, [pc, #148]	; (8000a80 <MX_GPIO_Init+0x1a4>)
 80009ea:	f000 fc85 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009ee:	2332      	movs	r3, #50	; 0x32
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481f      	ldr	r0, [pc, #124]	; (8000a80 <MX_GPIO_Init+0x1a4>)
 8000a04:	f000 fc78 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4819      	ldr	r0, [pc, #100]	; (8000a84 <MX_GPIO_Init+0x1a8>)
 8000a20:	f000 fc6a 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4814      	ldr	r0, [pc, #80]	; (8000a8c <MX_GPIO_Init+0x1b0>)
 8000a3a:	f000 fc5d 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a3e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a42:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_GPIO_Init+0x1ac>)
 8000a58:	f000 fc4e 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_GPIO_Init+0x1ac>)
 8000a70:	f000 fc42 	bl	80012f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a74:	bf00      	nop
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	40020000 	.word	0x40020000

08000a90 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parm){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*)parm);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f00a fba9 	bl	800b1f0 <puts>
		taskYIELD();
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <task1_handler+0x20>)
 8000aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	f3bf 8f4f 	dsb	sy
 8000aaa:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parm);
 8000aae:	e7f3      	b.n	8000a98 <task1_handler+0x8>
 8000ab0:	e000ed04 	.word	0xe000ed04

08000ab4 <task2_handler>:
	}
}
static void task2_handler(void* parm){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*)parm);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f00a fb97 	bl	800b1f0 <puts>
		taskYIELD();
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <task2_handler+0x20>)
 8000ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	f3bf 8f4f 	dsb	sy
 8000ace:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parm);
 8000ad2:	e7f3      	b.n	8000abc <task2_handler+0x8>
 8000ad4:	e000ed04 	.word	0xe000ed04

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 fadf 	bl	80010ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40014000 	.word	0x40014000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b46:	f007 fe17 	bl	8008778 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <HAL_I2C_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12c      	bne.n	8000bd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9c:	2312      	movs	r3, #18
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <HAL_I2C_MspInit+0x8c>)
 8000bb4:	f000 fba0 	bl	80012f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020400 	.word	0x40020400

08000be8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a59      	ldr	r2, [pc, #356]	; (8000d6c <HAL_I2S_MspInit+0x184>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d15b      	bne.n	8000cc2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
 8000c0e:	4b58      	ldr	r3, [pc, #352]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a57      	ldr	r2, [pc, #348]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b55      	ldr	r3, [pc, #340]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	623b      	str	r3, [r7, #32]
 8000c24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	4b51      	ldr	r3, [pc, #324]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a50      	ldr	r2, [pc, #320]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b4e      	ldr	r3, [pc, #312]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	4b4a      	ldr	r3, [pc, #296]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a49      	ldr	r2, [pc, #292]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c6e:	2306      	movs	r3, #6
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	483e      	ldr	r0, [pc, #248]	; (8000d74 <HAL_I2S_MspInit+0x18c>)
 8000c7a:	f000 fb3d 	bl	80012f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4836      	ldr	r0, [pc, #216]	; (8000d74 <HAL_I2S_MspInit+0x18c>)
 8000c9a:	f000 fb2d 	bl	80012f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	482f      	ldr	r0, [pc, #188]	; (8000d78 <HAL_I2S_MspInit+0x190>)
 8000cbc:	f000 fb1c 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cc0:	e04f      	b.n	8000d62 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a2d      	ldr	r2, [pc, #180]	; (8000d7c <HAL_I2S_MspInit+0x194>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d14a      	bne.n	8000d62 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6313      	str	r3, [r2, #48]	; 0x30
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_I2S_MspInit+0x188>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d20:	2310      	movs	r3, #16
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d30:	2306      	movs	r3, #6
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4811      	ldr	r0, [pc, #68]	; (8000d80 <HAL_I2S_MspInit+0x198>)
 8000d3c:	f000 fadc 	bl	80012f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d40:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d52:	2306      	movs	r3, #6
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_I2S_MspInit+0x18c>)
 8000d5e:	f000 facb 	bl	80012f8 <HAL_GPIO_Init>
}
 8000d62:	bf00      	nop
 8000d64:	3738      	adds	r7, #56	; 0x38
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40003800 	.word	0x40003800
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	40003c00 	.word	0x40003c00
 8000d80:	40020000 	.word	0x40020000

08000d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_SPI_MspInit+0x84>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12b      	bne.n	8000dfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dde:	23e0      	movs	r3, #224	; 0xe0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dee:	2305      	movs	r3, #5
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_SPI_MspInit+0x8c>)
 8000dfa:	f000 fa7d 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e32:	6453      	str	r3, [r2, #68]	; 0x44
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_InitTick+0xd0>)
 8000e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e40:	f107 020c 	add.w	r2, r7, #12
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fa78 	bl	8004340 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e50:	f003 fa62 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 8000e54:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <HAL_InitTick+0xd4>)
 8000e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5e:	0c9b      	lsrs	r3, r3, #18
 8000e60:	3b01      	subs	r3, #1
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_InitTick+0xd8>)
 8000e66:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <HAL_InitTick+0xdc>)
 8000e68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_InitTick+0xd8>)
 8000e6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e70:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000e72:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <HAL_InitTick+0xd8>)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_InitTick+0xd8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_InitTick+0xd8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_InitTick+0xd8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000e8a:	4818      	ldr	r0, [pc, #96]	; (8000eec <HAL_InitTick+0xd8>)
 8000e8c:	f003 fc63 	bl	8004756 <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d11b      	bne.n	8000ed6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000e9e:	4813      	ldr	r0, [pc, #76]	; (8000eec <HAL_InitTick+0xd8>)
 8000ea0:	f003 fcb2 	bl	8004808 <HAL_TIM_Base_Start_IT>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d111      	bne.n	8000ed6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000eb2:	2018      	movs	r0, #24
 8000eb4:	f000 fa12 	bl	80012dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	d808      	bhi.n	8000ed0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	2018      	movs	r0, #24
 8000ec4:	f000 f9ee 	bl	80012a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_InitTick+0xe0>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e002      	b.n	8000ed6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3730      	adds	r7, #48	; 0x30
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	431bde83 	.word	0x431bde83
 8000eec:	200001f0 	.word	0x200001f0
 8000ef0:	40014000 	.word	0x40014000
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000f2a:	f003 fccf 	bl	80048cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200001f0 	.word	0x200001f0

08000f38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <OTG_FS_IRQHandler+0x10>)
 8000f3e:	f000 fde3 	bl	8001b08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200149bc 	.word	0x200149bc

08000f4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e00a      	b.n	8000f74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5e:	f3af 8000 	nop.w
 8000f62:	4601      	mov	r1, r0
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	60ba      	str	r2, [r7, #8]
 8000f6a:	b2ca      	uxtb	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbf0      	blt.n	8000f5e <_read+0x12>
  }

  return len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fae:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_isatty>:

int _isatty(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800103e:	f7ff ffd7 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f009 ff2d 	bl	800aea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fa97 	bl	8000578 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001058:	0800bae8 	.word	0x0800bae8
  ldr r2, =_sbss
 800105c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001060:	20014cd4 	.word	0x20014cd4

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f8fc 	bl	800128e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff febc 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fd34 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000238 	.word	0x20000238

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000238 	.word	0x20000238

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ff4c 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b6:	f7ff ff61 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	6978      	ldr	r0, [r7, #20]
 80012c2:	f7ff ffb1 	bl	8001228 <NVIC_EncodePriority>
 80012c6:	4602      	mov	r2, r0
 80012c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff80 	bl	80011d4 <__NVIC_SetPriority>
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff54 	bl	8001198 <__NVIC_EnableIRQ>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	e159      	b.n	80015c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	429a      	cmp	r2, r3
 800132e:	f040 8148 	bne.w	80015c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b01      	cmp	r3, #1
 800133c:	d005      	beq.n	800134a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	2b02      	cmp	r3, #2
 8001348:	d130      	bne.n	80013ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 0201 	and.w	r2, r3, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d017      	beq.n	80013e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d123      	bne.n	800143c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	69b9      	ldr	r1, [r7, #24]
 8001438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a2 	beq.w	80015c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b57      	ldr	r3, [pc, #348]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a56      	ldr	r2, [pc, #344]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149a:	4a52      	ldr	r2, [pc, #328]	; (80015e4 <HAL_GPIO_Init+0x2ec>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <HAL_GPIO_Init+0x2f0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x202>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a48      	ldr	r2, [pc, #288]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x1fe>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a47      	ldr	r2, [pc, #284]	; (80015f0 <HAL_GPIO_Init+0x2f8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x1fa>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a46      	ldr	r2, [pc, #280]	; (80015f4 <HAL_GPIO_Init+0x2fc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x1f6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <HAL_GPIO_Init+0x300>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x1f2>
 80014e6:	2304      	movs	r3, #4
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014fa:	2300      	movs	r3, #0
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800150c:	4935      	ldr	r1, [pc, #212]	; (80015e4 <HAL_GPIO_Init+0x2ec>)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <HAL_GPIO_Init+0x304>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153e:	4a2f      	ldr	r2, [pc, #188]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001568:	4a24      	ldr	r2, [pc, #144]	; (80015fc <HAL_GPIO_Init+0x304>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001592:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_GPIO_Init+0x304>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_GPIO_Init+0x304>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	f67f aea2 	bls.w	8001314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40013c00 	.word	0x40013c00

08001600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800161c:	e003      	b.n	8001626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001634:	b08f      	sub	sp, #60	; 0x3c
 8001636:	af0a      	add	r7, sp, #40	; 0x28
 8001638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e054      	b.n	80016ee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f009 f974 	bl	800a94c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2203      	movs	r2, #3
 8001668:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fb58 	bl	8004d38 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	687e      	ldr	r6, [r7, #4]
 8001690:	466d      	mov	r5, sp
 8001692:	f106 0410 	add.w	r4, r6, #16
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a6:	1d33      	adds	r3, r6, #4
 80016a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f003 fad2 	bl	8004c54 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fb4f 	bl	8004d5a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	687e      	ldr	r6, [r7, #4]
 80016c4:	466d      	mov	r5, sp
 80016c6:	f106 0410 	add.w	r4, r6, #16
 80016ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80016da:	1d33      	adds	r3, r6, #4
 80016dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016de:	6838      	ldr	r0, [r7, #0]
 80016e0:	f003 fcd8 	bl	8005094 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016f6:	b590      	push	{r4, r7, lr}
 80016f8:	b089      	sub	sp, #36	; 0x24
 80016fa:	af04      	add	r7, sp, #16
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	4608      	mov	r0, r1
 8001700:	4611      	mov	r1, r2
 8001702:	461a      	mov	r2, r3
 8001704:	4603      	mov	r3, r0
 8001706:	70fb      	strb	r3, [r7, #3]
 8001708:	460b      	mov	r3, r1
 800170a:	70bb      	strb	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_HCD_HC_Init+0x28>
 800171a:	2302      	movs	r3, #2
 800171c:	e076      	b.n	800180c <HAL_HCD_HC_Init+0x116>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	333d      	adds	r3, #61	; 0x3d
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	3338      	adds	r3, #56	; 0x38
 8001746:	787a      	ldrb	r2, [r7, #1]
 8001748:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3340      	adds	r3, #64	; 0x40
 8001758:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800175a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	212c      	movs	r1, #44	; 0x2c
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	3339      	adds	r3, #57	; 0x39
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	333f      	adds	r3, #63	; 0x3f
 800177c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001780:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	78ba      	ldrb	r2, [r7, #2]
 8001786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800178a:	b2d0      	uxtb	r0, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	333a      	adds	r3, #58	; 0x3a
 8001798:	4602      	mov	r2, r0
 800179a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800179c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da09      	bge.n	80017b8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	333b      	adds	r3, #59	; 0x3b
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e008      	b.n	80017ca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	333b      	adds	r3, #59	; 0x3b
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	212c      	movs	r1, #44	; 0x2c
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	333c      	adds	r3, #60	; 0x3c
 80017d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017dc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	787c      	ldrb	r4, [r7, #1]
 80017e4:	78ba      	ldrb	r2, [r7, #2]
 80017e6:	78f9      	ldrb	r1, [r7, #3]
 80017e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	4623      	mov	r3, r4
 80017fa:	f003 fdd1 	bl	80053a0 <USB_HC_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}

08001814 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_HCD_HC_Halt+0x1e>
 800182e:	2302      	movs	r3, #2
 8001830:	e00f      	b.n	8001852 <HAL_HCD_HC_Halt+0x3e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f004 f821 	bl	800588a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4603      	mov	r3, r0
 800186c:	70fb      	strb	r3, [r7, #3]
 800186e:	460b      	mov	r3, r1
 8001870:	70bb      	strb	r3, [r7, #2]
 8001872:	4613      	mov	r3, r2
 8001874:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	333b      	adds	r3, #59	; 0x3b
 8001884:	78ba      	ldrb	r2, [r7, #2]
 8001886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	333f      	adds	r3, #63	; 0x3f
 8001896:	787a      	ldrb	r2, [r7, #1]
 8001898:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800189a:	7c3b      	ldrb	r3, [r7, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d112      	bne.n	80018c6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3342      	adds	r3, #66	; 0x42
 80018ae:	2203      	movs	r2, #3
 80018b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	333d      	adds	r3, #61	; 0x3d
 80018c0:	7f3a      	ldrb	r2, [r7, #28]
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e008      	b.n	80018d8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3342      	adds	r3, #66	; 0x42
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	f200 80c6 	bhi.w	8001a6c <HAL_HCD_HC_SubmitRequest+0x210>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001a59 	.word	0x08001a59
 80018f0:	0800195d 	.word	0x0800195d
 80018f4:	080019db 	.word	0x080019db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018f8:	7c3b      	ldrb	r3, [r7, #16]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	f040 80b8 	bne.w	8001a70 <HAL_HCD_HC_SubmitRequest+0x214>
 8001900:	78bb      	ldrb	r3, [r7, #2]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 80b4 	bne.w	8001a70 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001908:	8b3b      	ldrh	r3, [r7, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d108      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3355      	adds	r3, #85	; 0x55
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3355      	adds	r3, #85	; 0x55
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3342      	adds	r3, #66	; 0x42
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001946:	e093      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	212c      	movs	r1, #44	; 0x2c
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	3342      	adds	r3, #66	; 0x42
 8001956:	2202      	movs	r2, #2
 8001958:	701a      	strb	r2, [r3, #0]
      break;
 800195a:	e089      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800195c:	78bb      	ldrb	r3, [r7, #2]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d11d      	bne.n	800199e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	212c      	movs	r1, #44	; 0x2c
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	3355      	adds	r3, #85	; 0x55
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3342      	adds	r3, #66	; 0x42
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001988:	e073      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	212c      	movs	r1, #44	; 0x2c
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	4413      	add	r3, r2
 8001996:	3342      	adds	r3, #66	; 0x42
 8001998:	2202      	movs	r2, #2
 800199a:	701a      	strb	r2, [r3, #0]
      break;
 800199c:	e069      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3354      	adds	r3, #84	; 0x54
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3342      	adds	r3, #66	; 0x42
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
      break;
 80019c4:	e055      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3342      	adds	r3, #66	; 0x42
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
      break;
 80019d8:	e04b      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019da:	78bb      	ldrb	r3, [r7, #2]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11d      	bne.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3355      	adds	r3, #85	; 0x55
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3342      	adds	r3, #66	; 0x42
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a06:	e034      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3342      	adds	r3, #66	; 0x42
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
      break;
 8001a1a:	e02a      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3354      	adds	r3, #84	; 0x54
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
      break;
 8001a42:	e016      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3342      	adds	r3, #66	; 0x42
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]
      break;
 8001a56:	e00c      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3342      	adds	r3, #66	; 0x42
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a6c:	bf00      	nop
 8001a6e:	e000      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a70:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	212c      	movs	r1, #44	; 0x2c
 8001a78:	fb01 f303 	mul.w	r3, r1, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3344      	adds	r3, #68	; 0x44
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	8b3a      	ldrh	r2, [r7, #24]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	202c      	movs	r0, #44	; 0x2c
 8001a8c:	fb00 f303 	mul.w	r3, r0, r3
 8001a90:	440b      	add	r3, r1
 8001a92:	334c      	adds	r3, #76	; 0x4c
 8001a94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	212c      	movs	r1, #44	; 0x2c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3360      	adds	r3, #96	; 0x60
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3350      	adds	r3, #80	; 0x50
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3339      	adds	r3, #57	; 0x39
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	212c      	movs	r1, #44	; 0x2c
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3361      	adds	r3, #97	; 0x61
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	222c      	movs	r2, #44	; 0x2c
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	3338      	adds	r3, #56	; 0x38
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	18d1      	adds	r1, r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	f003 fd74 	bl	80055e4 <USB_HC_StartXfer>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop

08001b08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fa75 	bl	800500e <USB_GetMode>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	f040 80f6 	bne.w	8001d18 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fa59 	bl	8004fe8 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80ec 	beq.w	8001d16 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fa50 	bl	8004fe8 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b52:	d104      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fa40 	bl	8004fe8 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b72:	d104      	bne.n	8001b7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fa30 	bl	8004fe8 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b92:	d104      	bne.n	8001b9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 fa20 	bl	8004fe8 <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d103      	bne.n	8001bba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fa12 	bl	8004fe8 <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bce:	d11c      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bd8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10f      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bea:	2110      	movs	r1, #16
 8001bec:	6938      	ldr	r0, [r7, #16]
 8001bee:	f003 f901 	bl	8004df4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bf2:	6938      	ldr	r0, [r7, #16]
 8001bf4:	f003 f932 	bl	8004e5c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fb08 	bl	8005214 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f008 ff1f 	bl	800aa48 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 f9ea 	bl	8004fe8 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c1e:	d102      	bne.n	8001c26 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f001 f89e 	bl	8002d62 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 f9dc 	bl	8004fe8 <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d106      	bne.n	8001c48 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f008 fee8 	bl	800aa10 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 f9cb 	bl	8004fe8 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d101      	bne.n	8001c60 <HAL_HCD_IRQHandler+0x158>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_HCD_IRQHandler+0x15a>
 8001c60:	2300      	movs	r3, #0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0210 	bic.w	r2, r2, #16
 8001c74:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 ffa1 	bl	8002bbe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0210 	orr.w	r2, r2, #16
 8001c8a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 f9a9 	bl	8004fe8 <USB_ReadInterrupts>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ca0:	d13a      	bne.n	8001d18 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fdde 	bl	8005868 <USB_HC_ReadInterrupt>
 8001cac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e025      	b.n	8001d00 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d018      	beq.n	8001cfa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cde:	d106      	bne.n	8001cee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8ab 	bl	8001e42 <HCD_HC_IN_IRQHandler>
 8001cec:	e005      	b.n	8001cfa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fbf9 	bl	80024ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3d4      	bcc.n	8001cb4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	e000      	b.n	8001d18 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d16:	bf00      	nop
    }
  }
}
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_HCD_Start+0x16>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e013      	b.n	8001d5c <HAL_HCD_Start+0x3e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 faca 	bl	80052dc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 ffe2 	bl	8004d16 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_HCD_Stop+0x16>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e00d      	b.n	8001d96 <HAL_HCD_Stop+0x32>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 feb8 	bl	8005afc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fa6c 	bl	8005288 <USB_ResetPort>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3360      	adds	r3, #96	; 0x60
 8001dd4:	781b      	ldrb	r3, [r3, #0]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3350      	adds	r3, #80	; 0x50
 8001dfc:	681b      	ldr	r3, [r3, #0]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fab0 	bl	800537c <USB_GetCurrentFrame>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fa8b 	bl	800534e <USB_GetHostSpeed>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d11a      	bne.n	8001ea8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2304      	movs	r3, #4
 8001e82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3361      	adds	r3, #97	; 0x61
 8001e92:	2206      	movs	r2, #6
 8001e94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fcf2 	bl	800588a <USB_HC_Halt>
 8001ea6:	e0af      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ebe:	d11b      	bne.n	8001ef8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3361      	adds	r3, #97	; 0x61
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fcca 	bl	800588a <USB_HC_Halt>
 8001ef6:	e087      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d109      	bne.n	8001f22 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	6093      	str	r3, [r2, #8]
 8001f20:	e072      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d11a      	bne.n	8001f6e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	2308      	movs	r3, #8
 8001f48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3361      	adds	r3, #97	; 0x61
 8001f58:	2205      	movs	r2, #5
 8001f5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fc8f 	bl	800588a <USB_HC_Halt>
 8001f6c:	e04c      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f84:	d11b      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3361      	adds	r3, #97	; 0x61
 8001fa8:	2208      	movs	r2, #8
 8001faa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 fc67 	bl	800588a <USB_HC_Halt>
 8001fbc:	e024      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d119      	bne.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3361      	adds	r3, #97	; 0x61
 8001ff4:	2206      	movs	r2, #6
 8001ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fc41 	bl	800588a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800201e:	d112      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fc2d 	bl	800588a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203c:	461a      	mov	r2, r3
 800203e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002042:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002044:	e24e      	b.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 80df 	bne.w	800221c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d019      	beq.n	800209a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3348      	adds	r3, #72	; 0x48
 8002074:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	0159      	lsls	r1, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	440b      	add	r3, r1
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002088:	1ad2      	subs	r2, r2, r3
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	202c      	movs	r0, #44	; 0x2c
 8002090:	fb00 f303 	mul.w	r3, r0, r3
 8002094:	440b      	add	r3, r1
 8002096:	3350      	adds	r3, #80	; 0x50
 8002098:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3361      	adds	r3, #97	; 0x61
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	335c      	adds	r3, #92	; 0x5c
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	461a      	mov	r2, r3
 80020cc:	2301      	movs	r3, #1
 80020ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	333f      	adds	r3, #63	; 0x3f
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d009      	beq.n	80020f8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	333f      	adds	r3, #63	; 0x3f
 80020f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d111      	bne.n	800211c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fbc1 	bl	800588a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	2310      	movs	r3, #16
 8002118:	6093      	str	r3, [r2, #8]
 800211a:	e03a      	b.n	8002192 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	333f      	adds	r3, #63	; 0x3f
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d009      	beq.n	8002144 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	333f      	adds	r3, #63	; 0x3f
 800213e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002140:	2b01      	cmp	r3, #1
 8002142:	d126      	bne.n	8002192 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	0151      	lsls	r1, r2, #5
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	440a      	add	r2, r1
 800215a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800215e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002162:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	3360      	adds	r3, #96	; 0x60
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	b2d9      	uxtb	r1, r3
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	202c      	movs	r0, #44	; 0x2c
 8002180:	fb00 f303 	mul.w	r3, r0, r3
 8002184:	4413      	add	r3, r2
 8002186:	3360      	adds	r3, #96	; 0x60
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f008 fc69 	bl	800aa64 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d12b      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3348      	adds	r3, #72	; 0x48
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	202c      	movs	r0, #44	; 0x2c
 80021b0:	fb00 f202 	mul.w	r2, r0, r2
 80021b4:	440a      	add	r2, r1
 80021b6:	3240      	adds	r2, #64	; 0x40
 80021b8:	8812      	ldrh	r2, [r2, #0]
 80021ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 818e 	beq.w	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3354      	adds	r3, #84	; 0x54
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	f083 0301 	eor.w	r3, r3, #1
 80021dc:	b2d8      	uxtb	r0, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3354      	adds	r3, #84	; 0x54
 80021ec:	4602      	mov	r2, r0
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	e178      	b.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	3354      	adds	r3, #84	; 0x54
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2d8      	uxtb	r0, r3
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3354      	adds	r3, #84	; 0x54
 8002216:	4602      	mov	r2, r0
 8002218:	701a      	strb	r2, [r3, #0]
}
 800221a:	e163      	b.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b02      	cmp	r3, #2
 8002230:	f040 80f6 	bne.w	8002420 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3361      	adds	r3, #97	; 0x61
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d109      	bne.n	800225c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3360      	adds	r3, #96	; 0x60
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e0c9      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	3361      	adds	r3, #97	; 0x61
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d109      	bne.n	8002284 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3360      	adds	r3, #96	; 0x60
 800227e:	2205      	movs	r2, #5
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e0b5      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3361      	adds	r3, #97	; 0x61
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b06      	cmp	r3, #6
 8002296:	d009      	beq.n	80022ac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3361      	adds	r3, #97	; 0x61
 80022a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d150      	bne.n	800234e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	335c      	adds	r3, #92	; 0x5c
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	202c      	movs	r0, #44	; 0x2c
 80022c4:	fb00 f303 	mul.w	r3, r0, r3
 80022c8:	440b      	add	r3, r1
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	335c      	adds	r3, #92	; 0x5c
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d912      	bls.n	8002308 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	335c      	adds	r3, #92	; 0x5c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	2204      	movs	r2, #4
 8002304:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002306:	e073      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3360      	adds	r3, #96	; 0x60
 8002316:	2202      	movs	r2, #2
 8002318:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002330:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002338:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800234c:	e050      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3361      	adds	r3, #97	; 0x61
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d122      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3360      	adds	r3, #96	; 0x60
 8002370:	2202      	movs	r2, #2
 8002372:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800238a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002392:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e023      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3361      	adds	r3, #97	; 0x61
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	d119      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	335c      	adds	r3, #92	; 0x5c
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	202c      	movs	r0, #44	; 0x2c
 80023d4:	fb00 f303 	mul.w	r3, r0, r3
 80023d8:	440b      	add	r3, r1
 80023da:	335c      	adds	r3, #92	; 0x5c
 80023dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3360      	adds	r3, #96	; 0x60
 80023ec:	2204      	movs	r2, #4
 80023ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	2302      	movs	r3, #2
 8002400:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	b2d9      	uxtb	r1, r3
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	202c      	movs	r0, #44	; 0x2c
 800240c:	fb00 f303 	mul.w	r3, r0, r3
 8002410:	4413      	add	r3, r2
 8002412:	3360      	adds	r3, #96	; 0x60
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f008 fb23 	bl	800aa64 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800241e:	e061      	b.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b10      	cmp	r3, #16
 8002434:	d156      	bne.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	333f      	adds	r3, #63	; 0x3f
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d111      	bne.n	800246e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	335c      	adds	r3, #92	; 0x5c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fa0f 	bl	800588a <USB_HC_Halt>
 800246c:	e031      	b.n	80024d2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	333f      	adds	r3, #63	; 0x3f
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	333f      	adds	r3, #63	; 0x3f
 8002490:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002492:	2b02      	cmp	r3, #2
 8002494:	d11d      	bne.n	80024d2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	335c      	adds	r3, #92	; 0x5c
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d110      	bne.n	80024d2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3361      	adds	r3, #97	; 0x61
 80024be:	2203      	movs	r2, #3
 80024c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 f9dc 	bl	800588a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	461a      	mov	r2, r3
 80024e0:	2310      	movs	r3, #16
 80024e2:	6093      	str	r3, [r2, #8]
}
 80024e4:	bf00      	nop
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b04      	cmp	r3, #4
 800251a:	d11a      	bne.n	8002552 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	461a      	mov	r2, r3
 800252a:	2304      	movs	r3, #4
 800252c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	3361      	adds	r3, #97	; 0x61
 800253c:	2206      	movs	r2, #6
 800253e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f003 f99d 	bl	800588a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002550:	e331      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b20      	cmp	r3, #32
 8002566:	d12e      	bne.n	80025c6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	461a      	mov	r2, r3
 8002576:	2320      	movs	r3, #32
 8002578:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	333d      	adds	r3, #61	; 0x3d
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 8313 	bne.w	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	333d      	adds	r3, #61	; 0x3d
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3360      	adds	r3, #96	; 0x60
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 f963 	bl	800588a <USB_HC_Halt>
}
 80025c4:	e2f7      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025dc:	d112      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	461a      	mov	r2, r3
 80025ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 f944 	bl	800588a <USB_HC_Halt>
}
 8002602:	e2d8      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d140      	bne.n	800269c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d111      	bne.n	8002666 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	333d      	adds	r3, #61	; 0x3d
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2340      	movs	r3, #64	; 0x40
 8002664:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	2301      	movs	r3, #1
 8002676:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3361      	adds	r3, #97	; 0x61
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f003 f8f8 	bl	800588a <USB_HC_Halt>
}
 800269a:	e28c      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d12c      	bne.n	800270c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3361      	adds	r3, #97	; 0x61
 80026c0:	2204      	movs	r2, #4
 80026c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	333d      	adds	r3, #61	; 0x3d
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	335c      	adds	r3, #92	; 0x5c
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 f8c9 	bl	800588a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	2340      	movs	r3, #64	; 0x40
 8002708:	6093      	str	r3, [r2, #8]
}
 800270a:	e254      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b08      	cmp	r3, #8
 8002720:	d11a      	bne.n	8002758 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	461a      	mov	r2, r3
 8002730:	2308      	movs	r3, #8
 8002732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3361      	adds	r3, #97	; 0x61
 8002742:	2205      	movs	r2, #5
 8002744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f003 f89a 	bl	800588a <USB_HC_Halt>
}
 8002756:	e22e      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b10      	cmp	r3, #16
 800276c:	d140      	bne.n	80027f0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	335c      	adds	r3, #92	; 0x5c
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	3361      	adds	r3, #97	; 0x61
 800278e:	2203      	movs	r2, #3
 8002790:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333d      	adds	r3, #61	; 0x3d
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d112      	bne.n	80027cc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	333c      	adds	r3, #60	; 0x3c
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	333d      	adds	r3, #61	; 0x3d
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 f857 	bl	800588a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	461a      	mov	r2, r3
 80027ea:	2310      	movs	r3, #16
 80027ec:	6093      	str	r3, [r2, #8]
}
 80027ee:	e1e2      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b80      	cmp	r3, #128	; 0x80
 8002804:	d164      	bne.n	80028d0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d111      	bne.n	8002832 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3361      	adds	r3, #97	; 0x61
 800281c:	2206      	movs	r2, #6
 800281e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f003 f82d 	bl	800588a <USB_HC_Halt>
 8002830:	e044      	b.n	80028bc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	335c      	adds	r3, #92	; 0x5c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	202c      	movs	r0, #44	; 0x2c
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	440b      	add	r3, r1
 8002850:	335c      	adds	r3, #92	; 0x5c
 8002852:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	335c      	adds	r3, #92	; 0x5c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d920      	bls.n	80028aa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3360      	adds	r3, #96	; 0x60
 8002888:	2204      	movs	r2, #4
 800288a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	b2d9      	uxtb	r1, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	202c      	movs	r0, #44	; 0x2c
 8002896:	fb00 f303 	mul.w	r3, r0, r3
 800289a:	4413      	add	r3, r2
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f008 f8de 	bl	800aa64 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028a8:	e008      	b.n	80028bc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3360      	adds	r3, #96	; 0x60
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	461a      	mov	r2, r3
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	6093      	str	r3, [r2, #8]
}
 80028ce:	e172      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e6:	d11b      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	; 0x61
 80028f6:	2208      	movs	r2, #8
 80028f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f002 ffc0 	bl	800588a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291c:	6093      	str	r3, [r2, #8]
}
 800291e:	e14a      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	f040 813f 	bne.w	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3361      	adds	r3, #97	; 0x61
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d17d      	bne.n	8002a48 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3360      	adds	r3, #96	; 0x60
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	333f      	adds	r3, #63	; 0x3f
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d00a      	beq.n	8002988 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	333f      	adds	r3, #63	; 0x3f
 8002980:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002982:	2b03      	cmp	r3, #3
 8002984:	f040 8100 	bne.w	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d113      	bne.n	80029b8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3355      	adds	r3, #85	; 0x55
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2d8      	uxtb	r0, r3
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3355      	adds	r3, #85	; 0x55
 80029b4:	4602      	mov	r2, r0
 80029b6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f040 80e3 	bne.w	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	334c      	adds	r3, #76	; 0x4c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80d8 	beq.w	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	334c      	adds	r3, #76	; 0x4c
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	202c      	movs	r0, #44	; 0x2c
 80029ee:	fb00 f202 	mul.w	r2, r0, r2
 80029f2:	440a      	add	r2, r1
 80029f4:	3240      	adds	r2, #64	; 0x40
 80029f6:	8812      	ldrh	r2, [r2, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	3b01      	subs	r3, #1
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	202c      	movs	r0, #44	; 0x2c
 8002a02:	fb00 f202 	mul.w	r2, r0, r2
 8002a06:	440a      	add	r2, r1
 8002a08:	3240      	adds	r2, #64	; 0x40
 8002a0a:	8812      	ldrh	r2, [r2, #0]
 8002a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80b5 	beq.w	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3355      	adds	r3, #85	; 0x55
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	f083 0301 	eor.w	r3, r3, #1
 8002a32:	b2d8      	uxtb	r0, r3
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3355      	adds	r3, #85	; 0x55
 8002a42:	4602      	mov	r2, r0
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e09f      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d109      	bne.n	8002a70 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3360      	adds	r3, #96	; 0x60
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e08b      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3361      	adds	r3, #97	; 0x61
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d109      	bne.n	8002a98 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3360      	adds	r3, #96	; 0x60
 8002a92:	2202      	movs	r2, #2
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e077      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3361      	adds	r3, #97	; 0x61
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d109      	bne.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3360      	adds	r3, #96	; 0x60
 8002aba:	2205      	movs	r2, #5
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e063      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3361      	adds	r3, #97	; 0x61
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d009      	beq.n	8002ae8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3361      	adds	r3, #97	; 0x61
 8002ae2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d14f      	bne.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	335c      	adds	r3, #92	; 0x5c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	202c      	movs	r0, #44	; 0x2c
 8002b00:	fb00 f303 	mul.w	r3, r0, r3
 8002b04:	440b      	add	r3, r1
 8002b06:	335c      	adds	r3, #92	; 0x5c
 8002b08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	335c      	adds	r3, #92	; 0x5c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d912      	bls.n	8002b44 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	335c      	adds	r3, #92	; 0x5c
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3360      	adds	r3, #96	; 0x60
 8002b3e:	2204      	movs	r2, #4
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e021      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3360      	adds	r3, #96	; 0x60
 8002b52:	2202      	movs	r2, #2
 8002b54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b6c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b74:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	461a      	mov	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	2302      	movs	r3, #2
 8002b98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	b2d9      	uxtb	r1, r3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	202c      	movs	r0, #44	; 0x2c
 8002ba4:	fb00 f303 	mul.w	r3, r0, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3360      	adds	r3, #96	; 0x60
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f007 ff57 	bl	800aa64 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bb6:	bf00      	nop
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b08a      	sub	sp, #40	; 0x28
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	0c5b      	lsrs	r3, r3, #17
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d004      	beq.n	8002c04 <HCD_RXQLVL_IRQHandler+0x46>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	f000 80a9 	beq.w	8002d54 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c02:	e0aa      	b.n	8002d5a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80a6 	beq.w	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3344      	adds	r3, #68	; 0x44
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 809b 	beq.w	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3350      	adds	r3, #80	; 0x50
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	441a      	add	r2, r3
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	202c      	movs	r0, #44	; 0x2c
 8002c3c:	fb00 f303 	mul.w	r3, r0, r3
 8002c40:	440b      	add	r3, r1
 8002c42:	334c      	adds	r3, #76	; 0x4c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d87a      	bhi.n	8002d40 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3344      	adds	r3, #68	; 0x44
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	b292      	uxth	r2, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f002 f968 	bl	8004f38 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3344      	adds	r3, #68	; 0x44
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	441a      	add	r2, r3
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	202c      	movs	r0, #44	; 0x2c
 8002c82:	fb00 f303 	mul.w	r3, r0, r3
 8002c86:	440b      	add	r3, r1
 8002c88:	3344      	adds	r3, #68	; 0x44
 8002c8a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3350      	adds	r3, #80	; 0x50
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	441a      	add	r2, r3
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	202c      	movs	r0, #44	; 0x2c
 8002ca6:	fb00 f303 	mul.w	r3, r0, r3
 8002caa:	440b      	add	r3, r1
 8002cac:	3350      	adds	r3, #80	; 0x50
 8002cae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	0cdb      	lsrs	r3, r3, #19
 8002cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3340      	adds	r3, #64	; 0x40
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d13c      	bne.n	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d039      	beq.n	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cfa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d02:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3354      	adds	r3, #84	; 0x54
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	f083 0301 	eor.w	r3, r3, #1
 8002d2a:	b2d8      	uxtb	r0, r3
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3354      	adds	r3, #84	; 0x54
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	701a      	strb	r2, [r3, #0]
      break;
 8002d3e:	e00b      	b.n	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3360      	adds	r3, #96	; 0x60
 8002d4e:	2204      	movs	r2, #4
 8002d50:	701a      	strb	r2, [r3, #0]
      break;
 8002d52:	e001      	b.n	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d54:	bf00      	nop
 8002d56:	e000      	b.n	8002d5a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d58:	bf00      	nop
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d8e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d10b      	bne.n	8002db2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d102      	bne.n	8002daa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f007 fe41 	bl	800aa2c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d132      	bne.n	8002e22 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f043 0308 	orr.w	r3, r3, #8
 8002dc2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d126      	bne.n	8002e1c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d113      	bne.n	8002dfe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de0:	d106      	bne.n	8002df0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2102      	movs	r1, #2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 fa13 	bl	8005214 <USB_InitFSLSPClkSel>
 8002dee:	e011      	b.n	8002e14 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fa0c 	bl	8005214 <USB_InitFSLSPClkSel>
 8002dfc:	e00a      	b.n	8002e14 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d106      	bne.n	8002e14 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e12:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f007 fe33 	bl	800aa80 <HAL_HCD_PortEnabled_Callback>
 8002e1a:	e002      	b.n	8002e22 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f007 fe3d 	bl	800aa9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d103      	bne.n	8002e34 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f043 0320 	orr.w	r3, r3, #32
 8002e32:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e12b      	b.n	80030b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fd fe72 	bl	8000b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eac:	f001 fa20 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a81      	ldr	r2, [pc, #516]	; (80030bc <HAL_I2C_Init+0x274>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d807      	bhi.n	8002ecc <HAL_I2C_Init+0x84>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_I2C_Init+0x278>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	bf94      	ite	ls
 8002ec4:	2301      	movls	r3, #1
 8002ec6:	2300      	movhi	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e006      	b.n	8002eda <HAL_I2C_Init+0x92>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a7d      	ldr	r2, [pc, #500]	; (80030c4 <HAL_I2C_Init+0x27c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0e7      	b.n	80030b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a78      	ldr	r2, [pc, #480]	; (80030c8 <HAL_I2C_Init+0x280>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0c9b      	lsrs	r3, r3, #18
 8002eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a6a      	ldr	r2, [pc, #424]	; (80030bc <HAL_I2C_Init+0x274>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d802      	bhi.n	8002f1c <HAL_I2C_Init+0xd4>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	e009      	b.n	8002f30 <HAL_I2C_Init+0xe8>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	4a69      	ldr	r2, [pc, #420]	; (80030cc <HAL_I2C_Init+0x284>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	3301      	adds	r3, #1
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	495c      	ldr	r1, [pc, #368]	; (80030bc <HAL_I2C_Init+0x274>)
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	d819      	bhi.n	8002f84 <HAL_I2C_Init+0x13c>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e59      	subs	r1, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5e:	1c59      	adds	r1, r3, #1
 8002f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f64:	400b      	ands	r3, r1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_I2C_Init+0x138>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e59      	subs	r1, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7e:	e051      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002f80:	2304      	movs	r3, #4
 8002f82:	e04f      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <HAL_I2C_Init+0x168>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e58      	subs	r0, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e012      	b.n	8002fd6 <HAL_I2C_Init+0x18e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	0099      	lsls	r1, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Init+0x196>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e022      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10e      	bne.n	8003004 <HAL_I2C_Init+0x1bc>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1e58      	subs	r0, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	440b      	add	r3, r1
 8002ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003002:	e00f      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e58      	subs	r0, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	0099      	lsls	r1, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	fbb0 f3f3 	udiv	r3, r0, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	6809      	ldr	r1, [r1, #0]
 8003028:	4313      	orrs	r3, r2
 800302a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6911      	ldr	r1, [r2, #16]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	4311      	orrs	r1, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	000186a0 	.word	0x000186a0
 80030c0:	001e847f 	.word	0x001e847f
 80030c4:	003d08ff 	.word	0x003d08ff
 80030c8:	431bde83 	.word	0x431bde83
 80030cc:	10624dd3 	.word	0x10624dd3

080030d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e128      	b.n	8003334 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a90      	ldr	r2, [pc, #576]	; (800333c <HAL_I2S_Init+0x26c>)
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7fd fd73 	bl	8000be8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003118:	f023 030f 	bic.w	r3, r3, #15
 800311c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2202      	movs	r2, #2
 8003124:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d060      	beq.n	80031f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003136:	2310      	movs	r3, #16
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e001      	b.n	8003140 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800313c:	2320      	movs	r3, #32
 800313e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b20      	cmp	r3, #32
 8003146:	d802      	bhi.n	800314e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800314e:	2001      	movs	r0, #1
 8003150:	f001 fa18 	bl	8004584 <HAL_RCCEx_GetPeriphCLKFreq>
 8003154:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315e:	d125      	bne.n	80031ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	461a      	mov	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	3305      	adds	r3, #5
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e01f      	b.n	80031ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	fbb2 f2f3 	udiv	r2, r2, r3
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	3305      	adds	r3, #5
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e00e      	b.n	80031ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	461a      	mov	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	3305      	adds	r3, #5
 80031c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <HAL_I2S_Init+0x270>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	08db      	lsrs	r3, r3, #3
 80031d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	e003      	b.n	80031f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031f0:	2302      	movs	r3, #2
 80031f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d902      	bls.n	8003204 <HAL_I2S_Init+0x134>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2bff      	cmp	r3, #255	; 0xff
 8003202:	d907      	bls.n	8003214 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f043 0210 	orr.w	r2, r3, #16
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e08f      	b.n	8003334 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	ea42 0103 	orr.w	r1, r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	430a      	orrs	r2, r1
 8003226:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003232:	f023 030f 	bic.w	r3, r3, #15
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6851      	ldr	r1, [r2, #4]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6892      	ldr	r2, [r2, #8]
 800323e:	4311      	orrs	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68d2      	ldr	r2, [r2, #12]
 8003244:	4311      	orrs	r1, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6992      	ldr	r2, [r2, #24]
 800324a:	430a      	orrs	r2, r1
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003256:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d161      	bne.n	8003324 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a38      	ldr	r2, [pc, #224]	; (8003344 <HAL_I2S_Init+0x274>)
 8003264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a37      	ldr	r2, [pc, #220]	; (8003348 <HAL_I2S_Init+0x278>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_I2S_Init+0x1a4>
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_I2S_Init+0x27c>)
 8003272:	e001      	b.n	8003278 <HAL_I2S_Init+0x1a8>
 8003274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	4932      	ldr	r1, [pc, #200]	; (8003348 <HAL_I2S_Init+0x278>)
 8003280:	428a      	cmp	r2, r1
 8003282:	d101      	bne.n	8003288 <HAL_I2S_Init+0x1b8>
 8003284:	4a31      	ldr	r2, [pc, #196]	; (800334c <HAL_I2S_Init+0x27c>)
 8003286:	e001      	b.n	800328c <HAL_I2S_Init+0x1bc>
 8003288:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800328c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003290:	f023 030f 	bic.w	r3, r3, #15
 8003294:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <HAL_I2S_Init+0x278>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_I2S_Init+0x1d4>
 80032a0:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_I2S_Init+0x27c>)
 80032a2:	e001      	b.n	80032a8 <HAL_I2S_Init+0x1d8>
 80032a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a8:	2202      	movs	r2, #2
 80032aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a25      	ldr	r2, [pc, #148]	; (8003348 <HAL_I2S_Init+0x278>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <HAL_I2S_Init+0x1ea>
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_I2S_Init+0x27c>)
 80032b8:	e001      	b.n	80032be <HAL_I2S_Init+0x1ee>
 80032ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ca:	d003      	beq.n	80032d4 <HAL_I2S_Init+0x204>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e001      	b.n	80032e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032ea:	4313      	orrs	r3, r2
 80032ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032fe:	4313      	orrs	r3, r2
 8003300:	b29a      	uxth	r2, r3
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	4313      	orrs	r3, r2
 8003306:	b29b      	uxth	r3, r3
 8003308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800330c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <HAL_I2S_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_I2S_Init+0x24c>
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_I2S_Init+0x27c>)
 800331a:	e001      	b.n	8003320 <HAL_I2S_Init+0x250>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003320:	897a      	ldrh	r2, [r7, #10]
 8003322:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	08003447 	.word	0x08003447
 8003340:	cccccccd 	.word	0xcccccccd
 8003344:	0800355d 	.word	0x0800355d
 8003348:	40003800 	.word	0x40003800
 800334c:	40003400 	.word	0x40003400

08003350 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10e      	bne.n	80033e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ffb8 	bl	8003350 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	b292      	uxth	r2, r2
 80033fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	1c9a      	adds	r2, r3, #2
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10e      	bne.n	800343e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800342e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff93 	bl	8003364 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b04      	cmp	r3, #4
 8003460:	d13a      	bne.n	80034d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d109      	bne.n	8003480 <I2S_IRQHandler+0x3a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d102      	bne.n	8003480 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffb4 	bl	80033e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d126      	bne.n	80034d8 <I2S_IRQHandler+0x92>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d11f      	bne.n	80034d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f043 0202 	orr.w	r2, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff50 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d136      	bne.n	8003552 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d109      	bne.n	8003502 <I2S_IRQHandler+0xbc>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d102      	bne.n	8003502 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff45 	bl	800338c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b08      	cmp	r3, #8
 800350a:	d122      	bne.n	8003552 <I2S_IRQHandler+0x10c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b20      	cmp	r3, #32
 8003518:	d11b      	bne.n	8003552 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003528:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff13 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a92      	ldr	r2, [pc, #584]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003576:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003578:	e001      	b.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800357a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a8b      	ldr	r2, [pc, #556]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003594:	4b8a      	ldr	r3, [pc, #552]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003596:	e001      	b.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a8:	d004      	beq.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 8099 	bne.w	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f925 	bl	8003818 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f9c8 	bl	8003978 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d13a      	bne.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d035      	beq.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a6e      	ldr	r2, [pc, #440]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003606:	4b6e      	ldr	r3, [pc, #440]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003608:	e001      	b.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800360a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4969      	ldr	r1, [pc, #420]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003616:	428b      	cmp	r3, r1
 8003618:	d101      	bne.n	800361e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800361a:	4b69      	ldr	r3, [pc, #420]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800361c:	e001      	b.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800361e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003626:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003636:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fe88 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b08      	cmp	r3, #8
 8003670:	f040 80c3 	bne.w	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80bd 	beq.w	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800368e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a49      	ldr	r2, [pc, #292]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800369c:	e001      	b.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800369e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4944      	ldr	r1, [pc, #272]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036aa:	428b      	cmp	r3, r1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036ae:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b0:	e001      	b.n	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fe4a 	bl	8003378 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036e4:	e089      	b.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d107      	bne.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8be 	bl	800387c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f8fd 	bl	8003914 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d12f      	bne.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d02a      	beq.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800374a:	e001      	b.n	8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800374c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4919      	ldr	r1, [pc, #100]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003758:	428b      	cmp	r3, r1
 800375a:	d101      	bne.n	8003760 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800375c:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800375e:	e001      	b.n	8003764 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003768:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f043 0202 	orr.w	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fdfa 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b08      	cmp	r3, #8
 800378c:	d136      	bne.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d031      	beq.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a4:	e001      	b.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4902      	ldr	r1, [pc, #8]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b2:	428b      	cmp	r3, r1
 80037b4:	d106      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037b6:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b8:	e006      	b.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037ba:	bf00      	nop
 80037bc:	40003800 	.word	0x40003800
 80037c0:	40003400 	.word	0x40003400
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fdc0 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f8:	e000      	b.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037fa:	bf00      	nop
}
 80037fc:	bf00      	nop
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	1c99      	adds	r1, r3, #2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6251      	str	r1, [r2, #36]	; 0x24
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d113      	bne.n	8003872 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003858:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ffc9 	bl	8003804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c99      	adds	r1, r3, #2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6251      	str	r1, [r2, #36]	; 0x24
 800388e:	8819      	ldrh	r1, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <I2SEx_TxISR_I2SExt+0x90>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <I2SEx_TxISR_I2SExt+0x22>
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <I2SEx_TxISR_I2SExt+0x94>)
 800389c:	e001      	b.n	80038a2 <I2SEx_TxISR_I2SExt+0x26>
 800389e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a2:	460a      	mov	r2, r1
 80038a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d121      	bne.n	8003902 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a12      	ldr	r2, [pc, #72]	; (800390c <I2SEx_TxISR_I2SExt+0x90>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <I2SEx_TxISR_I2SExt+0x50>
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <I2SEx_TxISR_I2SExt+0x94>)
 80038ca:	e001      	b.n	80038d0 <I2SEx_TxISR_I2SExt+0x54>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	490d      	ldr	r1, [pc, #52]	; (800390c <I2SEx_TxISR_I2SExt+0x90>)
 80038d8:	428b      	cmp	r3, r1
 80038da:	d101      	bne.n	80038e0 <I2SEx_TxISR_I2SExt+0x64>
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <I2SEx_TxISR_I2SExt+0x94>)
 80038de:	e001      	b.n	80038e4 <I2SEx_TxISR_I2SExt+0x68>
 80038e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff81 	bl	8003804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40003800 	.word	0x40003800
 8003910:	40003400 	.word	0x40003400

08003914 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68d8      	ldr	r0, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	1c99      	adds	r1, r3, #2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800392c:	b282      	uxth	r2, r0
 800392e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d113      	bne.n	8003970 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003956:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff4a 	bl	8003804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <I2SEx_RxISR_I2SExt+0x90>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <I2SEx_RxISR_I2SExt+0x16>
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <I2SEx_RxISR_I2SExt+0x94>)
 800398c:	e001      	b.n	8003992 <I2SEx_RxISR_I2SExt+0x1a>
 800398e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003992:	68d8      	ldr	r0, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	1c99      	adds	r1, r3, #2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800399e:	b282      	uxth	r2, r0
 80039a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d121      	bne.n	80039fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <I2SEx_RxISR_I2SExt+0x90>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <I2SEx_RxISR_I2SExt+0x50>
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <I2SEx_RxISR_I2SExt+0x94>)
 80039c6:	e001      	b.n	80039cc <I2SEx_RxISR_I2SExt+0x54>
 80039c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	490d      	ldr	r1, [pc, #52]	; (8003a08 <I2SEx_RxISR_I2SExt+0x90>)
 80039d4:	428b      	cmp	r3, r1
 80039d6:	d101      	bne.n	80039dc <I2SEx_RxISR_I2SExt+0x64>
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <I2SEx_RxISR_I2SExt+0x94>)
 80039da:	e001      	b.n	80039e0 <I2SEx_RxISR_I2SExt+0x68>
 80039dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff03 	bl	8003804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40003800 	.word	0x40003800
 8003a0c:	40003400 	.word	0x40003400

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e267      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d075      	beq.n	8003b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2e:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	4b7e      	ldr	r3, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_RCC_OscConfig+0x108>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d157      	bne.n	8003b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e242      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x74>
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x98>
 8003a8e:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6f      	ldr	r2, [pc, #444]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6c      	ldr	r2, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	4b69      	ldr	r3, [pc, #420]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a68      	ldr	r2, [pc, #416]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a65      	ldr	r2, [pc, #404]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fb04 	bl	80010d4 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fb00 	bl	80010d4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e207      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xc0>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fd faf0 	bl	80010d4 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fd faec 	bl	80010d4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1f3      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0xe8>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d063      	beq.n	8003bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1c7      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4937      	ldr	r1, [pc, #220]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e03a      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b80:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd faa5 	bl	80010d4 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fd faa1 	bl	80010d4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1a8      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4925      	ldr	r1, [pc, #148]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
 8003bc0:	e015      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fa84 	bl	80010d4 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fd fa80 	bl	80010d4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e187      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d036      	beq.n	8003c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fa64 	bl	80010d4 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fd fa60 	bl	80010d4 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e167      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x200>
 8003c2e:	e01b      	b.n	8003c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fd fa4d 	bl	80010d4 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	e00e      	b.n	8003c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fd fa49 	bl	80010d4 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d907      	bls.n	8003c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e150      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	42470000 	.word	0x42470000
 8003c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ea      	bne.n	8003c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8097 	beq.w	8003da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a7c      	ldr	r2, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b7a      	ldr	r3, [pc, #488]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b77      	ldr	r3, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d118      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb2:	4b74      	ldr	r3, [pc, #464]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a73      	ldr	r2, [pc, #460]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbe:	f7fd fa09 	bl	80010d4 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc6:	f7fd fa05 	bl	80010d4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e10c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	4b6a      	ldr	r3, [pc, #424]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x2ea>
 8003cec:	4b64      	ldr	r3, [pc, #400]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a63      	ldr	r2, [pc, #396]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x30c>
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a5e      	ldr	r2, [pc, #376]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	4b5c      	ldr	r3, [pc, #368]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a5b      	ldr	r2, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003d1c:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4a57      	ldr	r2, [pc, #348]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a54      	ldr	r2, [pc, #336]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fd f9ca 	bl	80010d4 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fd f9c6 	bl	80010d4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0cb      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ee      	beq.n	8003d44 <HAL_RCC_OscConfig+0x334>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d68:	f7fd f9b4 	bl	80010d4 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fd f9b0 	bl	80010d4 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0b5      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ee      	bne.n	8003d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	4a38      	ldr	r2, [pc, #224]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a1 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d05c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d141      	bne.n	8003e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd f984 	bl	80010d4 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd f980 	bl	80010d4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e087      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	491b      	ldr	r1, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd f959 	bl	80010d4 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd f955 	bl	80010d4 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e05c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x416>
 8003e44:	e054      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fd f942 	bl	80010d4 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd f93e 	bl	80010d4 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e045      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x444>
 8003e72:	e03d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e038      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d028      	beq.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d121      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d11a      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d111      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cc      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b68      	ldr	r3, [pc, #416]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90c      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f54:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a52      	ldr	r2, [pc, #328]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	494d      	ldr	r1, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d119      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e067      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4934      	ldr	r1, [pc, #208]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd f870 	bl	80010d4 <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff8:	f7fd f86c 	bl	80010d4 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e04f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 020c 	and.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d1eb      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d20c      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e032      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4916      	ldr	r1, [pc, #88]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004086:	f000 f821 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490a      	ldr	r1, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc feb4 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00
 80040bc:	40023800 	.word	0x40023800
 80040c0:	0800ba48 	.word	0x0800ba48
 80040c4:	20000000 	.word	0x20000000
 80040c8:	20000004 	.word	0x20000004

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b094      	sub	sp, #80	; 0x50
 80040d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	647b      	str	r3, [r7, #68]	; 0x44
 80040d8:	2300      	movs	r3, #0
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	2300      	movs	r3, #0
 80040de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e4:	4b79      	ldr	r3, [pc, #484]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d00d      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x40>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	f200 80e1 	bhi.w	80042b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x34>
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d003      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fe:	e0db      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b73      	ldr	r3, [pc, #460]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004104:	e0db      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410a:	e0d8      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004114:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004116:	4b6d      	ldr	r3, [pc, #436]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d063      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	2200      	movs	r2, #0
 800412a:	63bb      	str	r3, [r7, #56]	; 0x38
 800412c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
 8004136:	2300      	movs	r3, #0
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
 800413a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800413e:	4622      	mov	r2, r4
 8004140:	462b      	mov	r3, r5
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	0159      	lsls	r1, r3, #5
 800414c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004150:	0150      	lsls	r0, r2, #5
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4621      	mov	r1, r4
 8004158:	1a51      	subs	r1, r2, r1
 800415a:	6139      	str	r1, [r7, #16]
 800415c:	4629      	mov	r1, r5
 800415e:	eb63 0301 	sbc.w	r3, r3, r1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004170:	4659      	mov	r1, fp
 8004172:	018b      	lsls	r3, r1, #6
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800417a:	4651      	mov	r1, sl
 800417c:	018a      	lsls	r2, r1, #6
 800417e:	4651      	mov	r1, sl
 8004180:	ebb2 0801 	subs.w	r8, r2, r1
 8004184:	4659      	mov	r1, fp
 8004186:	eb63 0901 	sbc.w	r9, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419e:	4690      	mov	r8, r2
 80041a0:	4699      	mov	r9, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb18 0303 	adds.w	r3, r8, r3
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	462b      	mov	r3, r5
 80041ac:	eb49 0303 	adc.w	r3, r9, r3
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041be:	4629      	mov	r1, r5
 80041c0:	024b      	lsls	r3, r1, #9
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041c8:	4621      	mov	r1, r4
 80041ca:	024a      	lsls	r2, r1, #9
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d2:	2200      	movs	r2, #0
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041dc:	f7fc f84a 	bl	8000274 <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4613      	mov	r3, r2
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e8:	e058      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	2200      	movs	r2, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	4611      	mov	r1, r2
 80041f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041fa:	623b      	str	r3, [r7, #32]
 80041fc:	2300      	movs	r3, #0
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004200:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	f04f 0000 	mov.w	r0, #0
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	0159      	lsls	r1, r3, #5
 8004212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004216:	0150      	lsls	r0, r2, #5
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4641      	mov	r1, r8
 800421e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004222:	4649      	mov	r1, r9
 8004224:	eb63 0b01 	sbc.w	fp, r3, r1
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004234:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004238:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800423c:	ebb2 040a 	subs.w	r4, r2, sl
 8004240:	eb63 050b 	sbc.w	r5, r3, fp
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	00eb      	lsls	r3, r5, #3
 800424e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004252:	00e2      	lsls	r2, r4, #3
 8004254:	4614      	mov	r4, r2
 8004256:	461d      	mov	r5, r3
 8004258:	4643      	mov	r3, r8
 800425a:	18e3      	adds	r3, r4, r3
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	464b      	mov	r3, r9
 8004260:	eb45 0303 	adc.w	r3, r5, r3
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004272:	4629      	mov	r1, r5
 8004274:	028b      	lsls	r3, r1, #10
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800427c:	4621      	mov	r1, r4
 800427e:	028a      	lsls	r2, r1, #10
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004286:	2200      	movs	r2, #0
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	61fa      	str	r2, [r7, #28]
 800428c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004290:	f7fb fff0 	bl	8000274 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	3301      	adds	r3, #1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b6:	e002      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3750      	adds	r7, #80	; 0x50
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	007a1200 	.word	0x007a1200

080042d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000000 	.word	0x20000000

080042f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4903      	ldr	r1, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	0800ba58 	.word	0x0800ba58

08004318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800431c:	f7ff ffdc 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0b5b      	lsrs	r3, r3, #13
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <HAL_RCC_GetPCLK2Freq+0x24>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40023800 	.word	0x40023800
 800433c:	0800ba58 	.word	0x0800ba58

08004340 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	220f      	movs	r2, #15
 800434e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004350:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0203 	and.w	r2, r3, #3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_RCC_GetClockConfig+0x60>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0207 	and.w	r2, r3, #7
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800
 80043a0:	40023c00 	.word	0x40023c00

080043a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d038      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043cc:	4b68      	ldr	r3, [pc, #416]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043d2:	f7fc fe7f 	bl	80010d4 <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043da:	f7fc fe7b 	bl	80010d4 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0bd      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ec:	4b61      	ldr	r3, [pc, #388]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f0      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	071b      	lsls	r3, r3, #28
 800440a:	495a      	ldr	r1, [pc, #360]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004412:	4b57      	ldr	r3, [pc, #348]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004418:	f7fc fe5c 	bl	80010d4 <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004420:	f7fc fe58 	bl	80010d4 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e09a      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004432:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8083 	beq.w	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	4b48      	ldr	r3, [pc, #288]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	4a47      	ldr	r2, [pc, #284]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445a:	6413      	str	r3, [r2, #64]	; 0x40
 800445c:	4b45      	ldr	r3, [pc, #276]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004468:	4b43      	ldr	r3, [pc, #268]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a42      	ldr	r2, [pc, #264]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800446e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004472:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004474:	f7fc fe2e 	bl	80010d4 <HAL_GetTick>
 8004478:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800447c:	f7fc fe2a 	bl	80010d4 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e06c      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800448e:	4b3a      	ldr	r3, [pc, #232]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800449a:	4b36      	ldr	r3, [pc, #216]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02f      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d028      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044b8:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044c2:	4b2e      	ldr	r3, [pc, #184]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044c8:	4b2c      	ldr	r3, [pc, #176]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044ce:	4a29      	ldr	r2, [pc, #164]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044d4:	4b27      	ldr	r3, [pc, #156]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d114      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fc fdf8 	bl	80010d4 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	e00a      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fc fdf4 	bl	80010d4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e034      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0ee      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004516:	d10d      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004518:	4b16      	ldr	r3, [pc, #88]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452c:	4911      	ldr	r1, [pc, #68]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
 8004532:	e005      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800453e:	6093      	str	r3, [r2, #8]
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454c:	4909      	ldr	r1, [pc, #36]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	7d1a      	ldrb	r2, [r3, #20]
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004564:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	42470068 	.word	0x42470068
 8004574:	40023800 	.word	0x40023800
 8004578:	40007000 	.word	0x40007000
 800457c:	42470e40 	.word	0x42470e40
 8004580:	424711e0 	.word	0x424711e0

08004584 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d140      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045a2:	4b24      	ldr	r3, [pc, #144]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d131      	bne.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045b8:	4b1f      	ldr	r3, [pc, #124]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045ba:	617b      	str	r3, [r7, #20]
          break;
 80045bc:	e031      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045be:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ca:	d109      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045cc:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d6:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	e008      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045e0:	4b14      	ldr	r3, [pc, #80]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ea:	4a15      	ldr	r2, [pc, #84]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	fb02 f303 	mul.w	r3, r2, r3
 8004604:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	0f1b      	lsrs	r3, r3, #28
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]
          break;
 800461a:	e002      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
          break;
 8004620:	bf00      	nop
        }
      }
      break;
 8004622:	bf00      	nop
    }
  }
  return frequency;
 8004624:	697b      	ldr	r3, [r7, #20]
}
 8004626:	4618      	mov	r0, r3
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	00bb8000 	.word	0x00bb8000
 800463c:	007a1200 	.word	0x007a1200
 8004640:	00f42400 	.word	0x00f42400

08004644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e07b      	b.n	800474e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004666:	d009      	beq.n	800467c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	61da      	str	r2, [r3, #28]
 800466e:	e005      	b.n	800467c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fb74 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	ea42 0103 	orr.w	r1, r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0104 	and.w	r1, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f003 0210 	and.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e041      	b.n	80047ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f839 	bl	80047f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f000 f9c9 	bl	8004b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e044      	b.n	80048aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d018      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x6c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d013      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x6c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1a      	ldr	r2, [pc, #104]	; (80048bc <HAL_TIM_Base_Start_IT+0xb4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x6c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a19      	ldr	r2, [pc, #100]	; (80048c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d009      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x6c>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x6c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a16      	ldr	r2, [pc, #88]	; (80048c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d111      	bne.n	8004898 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b06      	cmp	r3, #6
 8004884:	d010      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0201 	orr.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004896:	e007      	b.n	80048a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40014000 	.word	0x40014000

080048cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0202 	mvn.w	r2, #2
 80048f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8ee 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8e0 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8f1 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0204 	mvn.w	r2, #4
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8c4 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f8b6 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f8c7 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b08      	cmp	r3, #8
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b08      	cmp	r3, #8
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0208 	mvn.w	r2, #8
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2204      	movs	r2, #4
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f89a 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f88c 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f89d 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0210 	mvn.w	r2, #16
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2208      	movs	r2, #8
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f870 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f862 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f873 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0201 	mvn.w	r2, #1
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc f844 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d10e      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b80      	cmp	r3, #128	; 0x80
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8e2 	bl	8004c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d10e      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d107      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f838 	bl	8004b18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d10e      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d107      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0220 	mvn.w	r2, #32
 8004acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8ac 	bl	8004c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a34      	ldr	r2, [pc, #208]	; (8004c10 <TIM_Base_SetConfig+0xe4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00f      	beq.n	8004b64 <TIM_Base_SetConfig+0x38>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4a:	d00b      	beq.n	8004b64 <TIM_Base_SetConfig+0x38>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a31      	ldr	r2, [pc, #196]	; (8004c14 <TIM_Base_SetConfig+0xe8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d007      	beq.n	8004b64 <TIM_Base_SetConfig+0x38>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a30      	ldr	r2, [pc, #192]	; (8004c18 <TIM_Base_SetConfig+0xec>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_Base_SetConfig+0x38>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a2f      	ldr	r2, [pc, #188]	; (8004c1c <TIM_Base_SetConfig+0xf0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d108      	bne.n	8004b76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a25      	ldr	r2, [pc, #148]	; (8004c10 <TIM_Base_SetConfig+0xe4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d01b      	beq.n	8004bb6 <TIM_Base_SetConfig+0x8a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b84:	d017      	beq.n	8004bb6 <TIM_Base_SetConfig+0x8a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a22      	ldr	r2, [pc, #136]	; (8004c14 <TIM_Base_SetConfig+0xe8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <TIM_Base_SetConfig+0x8a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <TIM_Base_SetConfig+0xec>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00f      	beq.n	8004bb6 <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a20      	ldr	r2, [pc, #128]	; (8004c1c <TIM_Base_SetConfig+0xf0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	; (8004c20 <TIM_Base_SetConfig+0xf4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <TIM_Base_SetConfig+0xf8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d003      	beq.n	8004bb6 <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <TIM_Base_SetConfig+0xfc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d108      	bne.n	8004bc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a08      	ldr	r2, [pc, #32]	; (8004c10 <TIM_Base_SetConfig+0xe4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d103      	bne.n	8004bfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	615a      	str	r2, [r3, #20]
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c54:	b084      	sub	sp, #16
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	f107 001c 	add.w	r0, r7, #28
 8004c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d122      	bne.n	8004cb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f9c0 	bl	800502c <USB_CoreReset>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
 8004cb0:	e01a      	b.n	8004ce8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9b4 	bl	800502c <USB_CoreReset>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8004cda:	e005      	b.n	8004ce8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d10b      	bne.n	8004d06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f043 0206 	orr.w	r2, r3, #6
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d12:	b004      	add	sp, #16
 8004d14:	4770      	bx	lr

08004d16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f043 0201 	orr.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f023 0201 	bic.w	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d115      	bne.n	8004da8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d88:	2001      	movs	r0, #1
 8004d8a:	f7fc f9af 	bl	80010ec <HAL_Delay>
      ms++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3301      	adds	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f93a 	bl	800500e <USB_GetMode>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d01e      	beq.n	8004dde <USB_SetCurrentMode+0x84>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b31      	cmp	r3, #49	; 0x31
 8004da4:	d9f0      	bls.n	8004d88 <USB_SetCurrentMode+0x2e>
 8004da6:	e01a      	b.n	8004dde <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d115      	bne.n	8004dda <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dba:	2001      	movs	r0, #1
 8004dbc:	f7fc f996 	bl	80010ec <HAL_Delay>
      ms++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f921 	bl	800500e <USB_GetMode>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <USB_SetCurrentMode+0x84>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b31      	cmp	r3, #49	; 0x31
 8004dd6:	d9f0      	bls.n	8004dba <USB_SetCurrentMode+0x60>
 8004dd8:	e001      	b.n	8004dde <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e005      	b.n	8004dea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b32      	cmp	r3, #50	; 0x32
 8004de2:	d101      	bne.n	8004de8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <USB_FlushTxFifo+0x64>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e01b      	b.n	8004e4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	daf2      	bge.n	8004e02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	019b      	lsls	r3, r3, #6
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <USB_FlushTxFifo+0x64>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e006      	b.n	8004e4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d0f0      	beq.n	8004e2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	00030d40 	.word	0x00030d40

08004e5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a11      	ldr	r2, [pc, #68]	; (8004eb8 <USB_FlushRxFifo+0x5c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e018      	b.n	8004eac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	daf2      	bge.n	8004e68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2210      	movs	r2, #16
 8004e8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <USB_FlushRxFifo+0x5c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e006      	b.n	8004eac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d0f0      	beq.n	8004e8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	00030d40 	.word	0x00030d40

08004ebc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	; 0x24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	460b      	mov	r3, r1
 8004ecc:	71fb      	strb	r3, [r7, #7]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004eda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d123      	bne.n	8004f2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ee2:	88bb      	ldrh	r3, [r7, #4]
 8004ee4:	3303      	adds	r3, #3
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	e018      	b.n	8004f22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	031a      	lsls	r2, r3, #12
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efc:	461a      	mov	r2, r3
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	3301      	adds	r3, #1
 8004f14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d3e2      	bcc.n	8004ef0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3724      	adds	r7, #36	; 0x24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b08b      	sub	sp, #44	; 0x2c
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	4613      	mov	r3, r2
 8004f44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	089b      	lsrs	r3, r3, #2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	623b      	str	r3, [r7, #32]
 8004f62:	e014      	b.n	8004f8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	3301      	adds	r3, #1
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	3301      	adds	r3, #1
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	3301      	adds	r3, #1
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	3301      	adds	r3, #1
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	623b      	str	r3, [r7, #32]
 8004f8e:	6a3a      	ldr	r2, [r7, #32]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d3e6      	bcc.n	8004f64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f96:	8bfb      	ldrh	r3, [r7, #30]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01e      	beq.n	8004fda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f107 0310 	add.w	r3, r7, #16
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	701a      	strb	r2, [r3, #0]
      i++;
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	3301      	adds	r3, #1
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fce:	8bfb      	ldrh	r3, [r7, #30]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fd4:	8bfb      	ldrh	r3, [r7, #30]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ea      	bne.n	8004fb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	372c      	adds	r7, #44	; 0x2c
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005000:	68fb      	ldr	r3, [r7, #12]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0301 	and.w	r3, r3, #1
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3301      	adds	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a13      	ldr	r2, [pc, #76]	; (8005090 <USB_CoreReset+0x64>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e01b      	b.n	8005082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	daf2      	bge.n	8005038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f043 0201 	orr.w	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <USB_CoreReset+0x64>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d901      	bls.n	8005074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e006      	b.n	8005082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b01      	cmp	r3, #1
 800507e:	d0f0      	beq.n	8005062 <USB_CoreReset+0x36>

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	00030d40 	.word	0x00030d40

08005094 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005094:	b084      	sub	sp, #16
 8005096:	b580      	push	{r7, lr}
 8005098:	b086      	sub	sp, #24
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050b4:	461a      	mov	r2, r3
 80050b6:	2300      	movs	r3, #0
 80050b8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d018      	beq.n	800511c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d10a      	bne.n	8005106 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e014      	b.n	8005130 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e009      	b.n	8005130 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800512a:	f023 0304 	bic.w	r3, r3, #4
 800512e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005130:	2110      	movs	r1, #16
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fe5e 	bl	8004df4 <USB_FlushTxFifo>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff fe8a 	bl	8004e5c <USB_FlushRxFifo>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e015      	b.n	8005184 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800516a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005178:	461a      	mov	r2, r3
 800517a:	2300      	movs	r3, #0
 800517c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	3301      	adds	r3, #1
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d3e5      	bcc.n	8005158 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005198:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a13      	ldr	r2, [pc, #76]	; (8005200 <USB_HostInit+0x16c>)
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a13      	ldr	r2, [pc, #76]	; (8005204 <USB_HostInit+0x170>)
 80051b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80051bc:	e009      	b.n	80051d2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2280      	movs	r2, #128	; 0x80
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <USB_HostInit+0x174>)
 80051c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a0f      	ldr	r2, [pc, #60]	; (800520c <USB_HostInit+0x178>)
 80051ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f043 0210 	orr.w	r2, r3, #16
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <USB_HostInit+0x17c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051fc:	b004      	add	sp, #16
 80051fe:	4770      	bx	lr
 8005200:	01000200 	.word	0x01000200
 8005204:	00e00300 	.word	0x00e00300
 8005208:	00600080 	.word	0x00600080
 800520c:	004000e0 	.word	0x004000e0
 8005210:	a3200008 	.word	0xa3200008

08005214 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d107      	bne.n	8005266 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800525c:	461a      	mov	r2, r3
 800525e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005262:	6053      	str	r3, [r2, #4]
 8005264:	e009      	b.n	800527a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d106      	bne.n	800527a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005272:	461a      	mov	r2, r3
 8005274:	f241 7370 	movw	r3, #6000	; 0x1770
 8005278:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80052b8:	2064      	movs	r0, #100	; 0x64
 80052ba:	f7fb ff17 	bl	80010ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80052cc:	200a      	movs	r0, #10
 80052ce:	f7fb ff0d 	bl	80010ec <HAL_Delay>

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005300:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <USB_DriveVbus+0x44>
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d106      	bne.n	8005320 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800531a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800531e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532a:	d109      	bne.n	8005340 <USB_DriveVbus+0x64>
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800533a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800533e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	0c5b      	lsrs	r3, r3, #17
 800536c:	f003 0303 	and.w	r3, r3, #3
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	b29b      	uxth	r3, r3
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	461a      	mov	r2, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	70fb      	strb	r3, [r7, #3]
 80053b2:	460b      	mov	r3, r1
 80053b4:	70bb      	strb	r3, [r7, #2]
 80053b6:	4613      	mov	r3, r2
 80053b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	461a      	mov	r2, r3
 80053d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80053d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d87e      	bhi.n	80054dc <USB_HC_Init+0x13c>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <USB_HC_Init+0x44>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053f5 	.word	0x080053f5
 80053e8:	0800549f 	.word	0x0800549f
 80053ec:	080053f5 	.word	0x080053f5
 80053f0:	08005461 	.word	0x08005461
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005400:	461a      	mov	r2, r3
 8005402:	f240 439d 	movw	r3, #1181	; 0x49d
 8005406:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005408:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800540c:	2b00      	cmp	r3, #0
 800540e:	da10      	bge.n	8005432 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	78fa      	ldrb	r2, [r7, #3]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	440a      	add	r2, r1
 8005426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005430:	e057      	b.n	80054e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d051      	beq.n	80054e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	440a      	add	r2, r1
 8005454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005458:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800545c:	60d3      	str	r3, [r2, #12]
      break;
 800545e:	e040      	b.n	80054e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546c:	461a      	mov	r2, r3
 800546e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005472:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005474:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005478:	2b00      	cmp	r3, #0
 800547a:	da34      	bge.n	80054e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	4413      	add	r3, r2
 8005484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	78fa      	ldrb	r2, [r7, #3]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	440a      	add	r2, r1
 8005492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800549c:	e023      	b.n	80054e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054aa:	461a      	mov	r2, r3
 80054ac:	f240 2325 	movw	r3, #549	; 0x225
 80054b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	da17      	bge.n	80054ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80054d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80054da:	e006      	b.n	80054ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	77fb      	strb	r3, [r7, #31]
      break;
 80054e0:	e004      	b.n	80054ec <USB_HC_Init+0x14c>
      break;
 80054e2:	bf00      	nop
 80054e4:	e002      	b.n	80054ec <USB_HC_Init+0x14c>
      break;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <USB_HC_Init+0x14c>
      break;
 80054ea:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	440a      	add	r2, r1
 8005502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005506:	f043 0302 	orr.w	r3, r3, #2
 800550a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005512:	699a      	ldr	r2, [r3, #24]
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	2101      	movs	r1, #1
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	6939      	ldr	r1, [r7, #16]
 8005522:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005526:	4313      	orrs	r3, r2
 8005528:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005536:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800553a:	2b00      	cmp	r3, #0
 800553c:	da03      	bge.n	8005546 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800553e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	e001      	b.n	800554a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff feff 	bl	800534e <USB_GetHostSpeed>
 8005550:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005552:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005556:	2b02      	cmp	r3, #2
 8005558:	d106      	bne.n	8005568 <USB_HC_Init+0x1c8>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d003      	beq.n	8005568 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e001      	b.n	800556c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800556c:	787b      	ldrb	r3, [r7, #1]
 800556e:	059b      	lsls	r3, r3, #22
 8005570:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005574:	78bb      	ldrb	r3, [r7, #2]
 8005576:	02db      	lsls	r3, r3, #11
 8005578:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800557c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800557e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005582:	049b      	lsls	r3, r3, #18
 8005584:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005588:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800558a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800558c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005590:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	0159      	lsls	r1, r3, #5
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	440b      	add	r3, r1
 800559e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055a8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80055aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d003      	beq.n	80055ba <USB_HC_Init+0x21a>
 80055b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d10f      	bne.n	80055da <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055d8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80055da:	7ffb      	ldrb	r3, [r7, #31]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08c      	sub	sp, #48	; 0x30
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80055fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005600:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560a:	2b00      	cmp	r3, #0
 800560c:	d02d      	beq.n	800566a <USB_HC_StartXfer+0x86>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	791b      	ldrb	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d129      	bne.n	800566a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d117      	bne.n	800564c <USB_HC_StartXfer+0x68>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	79db      	ldrb	r3, [r3, #7]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <USB_HC_StartXfer+0x48>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	79db      	ldrb	r3, [r3, #7]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d10f      	bne.n	800564c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	4413      	add	r3, r2
 8005634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	6a3a      	ldr	r2, [r7, #32]
 8005640:	440a      	add	r2, r1
 8005642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <USB_HC_StartXfer+0x86>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	795b      	ldrb	r3, [r3, #5]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d107      	bne.n	800566a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	4619      	mov	r1, r3
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 fa0f 	bl	8005a84 <USB_DoPing>
      return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e0f8      	b.n	800585c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d018      	beq.n	80056a4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	8912      	ldrh	r2, [r2, #8]
 800567a:	4413      	add	r3, r2
 800567c:	3b01      	subs	r3, #1
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	8912      	ldrh	r2, [r2, #8]
 8005682:	fbb3 f3f2 	udiv	r3, r3, r2
 8005686:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005688:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800568a:	8b7b      	ldrh	r3, [r7, #26]
 800568c:	429a      	cmp	r2, r3
 800568e:	d90b      	bls.n	80056a8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005690:	8b7b      	ldrh	r3, [r7, #26]
 8005692:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005694:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	8912      	ldrh	r2, [r2, #8]
 800569a:	fb03 f202 	mul.w	r2, r3, r2
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	611a      	str	r2, [r3, #16]
 80056a2:	e001      	b.n	80056a8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80056a4:	2301      	movs	r3, #1
 80056a6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	78db      	ldrb	r3, [r3, #3]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	8912      	ldrh	r2, [r2, #8]
 80056b6:	fb03 f202 	mul.w	r2, r3, r2
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	611a      	str	r2, [r3, #16]
 80056be:	e003      	b.n	80056c8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056d2:	04d9      	lsls	r1, r3, #19
 80056d4:	4b63      	ldr	r3, [pc, #396]	; (8005864 <USB_HC_StartXfer+0x280>)
 80056d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	7a9b      	ldrb	r3, [r3, #10]
 80056de:	075b      	lsls	r3, r3, #29
 80056e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056e4:	69f9      	ldr	r1, [r7, #28]
 80056e6:	0148      	lsls	r0, r1, #5
 80056e8:	6a39      	ldr	r1, [r7, #32]
 80056ea:	4401      	add	r1, r0
 80056ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	68d9      	ldr	r1, [r3, #12]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	4413      	add	r3, r2
 8005706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570a:	460a      	mov	r2, r1
 800570c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	4413      	add	r3, r2
 800572e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	6a3a      	ldr	r2, [r7, #32]
 800573a:	440a      	add	r2, r1
 800573c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005740:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005744:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	4413      	add	r3, r2
 800574e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	7e7b      	ldrb	r3, [r7, #25]
 8005756:	075b      	lsls	r3, r3, #29
 8005758:	69f9      	ldr	r1, [r7, #28]
 800575a:	0148      	lsls	r0, r1, #5
 800575c:	6a39      	ldr	r1, [r7, #32]
 800575e:	4401      	add	r1, r0
 8005760:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005764:	4313      	orrs	r3, r2
 8005766:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	4413      	add	r3, r2
 8005770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800577e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	78db      	ldrb	r3, [r3, #3]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	e003      	b.n	800579a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005798:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	461a      	mov	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e04e      	b.n	800585c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	78db      	ldrb	r3, [r3, #3]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d149      	bne.n	800585a <USB_HC_StartXfer+0x276>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d045      	beq.n	800585a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	79db      	ldrb	r3, [r3, #7]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d830      	bhi.n	8005838 <USB_HC_StartXfer+0x254>
 80057d6:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <USB_HC_StartXfer+0x1f8>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	080057ed 	.word	0x080057ed
 80057e0:	08005811 	.word	0x08005811
 80057e4:	080057ed 	.word	0x080057ed
 80057e8:	08005811 	.word	0x08005811
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	3303      	adds	r3, #3
 80057f2:	089b      	lsrs	r3, r3, #2
 80057f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80057f6:	8afa      	ldrh	r2, [r7, #22]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	429a      	cmp	r2, r3
 8005800:	d91c      	bls.n	800583c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	619a      	str	r2, [r3, #24]
        }
        break;
 800580e:	e015      	b.n	800583c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	3303      	adds	r3, #3
 8005816:	089b      	lsrs	r3, r3, #2
 8005818:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800581a:	8afa      	ldrh	r2, [r7, #22]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	b29b      	uxth	r3, r3
 8005826:	429a      	cmp	r2, r3
 8005828:	d90a      	bls.n	8005840 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]
        }
        break;
 8005836:	e003      	b.n	8005840 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005838:	bf00      	nop
 800583a:	e002      	b.n	8005842 <USB_HC_StartXfer+0x25e>
        break;
 800583c:	bf00      	nop
 800583e:	e000      	b.n	8005842 <USB_HC_StartXfer+0x25e>
        break;
 8005840:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	68d9      	ldr	r1, [r3, #12]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	785a      	ldrb	r2, [r3, #1]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	b29b      	uxth	r3, r3
 8005850:	2000      	movs	r0, #0
 8005852:	9000      	str	r0, [sp, #0]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff fb31 	bl	8004ebc <USB_WritePacket>
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3728      	adds	r7, #40	; 0x28
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	1ff80000 	.word	0x1ff80000

08005868 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	b29b      	uxth	r3, r3
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800588a:	b480      	push	{r7}
 800588c:	b089      	sub	sp, #36	; 0x24
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	0c9b      	lsrs	r3, r3, #18
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	0fdb      	lsrs	r3, r3, #31
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d104      	bne.n	80058e4 <USB_HC_Halt+0x5a>
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	e0c8      	b.n	8005a76 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <USB_HC_Halt+0x66>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d163      	bne.n	80059b8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	440a      	add	r2, r1
 8005906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800590a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800590e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	f040 80ab 	bne.w	8005a74 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d133      	bne.n	8005992 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	440a      	add	r2, r1
 8005940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005948:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	440a      	add	r2, r1
 8005960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005968:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3301      	adds	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005976:	d81d      	bhi.n	80059b4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800598a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598e:	d0ec      	beq.n	800596a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005990:	e070      	b.n	8005a74 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059b2:	e05f      	b.n	8005a74 <USB_HC_Halt+0x1ea>
            break;
 80059b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059b6:	e05d      	b.n	8005a74 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d133      	bne.n	8005a50 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a26:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a34:	d81d      	bhi.n	8005a72 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4c:	d0ec      	beq.n	8005a28 <USB_HC_Halt+0x19e>
 8005a4e:	e011      	b.n	8005a74 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e000      	b.n	8005a74 <USB_HC_Halt+0x1ea>
          break;
 8005a72:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3724      	adds	r7, #36	; 0x24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	04da      	lsls	r2, r3, #19
 8005aa0:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <USB_DoPing+0x74>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ab4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005acc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ad4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	1ff80000 	.word	0x1ff80000

08005afc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff f911 	bl	8004d38 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b16:	2110      	movs	r1, #16
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff f96b 	bl	8004df4 <USB_FlushTxFifo>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff f997 	bl	8004e5c <USB_FlushRxFifo>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	e01f      	b.n	8005b7e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b72:	461a      	mov	r2, r3
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b0f      	cmp	r3, #15
 8005b82:	d9dc      	bls.n	8005b3e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	e034      	b.n	8005bf4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ba8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd0:	d80c      	bhi.n	8005bec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be8:	d0ec      	beq.n	8005bc4 <USB_StopHost+0xc8>
 8005bea:	e000      	b.n	8005bee <USB_StopHost+0xf2>
        break;
 8005bec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d9c7      	bls.n	8005b8a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c00:	461a      	mov	r2, r3
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff f880 	bl	8004d16 <USB_EnableGlobalInt>

  return ret;
 8005c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b089      	sub	sp, #36	; 0x24
 8005c24:	af04      	add	r7, sp, #16
 8005c26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005c28:	2301      	movs	r3, #1
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	2102      	movs	r1, #2
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fc66 	bl	8006500 <USBH_FindInterface>
 8005c34:	4603      	mov	r3, r0
 8005c36:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2bff      	cmp	r3, #255	; 0xff
 8005c3c:	d002      	beq.n	8005c44 <USBH_CDC_InterfaceInit+0x24>
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d901      	bls.n	8005c48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c44:	2302      	movs	r3, #2
 8005c46:	e13d      	b.n	8005ec4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fc3b 	bl	80064c8 <USBH_SelectInterface>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005c56:	7bbb      	ldrb	r3, [r7, #14]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e131      	b.n	8005ec4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005c66:	2050      	movs	r0, #80	; 0x50
 8005c68:	f005 f93e 	bl	800aee8 <malloc>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005c80:	2302      	movs	r3, #2
 8005c82:	e11f      	b.n	8005ec4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005c84:	2250      	movs	r2, #80	; 0x50
 8005c86:	2100      	movs	r1, #0
 8005c88:	68b8      	ldr	r0, [r7, #8]
 8005c8a:	f005 f95b 	bl	800af44 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	211a      	movs	r1, #26
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	4413      	add	r3, r2
 8005c9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da15      	bge.n	8005cd2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	211a      	movs	r1, #26
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	211a      	movs	r1, #26
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ccc:	881a      	ldrh	r2, [r3, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 ff2c 	bl	8007b36 <USBH_AllocPipe>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	7819      	ldrb	r1, [r3, #0]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	7858      	ldrb	r0, [r3, #1]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	8952      	ldrh	r2, [r2, #10]
 8005cfe:	9202      	str	r2, [sp, #8]
 8005d00:	2203      	movs	r2, #3
 8005d02:	9201      	str	r2, [sp, #4]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4623      	mov	r3, r4
 8005d08:	4602      	mov	r2, r0
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fee4 	bl	8007ad8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2200      	movs	r2, #0
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f005 f83d 	bl	800ad98 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d1e:	2300      	movs	r3, #0
 8005d20:	2200      	movs	r2, #0
 8005d22:	210a      	movs	r1, #10
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fbeb 	bl	8006500 <USBH_FindInterface>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	2bff      	cmp	r3, #255	; 0xff
 8005d32:	d002      	beq.n	8005d3a <USBH_CDC_InterfaceInit+0x11a>
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d901      	bls.n	8005d3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e0c2      	b.n	8005ec4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	211a      	movs	r1, #26
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	4413      	add	r3, r2
 8005d4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	b25b      	sxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	da16      	bge.n	8005d84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	211a      	movs	r1, #26
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	211a      	movs	r1, #26
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	835a      	strh	r2, [r3, #26]
 8005d82:	e015      	b.n	8005db0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	211a      	movs	r1, #26
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d94:	781a      	ldrb	r2, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	211a      	movs	r1, #26
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005daa:	881a      	ldrh	r2, [r3, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	211a      	movs	r1, #26
 8005db6:	fb01 f303 	mul.w	r3, r1, r3
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da16      	bge.n	8005df6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	211a      	movs	r1, #26
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dd8:	781a      	ldrb	r2, [r3, #0]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	211a      	movs	r1, #26
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005dee:	881a      	ldrh	r2, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	835a      	strh	r2, [r3, #26]
 8005df4:	e015      	b.n	8005e22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	211a      	movs	r1, #26
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	211a      	movs	r1, #26
 8005e12:	fb01 f303 	mul.w	r3, r1, r3
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e1c:	881a      	ldrh	r2, [r3, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	7b9b      	ldrb	r3, [r3, #14]
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 fe84 	bl	8007b36 <USBH_AllocPipe>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	461a      	mov	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	7bdb      	ldrb	r3, [r3, #15]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 fe7a 	bl	8007b36 <USBH_AllocPipe>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	7b59      	ldrb	r1, [r3, #13]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	7b98      	ldrb	r0, [r3, #14]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	8b12      	ldrh	r2, [r2, #24]
 8005e62:	9202      	str	r2, [sp, #8]
 8005e64:	2202      	movs	r2, #2
 8005e66:	9201      	str	r2, [sp, #4]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4623      	mov	r3, r4
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 fe32 	bl	8007ad8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	7b19      	ldrb	r1, [r3, #12]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	7bd8      	ldrb	r0, [r3, #15]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	8b52      	ldrh	r2, [r2, #26]
 8005e8c:	9202      	str	r2, [sp, #8]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	9201      	str	r2, [sp, #4]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	4623      	mov	r3, r4
 8005e96:	4602      	mov	r2, r0
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 fe1d 	bl	8007ad8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	7b5b      	ldrb	r3, [r3, #13]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f004 ff72 	bl	800ad98 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	7b1b      	ldrb	r3, [r3, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f004 ff6b 	bl	800ad98 <USBH_LL_SetToggle>

  return USBH_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd90      	pop	{r4, r7, pc}

08005ecc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fe12 	bl	8007b16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 fe3d 	bl	8007b78 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	7b1b      	ldrb	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00e      	beq.n	8005f2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	7b1b      	ldrb	r3, [r3, #12]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 fdff 	bl	8007b16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	7b1b      	ldrb	r3, [r3, #12]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 fe2a 	bl	8007b78 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	7b5b      	ldrb	r3, [r3, #13]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	7b5b      	ldrb	r3, [r3, #13]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fdec 	bl	8007b16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	7b5b      	ldrb	r3, [r3, #13]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 fe17 	bl	8007b78 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f004 ffc7 	bl	800aef8 <free>
    phost->pActiveClass->pData = 0U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f70:	2200      	movs	r2, #0
 8005f72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3340      	adds	r3, #64	; 0x40
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f8b1 	bl	80060fe <GetLineCoding>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005fa0:	7afb      	ldrb	r3, [r7, #11]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d105      	bne.n	8005fb2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fac:	2102      	movs	r1, #2
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d877      	bhi.n	80060d0 <USBH_CDC_Process+0x114>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <USBH_CDC_Process+0x2c>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	08005ffd 	.word	0x08005ffd
 8005fec:	08006003 	.word	0x08006003
 8005ff0:	08006033 	.word	0x08006033
 8005ff4:	080060a7 	.word	0x080060a7
 8005ff8:	080060b5 	.word	0x080060b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8006000:	e06d      	b.n	80060de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f897 	bl	800613c <SetLineCoding>
 800600e:	4603      	mov	r3, r0
 8006010:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006020:	e058      	b.n	80060d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d055      	beq.n	80060d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2204      	movs	r2, #4
 800602c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006030:	e050      	b.n	80060d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	3340      	adds	r3, #64	; 0x40
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f860 	bl	80060fe <GetLineCoding>
 800603e:	4603      	mov	r3, r0
 8006040:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006042:	7bbb      	ldrb	r3, [r7, #14]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d126      	bne.n	8006096 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605a:	791b      	ldrb	r3, [r3, #4]
 800605c:	429a      	cmp	r2, r3
 800605e:	d13b      	bne.n	80060d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800606c:	429a      	cmp	r2, r3
 800606e:	d133      	bne.n	80060d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800607c:	429a      	cmp	r2, r3
 800607e:	d12b      	bne.n	80060d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006088:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800608a:	429a      	cmp	r2, r3
 800608c:	d124      	bne.n	80060d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f958 	bl	8006344 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006094:	e020      	b.n	80060d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d01d      	beq.n	80060d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2204      	movs	r2, #4
 80060a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060a4:	e018      	b.n	80060d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f867 	bl	800617a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f8da 	bl	8006266 <CDC_ProcessReception>
      break;
 80060b2:	e014      	b.n	80060de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80060b4:	2100      	movs	r1, #0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 ffef 	bl	800709a <USBH_ClrFeature>
 80060bc:	4603      	mov	r3, r0
 80060be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80060ce:	e005      	b.n	80060dc <USBH_CDC_Process+0x120>

    default:
      break;
 80060d0:	bf00      	nop
 80060d2:	e004      	b.n	80060de <USBH_CDC_Process+0x122>
      break;
 80060d4:	bf00      	nop
 80060d6:	e002      	b.n	80060de <USBH_CDC_Process+0x122>
      break;
 80060d8:	bf00      	nop
 80060da:	e000      	b.n	80060de <USBH_CDC_Process+0x122>
      break;
 80060dc:	bf00      	nop

  }

  return status;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	22a1      	movs	r2, #161	; 0xa1
 800610c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2221      	movs	r2, #33	; 0x21
 8006112:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2207      	movs	r2, #7
 8006124:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2207      	movs	r2, #7
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 fa81 	bl	8007634 <USBH_CtlReq>
 8006132:	4603      	mov	r3, r0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2221      	movs	r2, #33	; 0x21
 800614a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2207      	movs	r2, #7
 8006162:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2207      	movs	r2, #7
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 fa62 	bl	8007634 <USBH_CtlReq>
 8006170:	4603      	mov	r3, r0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b086      	sub	sp, #24
 800617e:	af02      	add	r7, sp, #8
 8006180:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800618c:	2300      	movs	r3, #0
 800618e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006196:	2b01      	cmp	r3, #1
 8006198:	d002      	beq.n	80061a0 <CDC_ProcessTransmission+0x26>
 800619a:	2b02      	cmp	r3, #2
 800619c:	d023      	beq.n	80061e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800619e:	e05e      	b.n	800625e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	8b12      	ldrh	r2, [r2, #24]
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d90b      	bls.n	80061c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	69d9      	ldr	r1, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8b1a      	ldrh	r2, [r3, #24]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	7b5b      	ldrb	r3, [r3, #13]
 80061b8:	2001      	movs	r0, #1
 80061ba:	9000      	str	r0, [sp, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 fc48 	bl	8007a52 <USBH_BulkSendData>
 80061c2:	e00b      	b.n	80061dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	7b5b      	ldrb	r3, [r3, #13]
 80061d2:	2001      	movs	r0, #1
 80061d4:	9000      	str	r0, [sp, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 fc3b 	bl	8007a52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061e4:	e03b      	b.n	800625e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	7b5b      	ldrb	r3, [r3, #13]
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f004 fda9 	bl	800ad44 <USBH_LL_GetURBState>
 80061f2:	4603      	mov	r3, r0
 80061f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80061f6:	7afb      	ldrb	r3, [r7, #11]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d128      	bne.n	800624e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	8b12      	ldrh	r2, [r2, #24]
 8006204:	4293      	cmp	r3, r2
 8006206:	d90e      	bls.n	8006226 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	8b12      	ldrh	r2, [r2, #24]
 8006210:	1a9a      	subs	r2, r3, r2
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	8b12      	ldrh	r2, [r2, #24]
 800621e:	441a      	add	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	61da      	str	r2, [r3, #28]
 8006224:	e002      	b.n	800622c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800623c:	e00e      	b.n	800625c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f868 	bl	800631c <USBH_CDC_TransmitCallback>
      break;
 800624c:	e006      	b.n	800625c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800624e:	7afb      	ldrb	r3, [r7, #11]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d103      	bne.n	800625c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800625c:	bf00      	nop
  }
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b086      	sub	sp, #24
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006278:	2300      	movs	r3, #0
 800627a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006282:	2b03      	cmp	r3, #3
 8006284:	d002      	beq.n	800628c <CDC_ProcessReception+0x26>
 8006286:	2b04      	cmp	r3, #4
 8006288:	d00e      	beq.n	80062a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800628a:	e043      	b.n	8006314 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6a19      	ldr	r1, [r3, #32]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	8b5a      	ldrh	r2, [r3, #26]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	7b1b      	ldrb	r3, [r3, #12]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 fbff 	bl	8007a9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2204      	movs	r2, #4
 80062a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062a6:	e035      	b.n	8006314 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	7b1b      	ldrb	r3, [r3, #12]
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f004 fd48 	bl	800ad44 <USBH_LL_GetURBState>
 80062b4:	4603      	mov	r3, r0
 80062b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d129      	bne.n	8006312 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	7b1b      	ldrb	r3, [r3, #12]
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f004 fcab 	bl	800ac20 <USBH_LL_GetLastXferSize>
 80062ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d016      	beq.n	8006304 <CDC_ProcessReception+0x9e>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	8b5b      	ldrh	r3, [r3, #26]
 80062da:	461a      	mov	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4293      	cmp	r3, r2
 80062e0:	d910      	bls.n	8006304 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad2      	subs	r2, r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	441a      	add	r2, r3
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2203      	movs	r2, #3
 80062fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006302:	e006      	b.n	8006312 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f80f 	bl	8006330 <USBH_CDC_ReceiveCallback>
      break;
 8006312:	bf00      	nop
  }
}
 8006314:	bf00      	nop
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800636c:	2302      	movs	r3, #2
 800636e:	e029      	b.n	80063c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	79fa      	ldrb	r2, [r7, #7]
 8006374:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f81f 	bl	80063cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f004 fb7b 	bl	800aab8 <USBH_LL_Init>

  return USBH_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	e009      	b.n	80063f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	33e0      	adds	r3, #224	; 0xe0
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	2200      	movs	r2, #0
 80063ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b0f      	cmp	r3, #15
 80063f6:	d9f2      	bls.n	80063de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e009      	b.n	8006412 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006418:	d3f1      	bcc.n	80063fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2240      	movs	r2, #64	; 0x40
 800643e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d016      	beq.n	80064b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10e      	bne.n	80064b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006498:	1c59      	adds	r1, r3, #1
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	33de      	adds	r3, #222	; 0xde
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
 80064ae:	e004      	b.n	80064ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80064b0:	2302      	movs	r3, #2
 80064b2:	73fb      	strb	r3, [r7, #15]
 80064b4:	e001      	b.n	80064ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80064b6:	2302      	movs	r3, #2
 80064b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d204      	bcs.n	80064ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	78fa      	ldrb	r2, [r7, #3]
 80064e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80064ec:	e001      	b.n	80064f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80064ee:	2302      	movs	r3, #2
 80064f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	461a      	mov	r2, r3
 800650e:	4603      	mov	r3, r0
 8006510:	70fb      	strb	r3, [r7, #3]
 8006512:	460b      	mov	r3, r1
 8006514:	70bb      	strb	r3, [r7, #2]
 8006516:	4613      	mov	r3, r2
 8006518:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006528:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800652a:	e025      	b.n	8006578 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	221a      	movs	r2, #26
 8006530:	fb02 f303 	mul.w	r3, r2, r3
 8006534:	3308      	adds	r3, #8
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	3302      	adds	r3, #2
 800653c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	795b      	ldrb	r3, [r3, #5]
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	429a      	cmp	r2, r3
 8006546:	d002      	beq.n	800654e <USBH_FindInterface+0x4e>
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	2bff      	cmp	r3, #255	; 0xff
 800654c:	d111      	bne.n	8006572 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006552:	78ba      	ldrb	r2, [r7, #2]
 8006554:	429a      	cmp	r2, r3
 8006556:	d002      	beq.n	800655e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006558:	78bb      	ldrb	r3, [r7, #2]
 800655a:	2bff      	cmp	r3, #255	; 0xff
 800655c:	d109      	bne.n	8006572 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006562:	787a      	ldrb	r2, [r7, #1]
 8006564:	429a      	cmp	r2, r3
 8006566:	d002      	beq.n	800656e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006568:	787b      	ldrb	r3, [r7, #1]
 800656a:	2bff      	cmp	r3, #255	; 0xff
 800656c:	d101      	bne.n	8006572 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800656e:	7dfb      	ldrb	r3, [r7, #23]
 8006570:	e006      	b.n	8006580 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	3301      	adds	r3, #1
 8006576:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006578:	7dfb      	ldrb	r3, [r7, #23]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d9d6      	bls.n	800652c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800657e:	23ff      	movs	r3, #255	; 0xff
}
 8006580:	4618      	mov	r0, r3
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f004 facb 	bl	800ab30 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800659a:	2101      	movs	r1, #1
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f004 fbe4 	bl	800ad6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af04      	add	r7, sp, #16
 80065b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80065b4:	2302      	movs	r3, #2
 80065b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d102      	bne.n	80065ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2203      	movs	r2, #3
 80065cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b0b      	cmp	r3, #11
 80065d6:	f200 81be 	bhi.w	8006956 <USBH_Process+0x3aa>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <USBH_Process+0x34>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	08006611 	.word	0x08006611
 80065e4:	08006643 	.word	0x08006643
 80065e8:	080066ab 	.word	0x080066ab
 80065ec:	080068f1 	.word	0x080068f1
 80065f0:	08006957 	.word	0x08006957
 80065f4:	0800674f 	.word	0x0800674f
 80065f8:	08006897 	.word	0x08006897
 80065fc:	08006785 	.word	0x08006785
 8006600:	080067a5 	.word	0x080067a5
 8006604:	080067c5 	.word	0x080067c5
 8006608:	08006809 	.word	0x08006809
 800660c:	080068d9 	.word	0x080068d9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 819e 	beq.w	800695a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006624:	20c8      	movs	r0, #200	; 0xc8
 8006626:	f004 fbe7 	bl	800adf8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f004 fadd 	bl	800abea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006640:	e18b      	b.n	800695a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006648:	2b01      	cmp	r3, #1
 800664a:	d107      	bne.n	800665c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800665a:	e18d      	b.n	8006978 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006666:	d914      	bls.n	8006692 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800666e:	3301      	adds	r3, #1
 8006670:	b2da      	uxtb	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800667e:	2b03      	cmp	r3, #3
 8006680:	d903      	bls.n	800668a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	220d      	movs	r2, #13
 8006686:	701a      	strb	r2, [r3, #0]
      break;
 8006688:	e176      	b.n	8006978 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
      break;
 8006690:	e172      	b.n	8006978 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006698:	f103 020a 	add.w	r2, r3, #10
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80066a2:	200a      	movs	r0, #10
 80066a4:	f004 fba8 	bl	800adf8 <USBH_Delay>
      break;
 80066a8:	e166      	b.n	8006978 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066ba:	2104      	movs	r1, #4
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80066c0:	2064      	movs	r0, #100	; 0x64
 80066c2:	f004 fb99 	bl	800adf8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f004 fa68 	bl	800ab9c <USBH_LL_GetSpeed>
 80066cc:	4603      	mov	r3, r0
 80066ce:	461a      	mov	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2205      	movs	r2, #5
 80066da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80066dc:	2100      	movs	r1, #0
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 fa29 	bl	8007b36 <USBH_AllocPipe>
 80066e4:	4603      	mov	r3, r0
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 fa21 	bl	8007b36 <USBH_AllocPipe>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7919      	ldrb	r1, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006710:	b292      	uxth	r2, r2
 8006712:	9202      	str	r2, [sp, #8]
 8006714:	2200      	movs	r2, #0
 8006716:	9201      	str	r2, [sp, #4]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	4603      	mov	r3, r0
 800671c:	2280      	movs	r2, #128	; 0x80
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 f9da 	bl	8007ad8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	7959      	ldrb	r1, [r3, #5]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006738:	b292      	uxth	r2, r2
 800673a:	9202      	str	r2, [sp, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	9201      	str	r2, [sp, #4]
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	4603      	mov	r3, r0
 8006744:	2200      	movs	r2, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 f9c6 	bl	8007ad8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800674c:	e114      	b.n	8006978 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f918 	bl	8006984 <USBH_HandleEnum>
 8006754:	4603      	mov	r3, r0
 8006756:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 80fe 	bne.w	800695e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006770:	2b01      	cmp	r3, #1
 8006772:	d103      	bne.n	800677c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2208      	movs	r2, #8
 8006778:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800677a:	e0f0      	b.n	800695e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2207      	movs	r2, #7
 8006780:	701a      	strb	r2, [r3, #0]
      break;
 8006782:	e0ec      	b.n	800695e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 80e9 	beq.w	8006962 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006796:	2101      	movs	r1, #1
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2208      	movs	r2, #8
 80067a0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80067a2:	e0de      	b.n	8006962 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fc2c 	bl	800700c <USBH_SetCfg>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f040 80d5 	bne.w	8006966 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2209      	movs	r2, #9
 80067c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067c2:	e0d0      	b.n	8006966 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80067d2:	2101      	movs	r1, #1
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fc3c 	bl	8007052 <USBH_SetFeature>
 80067da:	4603      	mov	r3, r0
 80067dc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	220a      	movs	r2, #10
 80067ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067ec:	e0bd      	b.n	800696a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	f040 80b9 	bne.w	800696a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	220a      	movs	r2, #10
 80067fc:	701a      	strb	r2, [r3, #0]
      break;
 80067fe:	e0b4      	b.n	800696a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	220a      	movs	r2, #10
 8006804:	701a      	strb	r2, [r3, #0]
      break;
 8006806:	e0b0      	b.n	800696a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80ad 	beq.w	800696e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	e016      	b.n	8006850 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006822:	7bfa      	ldrb	r2, [r7, #15]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	32de      	adds	r2, #222	; 0xde
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	791a      	ldrb	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006834:	429a      	cmp	r2, r3
 8006836:	d108      	bne.n	800684a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006838:	7bfa      	ldrb	r2, [r7, #15]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	32de      	adds	r2, #222	; 0xde
 800683e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006848:	e005      	b.n	8006856 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	3301      	adds	r3, #1
 800684e:	73fb      	strb	r3, [r7, #15]
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0e5      	beq.n	8006822 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d016      	beq.n	800688e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2206      	movs	r2, #6
 8006876:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800687e:	2103      	movs	r1, #3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006884:	e073      	b.n	800696e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	220d      	movs	r2, #13
 800688a:	701a      	strb	r2, [r3, #0]
      break;
 800688c:	e06f      	b.n	800696e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	220d      	movs	r2, #13
 8006892:	701a      	strb	r2, [r3, #0]
      break;
 8006894:	e06b      	b.n	800696e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d017      	beq.n	80068d0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
 80068ac:	4603      	mov	r3, r0
 80068ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d103      	bne.n	80068c0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	220b      	movs	r2, #11
 80068bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068be:	e058      	b.n	8006972 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d154      	bne.n	8006972 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	220d      	movs	r2, #13
 80068cc:	701a      	strb	r2, [r3, #0]
      break;
 80068ce:	e050      	b.n	8006972 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	220d      	movs	r2, #13
 80068d4:	701a      	strb	r2, [r3, #0]
      break;
 80068d6:	e04c      	b.n	8006972 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d049      	beq.n	8006976 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
      }
      break;
 80068ee:	e042      	b.n	8006976 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff fd67 	bl	80063cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d009      	beq.n	800691c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800692c:	2105      	movs	r1, #5
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b01      	cmp	r3, #1
 800693c:	d107      	bne.n	800694e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fe20 	bl	800658c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800694c:	e014      	b.n	8006978 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f004 f8ee 	bl	800ab30 <USBH_LL_Start>
      break;
 8006954:	e010      	b.n	8006978 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006956:	bf00      	nop
 8006958:	e00e      	b.n	8006978 <USBH_Process+0x3cc>
      break;
 800695a:	bf00      	nop
 800695c:	e00c      	b.n	8006978 <USBH_Process+0x3cc>
      break;
 800695e:	bf00      	nop
 8006960:	e00a      	b.n	8006978 <USBH_Process+0x3cc>
    break;
 8006962:	bf00      	nop
 8006964:	e008      	b.n	8006978 <USBH_Process+0x3cc>
      break;
 8006966:	bf00      	nop
 8006968:	e006      	b.n	8006978 <USBH_Process+0x3cc>
      break;
 800696a:	bf00      	nop
 800696c:	e004      	b.n	8006978 <USBH_Process+0x3cc>
      break;
 800696e:	bf00      	nop
 8006970:	e002      	b.n	8006978 <USBH_Process+0x3cc>
      break;
 8006972:	bf00      	nop
 8006974:	e000      	b.n	8006978 <USBH_Process+0x3cc>
      break;
 8006976:	bf00      	nop
  }
  return USBH_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop

08006984 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af04      	add	r7, sp, #16
 800698a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006990:	2301      	movs	r3, #1
 8006992:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	785b      	ldrb	r3, [r3, #1]
 8006998:	2b07      	cmp	r3, #7
 800699a:	f200 81c1 	bhi.w	8006d20 <USBH_HandleEnum+0x39c>
 800699e:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <USBH_HandleEnum+0x20>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	080069c5 	.word	0x080069c5
 80069a8:	08006a83 	.word	0x08006a83
 80069ac:	08006aed 	.word	0x08006aed
 80069b0:	08006b7b 	.word	0x08006b7b
 80069b4:	08006be5 	.word	0x08006be5
 80069b8:	08006c55 	.word	0x08006c55
 80069bc:	08006c9b 	.word	0x08006c9b
 80069c0:	08006ce1 	.word	0x08006ce1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80069c4:	2108      	movs	r1, #8
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa50 	bl	8006e6c <USBH_Get_DevDesc>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d130      	bne.n	8006a38 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7919      	ldrb	r1, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80069fa:	b292      	uxth	r2, r2
 80069fc:	9202      	str	r2, [sp, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	9201      	str	r2, [sp, #4]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	4603      	mov	r3, r0
 8006a06:	2280      	movs	r2, #128	; 0x80
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 f865 	bl	8007ad8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7959      	ldrb	r1, [r3, #5]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a22:	b292      	uxth	r2, r2
 8006a24:	9202      	str	r2, [sp, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	9201      	str	r2, [sp, #4]
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2200      	movs	r2, #0
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 f851 	bl	8007ad8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a36:	e175      	b.n	8006d24 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	f040 8172 	bne.w	8006d24 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a46:	3301      	adds	r3, #1
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d903      	bls.n	8006a62 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	220d      	movs	r2, #13
 8006a5e:	701a      	strb	r2, [r3, #0]
      break;
 8006a60:	e160      	b.n	8006d24 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	795b      	ldrb	r3, [r3, #5]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f885 	bl	8007b78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	791b      	ldrb	r3, [r3, #4]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 f87f 	bl	8007b78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
      break;
 8006a80:	e150      	b.n	8006d24 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006a82:	2112      	movs	r1, #18
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f9f1 	bl	8006e6c <USBH_Get_DevDesc>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d103      	bne.n	8006a9c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006a9a:	e145      	b.n	8006d28 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	f040 8142 	bne.w	8006d28 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006aaa:	3301      	adds	r3, #1
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d903      	bls.n	8006ac6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	220d      	movs	r2, #13
 8006ac2:	701a      	strb	r2, [r3, #0]
      break;
 8006ac4:	e130      	b.n	8006d28 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	795b      	ldrb	r3, [r3, #5]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 f853 	bl	8007b78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	791b      	ldrb	r3, [r3, #4]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 f84d 	bl	8007b78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
      break;
 8006aea:	e11d      	b.n	8006d28 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006aec:	2101      	movs	r1, #1
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa68 	bl	8006fc4 <USBH_SetAddress>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d132      	bne.n	8006b64 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006afe:	2002      	movs	r0, #2
 8006b00:	f004 f97a 	bl	800adf8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2203      	movs	r2, #3
 8006b10:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	7919      	ldrb	r1, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b26:	b292      	uxth	r2, r2
 8006b28:	9202      	str	r2, [sp, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	9201      	str	r2, [sp, #4]
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	4603      	mov	r3, r0
 8006b32:	2280      	movs	r2, #128	; 0x80
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 ffcf 	bl	8007ad8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	7959      	ldrb	r1, [r3, #5]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b4e:	b292      	uxth	r2, r2
 8006b50:	9202      	str	r2, [sp, #8]
 8006b52:	2200      	movs	r2, #0
 8006b54:	9201      	str	r2, [sp, #4]
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 ffbb 	bl	8007ad8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b62:	e0e3      	b.n	8006d2c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	f040 80e0 	bne.w	8006d2c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	220d      	movs	r2, #13
 8006b70:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	705a      	strb	r2, [r3, #1]
      break;
 8006b78:	e0d8      	b.n	8006d2c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006b7a:	2109      	movs	r1, #9
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f99d 	bl	8006ebc <USBH_Get_CfgDesc>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b92:	e0cd      	b.n	8006d30 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	f040 80ca 	bne.w	8006d30 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d903      	bls.n	8006bbe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	220d      	movs	r2, #13
 8006bba:	701a      	strb	r2, [r3, #0]
      break;
 8006bbc:	e0b8      	b.n	8006d30 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	795b      	ldrb	r3, [r3, #5]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 ffd7 	bl	8007b78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	791b      	ldrb	r3, [r3, #4]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 ffd1 	bl	8007b78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	701a      	strb	r2, [r3, #0]
      break;
 8006be2:	e0a5      	b.n	8006d30 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f965 	bl	8006ebc <USBH_Get_CfgDesc>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2205      	movs	r2, #5
 8006c00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c02:	e097      	b.n	8006d34 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	f040 8094 	bne.w	8006d34 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c12:	3301      	adds	r3, #1
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d903      	bls.n	8006c2e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	220d      	movs	r2, #13
 8006c2a:	701a      	strb	r2, [r3, #0]
      break;
 8006c2c:	e082      	b.n	8006d34 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	795b      	ldrb	r3, [r3, #5]
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 ff9f 	bl	8007b78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	791b      	ldrb	r3, [r3, #4]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 ff99 	bl	8007b78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	701a      	strb	r2, [r3, #0]
      break;
 8006c52:	e06f      	b.n	8006d34 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d019      	beq.n	8006c92 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c6a:	23ff      	movs	r3, #255	; 0xff
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f949 	bl	8006f04 <USBH_Get_StringDesc>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d103      	bne.n	8006c84 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2206      	movs	r2, #6
 8006c80:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c82:	e059      	b.n	8006d38 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d156      	bne.n	8006d38 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2206      	movs	r2, #6
 8006c8e:	705a      	strb	r2, [r3, #1]
      break;
 8006c90:	e052      	b.n	8006d38 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2206      	movs	r2, #6
 8006c96:	705a      	strb	r2, [r3, #1]
      break;
 8006c98:	e04e      	b.n	8006d38 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d019      	beq.n	8006cd8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006cb0:	23ff      	movs	r3, #255	; 0xff
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f926 	bl	8006f04 <USBH_Get_StringDesc>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d103      	bne.n	8006cca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2207      	movs	r2, #7
 8006cc6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cc8:	e038      	b.n	8006d3c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d135      	bne.n	8006d3c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2207      	movs	r2, #7
 8006cd4:	705a      	strb	r2, [r3, #1]
      break;
 8006cd6:	e031      	b.n	8006d3c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2207      	movs	r2, #7
 8006cdc:	705a      	strb	r2, [r3, #1]
      break;
 8006cde:	e02d      	b.n	8006d3c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d017      	beq.n	8006d1a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006cf6:	23ff      	movs	r3, #255	; 0xff
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f903 	bl	8006f04 <USBH_Get_StringDesc>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006d0c:	e018      	b.n	8006d40 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d115      	bne.n	8006d40 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	73fb      	strb	r3, [r7, #15]
      break;
 8006d18:	e012      	b.n	8006d40 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1e:	e00f      	b.n	8006d40 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006d20:	bf00      	nop
 8006d22:	e00e      	b.n	8006d42 <USBH_HandleEnum+0x3be>
      break;
 8006d24:	bf00      	nop
 8006d26:	e00c      	b.n	8006d42 <USBH_HandleEnum+0x3be>
      break;
 8006d28:	bf00      	nop
 8006d2a:	e00a      	b.n	8006d42 <USBH_HandleEnum+0x3be>
      break;
 8006d2c:	bf00      	nop
 8006d2e:	e008      	b.n	8006d42 <USBH_HandleEnum+0x3be>
      break;
 8006d30:	bf00      	nop
 8006d32:	e006      	b.n	8006d42 <USBH_HandleEnum+0x3be>
      break;
 8006d34:	bf00      	nop
 8006d36:	e004      	b.n	8006d42 <USBH_HandleEnum+0x3be>
      break;
 8006d38:	bf00      	nop
 8006d3a:	e002      	b.n	8006d42 <USBH_HandleEnum+0x3be>
      break;
 8006d3c:	bf00      	nop
 8006d3e:	e000      	b.n	8006d42 <USBH_HandleEnum+0x3be>
      break;
 8006d40:	bf00      	nop
  }
  return Status;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f804 	bl	8006d8e <USBH_HandleSof>
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b0b      	cmp	r3, #11
 8006d9e:	d10a      	bne.n	8006db6 <USBH_HandleSof+0x28>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
  }
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006dce:	bf00      	nop
}
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006dea:	bf00      	nop
}
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f003 fe8e 	bl	800ab66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	791b      	ldrb	r3, [r3, #4]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fe91 	bl	8007b78 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	795b      	ldrb	r3, [r3, #5]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fe8b 	bl	8007b78 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f864 	bl	8006f5a <USBH_GetDescriptor>
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	b292      	uxth	r2, r2
 8006eac:	4619      	mov	r1, r3
 8006eae:	f000 f918 	bl	80070e2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	331c      	adds	r3, #28
 8006ecc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006ece:	887b      	ldrh	r3, [r7, #2]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed8:	2100      	movs	r1, #0
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f83d 	bl	8006f5a <USBH_GetDescriptor>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d107      	bne.n	8006efa <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006eea:	887b      	ldrh	r3, [r7, #2]
 8006eec:	461a      	mov	r2, r3
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f987 	bl	8007204 <USBH_ParseCfgDesc>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	460b      	mov	r3, r1
 8006f12:	72fb      	strb	r3, [r7, #11]
 8006f14:	4613      	mov	r3, r2
 8006f16:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f20:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006f28:	893b      	ldrh	r3, [r7, #8]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	2100      	movs	r1, #0
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f812 	bl	8006f5a <USBH_GetDescriptor>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d107      	bne.n	8006f50 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f46:	893a      	ldrh	r2, [r7, #8]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fb24 	bl	8007598 <USBH_ParseStringDesc>
  }

  return status;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	607b      	str	r3, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	72fb      	strb	r3, [r7, #11]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	789b      	ldrb	r3, [r3, #2]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d11c      	bne.n	8006fae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2206      	movs	r2, #6
 8006f84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	893a      	ldrh	r2, [r7, #8]
 8006f8a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006f8c:	893b      	ldrh	r3, [r7, #8]
 8006f8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f96:	d104      	bne.n	8006fa2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f240 4209 	movw	r2, #1033	; 0x409
 8006f9e:	829a      	strh	r2, [r3, #20]
 8006fa0:	e002      	b.n	8006fa8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8b3a      	ldrh	r2, [r7, #24]
 8006fac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006fae:	8b3b      	ldrh	r3, [r7, #24]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 fb3d 	bl	8007634 <USBH_CtlReq>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	789b      	ldrb	r3, [r3, #2]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d10f      	bne.n	8006ff8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2205      	movs	r2, #5
 8006fe2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fb19 	bl	8007634 <USBH_CtlReq>
 8007002:	4603      	mov	r3, r0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	789b      	ldrb	r3, [r3, #2]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d10e      	bne.n	800703e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2209      	movs	r2, #9
 800702a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	887a      	ldrh	r2, [r7, #2]
 8007030:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800703e:	2200      	movs	r2, #0
 8007040:	2100      	movs	r1, #0
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 faf6 	bl	8007634 <USBH_CtlReq>
 8007048:	4603      	mov	r3, r0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	789b      	ldrb	r3, [r3, #2]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d10f      	bne.n	8007086 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2203      	movs	r2, #3
 8007070:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fad2 	bl	8007634 <USBH_CtlReq>
 8007090:	4603      	mov	r3, r0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	789b      	ldrb	r3, [r3, #2]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d10f      	bne.n	80070ce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80070ce:	2200      	movs	r2, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 faae 	bl	8007634 <USBH_CtlReq>
 80070d8:	4603      	mov	r3, r0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	4613      	mov	r3, r2
 80070ee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	785a      	ldrb	r2, [r3, #1]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	3302      	adds	r3, #2
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b29a      	uxth	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	3303      	adds	r3, #3
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	b29b      	uxth	r3, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	791a      	ldrb	r2, [r3, #4]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	795a      	ldrb	r2, [r3, #5]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	799a      	ldrb	r2, [r3, #6]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	79da      	ldrb	r2, [r3, #7]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	79db      	ldrb	r3, [r3, #7]
 8007140:	2b20      	cmp	r3, #32
 8007142:	dc11      	bgt.n	8007168 <USBH_ParseDevDesc+0x86>
 8007144:	2b08      	cmp	r3, #8
 8007146:	db16      	blt.n	8007176 <USBH_ParseDevDesc+0x94>
 8007148:	3b08      	subs	r3, #8
 800714a:	2201      	movs	r2, #1
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d102      	bne.n	800716c <USBH_ParseDevDesc+0x8a>
 8007166:	e006      	b.n	8007176 <USBH_ParseDevDesc+0x94>
 8007168:	2b40      	cmp	r3, #64	; 0x40
 800716a:	d104      	bne.n	8007176 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	79da      	ldrb	r2, [r3, #7]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	71da      	strb	r2, [r3, #7]
      break;
 8007174:	e003      	b.n	800717e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2240      	movs	r2, #64	; 0x40
 800717a:	71da      	strb	r2, [r3, #7]
      break;
 800717c:	bf00      	nop
  }

  if (length > 8U)
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	2b08      	cmp	r3, #8
 8007182:	d939      	bls.n	80071f8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3308      	adds	r3, #8
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	b29a      	uxth	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	3309      	adds	r3, #9
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	b29b      	uxth	r3, r3
 8007198:	4313      	orrs	r3, r2
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	330a      	adds	r3, #10
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	330b      	adds	r3, #11
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	4313      	orrs	r3, r2
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	330c      	adds	r3, #12
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	330d      	adds	r3, #13
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4313      	orrs	r3, r2
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	7b9a      	ldrb	r2, [r3, #14]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	7bda      	ldrb	r2, [r3, #15]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	7c1a      	ldrb	r2, [r3, #16]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	7c5a      	ldrb	r2, [r3, #17]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	745a      	strb	r2, [r3, #17]
  }
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08c      	sub	sp, #48	; 0x30
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007218:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	781a      	ldrb	r2, [r3, #0]
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	785a      	ldrb	r2, [r3, #1]
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	3302      	adds	r3, #2
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	b29a      	uxth	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	3303      	adds	r3, #3
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	b29b      	uxth	r3, r3
 8007258:	4313      	orrs	r3, r2
 800725a:	b29b      	uxth	r3, r3
 800725c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007260:	bf28      	it	cs
 8007262:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007266:	b29a      	uxth	r2, r3
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	791a      	ldrb	r2, [r3, #4]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	795a      	ldrb	r2, [r3, #5]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	799a      	ldrb	r2, [r3, #6]
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	79da      	ldrb	r2, [r3, #7]
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	7a1a      	ldrb	r2, [r3, #8]
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b09      	cmp	r3, #9
 800729a:	d002      	beq.n	80072a2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	2209      	movs	r2, #9
 80072a0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	f240 809d 	bls.w	80073e4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80072aa:	2309      	movs	r3, #9
 80072ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80072b2:	e081      	b.n	80073b8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80072b4:	f107 0316 	add.w	r3, r7, #22
 80072b8:	4619      	mov	r1, r3
 80072ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072bc:	f000 f99f 	bl	80075fe <USBH_GetNextDesc>
 80072c0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d176      	bne.n	80073b8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b09      	cmp	r3, #9
 80072d0:	d002      	beq.n	80072d8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	2209      	movs	r2, #9
 80072d6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80072d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072dc:	221a      	movs	r2, #26
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	3308      	adds	r3, #8
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	4413      	add	r3, r2
 80072e8:	3302      	adds	r3, #2
 80072ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80072ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072ee:	69f8      	ldr	r0, [r7, #28]
 80072f0:	f000 f87e 	bl	80073f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80072fe:	e043      	b.n	8007388 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007300:	f107 0316 	add.w	r3, r7, #22
 8007304:	4619      	mov	r1, r3
 8007306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007308:	f000 f979 	bl	80075fe <USBH_GetNextDesc>
 800730c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	2b05      	cmp	r3, #5
 8007314:	d138      	bne.n	8007388 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	795b      	ldrb	r3, [r3, #5]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d10f      	bne.n	800733e <USBH_ParseCfgDesc+0x13a>
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	799b      	ldrb	r3, [r3, #6]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d10b      	bne.n	800733e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	79db      	ldrb	r3, [r3, #7]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10f      	bne.n	800734e <USBH_ParseCfgDesc+0x14a>
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b09      	cmp	r3, #9
 8007334:	d00b      	beq.n	800734e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	2209      	movs	r2, #9
 800733a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800733c:	e007      	b.n	800734e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b07      	cmp	r3, #7
 8007344:	d004      	beq.n	8007350 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	2207      	movs	r2, #7
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	e000      	b.n	8007350 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800734e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007354:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007358:	3201      	adds	r2, #1
 800735a:	00d2      	lsls	r2, r2, #3
 800735c:	211a      	movs	r1, #26
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	3308      	adds	r3, #8
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	4413      	add	r3, r2
 800736a:	3304      	adds	r3, #4
 800736c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800736e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007370:	69b9      	ldr	r1, [r7, #24]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f86b 	bl	800744e <USBH_ParseEPDesc>
 8007378:	4603      	mov	r3, r0
 800737a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800737e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007382:	3301      	adds	r3, #1
 8007384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	791b      	ldrb	r3, [r3, #4]
 800738c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007390:	429a      	cmp	r2, r3
 8007392:	d204      	bcs.n	800739e <USBH_ParseCfgDesc+0x19a>
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	885a      	ldrh	r2, [r3, #2]
 8007398:	8afb      	ldrh	r3, [r7, #22]
 800739a:	429a      	cmp	r2, r3
 800739c:	d8b0      	bhi.n	8007300 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	791b      	ldrb	r3, [r3, #4]
 80073a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d201      	bcs.n	80073ae <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e01c      	b.n	80073e8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80073ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073b2:	3301      	adds	r3, #1
 80073b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80073b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d805      	bhi.n	80073cc <USBH_ParseCfgDesc+0x1c8>
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	885a      	ldrh	r2, [r3, #2]
 80073c4:	8afb      	ldrh	r3, [r7, #22]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	f63f af74 	bhi.w	80072b4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	791b      	ldrb	r3, [r3, #4]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	bf28      	it	cs
 80073d4:	2302      	movcs	r3, #2
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80073dc:	429a      	cmp	r2, r3
 80073de:	d201      	bcs.n	80073e4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e001      	b.n	80073e8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80073e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3730      	adds	r7, #48	; 0x30
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781a      	ldrb	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	785a      	ldrb	r2, [r3, #1]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	789a      	ldrb	r2, [r3, #2]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	78da      	ldrb	r2, [r3, #3]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	791a      	ldrb	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	795a      	ldrb	r2, [r3, #5]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	799a      	ldrb	r2, [r3, #6]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	79da      	ldrb	r2, [r3, #7]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	7a1a      	ldrb	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	721a      	strb	r2, [r3, #8]
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800744e:	b480      	push	{r7}
 8007450:	b087      	sub	sp, #28
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	781a      	ldrb	r2, [r3, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	785a      	ldrb	r2, [r3, #1]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	789a      	ldrb	r2, [r3, #2]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	78da      	ldrb	r2, [r3, #3]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3304      	adds	r3, #4
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	b29a      	uxth	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3305      	adds	r3, #5
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	b29b      	uxth	r3, r3
 8007492:	4313      	orrs	r3, r2
 8007494:	b29a      	uxth	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	799a      	ldrb	r2, [r3, #6]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	889b      	ldrh	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d102      	bne.n	80074b0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80074aa:	2303      	movs	r3, #3
 80074ac:	75fb      	strb	r3, [r7, #23]
 80074ae:	e033      	b.n	8007518 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	889b      	ldrh	r3, [r3, #4]
 80074b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80074b8:	f023 0307 	bic.w	r3, r3, #7
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	889b      	ldrh	r3, [r3, #4]
 80074c6:	b21a      	sxth	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b299      	uxth	r1, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3305      	adds	r3, #5
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	b29b      	uxth	r3, r3
 80074dc:	430b      	orrs	r3, r1
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d110      	bne.n	800750a <USBH_ParseEPDesc+0xbc>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	b299      	uxth	r1, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3305      	adds	r3, #5
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	430b      	orrs	r3, r1
 80074fe:	b29b      	uxth	r3, r3
 8007500:	b21b      	sxth	r3, r3
 8007502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007506:	b21b      	sxth	r3, r3
 8007508:	e001      	b.n	800750e <USBH_ParseEPDesc+0xc0>
 800750a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800750e:	4313      	orrs	r3, r2
 8007510:	b21b      	sxth	r3, r3
 8007512:	b29a      	uxth	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800751e:	2b00      	cmp	r3, #0
 8007520:	d116      	bne.n	8007550 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	78db      	ldrb	r3, [r3, #3]
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d005      	beq.n	800753a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	78db      	ldrb	r3, [r3, #3]
 8007532:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007536:	2b03      	cmp	r3, #3
 8007538:	d127      	bne.n	800758a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	799b      	ldrb	r3, [r3, #6]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <USBH_ParseEPDesc+0xfc>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	799b      	ldrb	r3, [r3, #6]
 8007546:	2b10      	cmp	r3, #16
 8007548:	d91f      	bls.n	800758a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800754a:	2303      	movs	r3, #3
 800754c:	75fb      	strb	r3, [r7, #23]
 800754e:	e01c      	b.n	800758a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	78db      	ldrb	r3, [r3, #3]
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	2b01      	cmp	r3, #1
 800755a:	d10a      	bne.n	8007572 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	799b      	ldrb	r3, [r3, #6]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <USBH_ParseEPDesc+0x11e>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	799b      	ldrb	r3, [r3, #6]
 8007568:	2b10      	cmp	r3, #16
 800756a:	d90e      	bls.n	800758a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800756c:	2303      	movs	r3, #3
 800756e:	75fb      	strb	r3, [r7, #23]
 8007570:	e00b      	b.n	800758a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	78db      	ldrb	r3, [r3, #3]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b03      	cmp	r3, #3
 800757c:	d105      	bne.n	800758a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	799b      	ldrb	r3, [r3, #6]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007586:	2303      	movs	r3, #3
 8007588:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4613      	mov	r3, r2
 80075a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3301      	adds	r3, #1
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d120      	bne.n	80075f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	1e9a      	subs	r2, r3, #2
 80075b6:	88fb      	ldrh	r3, [r7, #6]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	bf28      	it	cs
 80075bc:	4613      	movcs	r3, r2
 80075be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3302      	adds	r3, #2
 80075c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80075c6:	2300      	movs	r3, #0
 80075c8:	82fb      	strh	r3, [r7, #22]
 80075ca:	e00b      	b.n	80075e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80075cc:	8afb      	ldrh	r3, [r7, #22]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	781a      	ldrb	r2, [r3, #0]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	3301      	adds	r3, #1
 80075dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80075de:	8afb      	ldrh	r3, [r7, #22]
 80075e0:	3302      	adds	r3, #2
 80075e2:	82fb      	strh	r3, [r7, #22]
 80075e4:	8afa      	ldrh	r2, [r7, #22]
 80075e6:	8abb      	ldrh	r3, [r7, #20]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d3ef      	bcc.n	80075cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
  }
}
 80075f2:	bf00      	nop
 80075f4:	371c      	adds	r7, #28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	881a      	ldrh	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b29b      	uxth	r3, r3
 8007612:	4413      	add	r3, r2
 8007614:	b29a      	uxth	r2, r3
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007626:	68fb      	ldr	r3, [r7, #12]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007642:	2301      	movs	r3, #1
 8007644:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	789b      	ldrb	r3, [r3, #2]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d002      	beq.n	8007654 <USBH_CtlReq+0x20>
 800764e:	2b02      	cmp	r3, #2
 8007650:	d00f      	beq.n	8007672 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007652:	e027      	b.n	80076a4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2202      	movs	r2, #2
 800766a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800766c:	2301      	movs	r3, #1
 800766e:	75fb      	strb	r3, [r7, #23]
      break;
 8007670:	e018      	b.n	80076a4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 f81c 	bl	80076b0 <USBH_HandleControl>
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <USBH_CtlReq+0x54>
 8007682:	7dfb      	ldrb	r3, [r7, #23]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d106      	bne.n	8007696 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	761a      	strb	r2, [r3, #24]
      break;
 8007694:	e005      	b.n	80076a2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d102      	bne.n	80076a2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	709a      	strb	r2, [r3, #2]
      break;
 80076a2:	bf00      	nop
  }
  return status;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076bc:	2300      	movs	r3, #0
 80076be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7e1b      	ldrb	r3, [r3, #24]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	2b0a      	cmp	r3, #10
 80076c8:	f200 8156 	bhi.w	8007978 <USBH_HandleControl+0x2c8>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <USBH_HandleControl+0x24>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	08007701 	.word	0x08007701
 80076d8:	0800771b 	.word	0x0800771b
 80076dc:	08007785 	.word	0x08007785
 80076e0:	080077ab 	.word	0x080077ab
 80076e4:	080077e3 	.word	0x080077e3
 80076e8:	0800780d 	.word	0x0800780d
 80076ec:	0800785f 	.word	0x0800785f
 80076f0:	08007881 	.word	0x08007881
 80076f4:	080078bd 	.word	0x080078bd
 80076f8:	080078e3 	.word	0x080078e3
 80076fc:	08007921 	.word	0x08007921
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f103 0110 	add.w	r1, r3, #16
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	795b      	ldrb	r3, [r3, #5]
 800770a:	461a      	mov	r2, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f943 	bl	8007998 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	761a      	strb	r2, [r3, #24]
      break;
 8007718:	e139      	b.n	800798e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	795b      	ldrb	r3, [r3, #5]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f003 fb0f 	bl	800ad44 <USBH_LL_GetURBState>
 8007726:	4603      	mov	r3, r0
 8007728:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d11e      	bne.n	800776e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	7c1b      	ldrb	r3, [r3, #16]
 8007734:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007738:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	8adb      	ldrh	r3, [r3, #22]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007742:	7b7b      	ldrb	r3, [r7, #13]
 8007744:	2b80      	cmp	r3, #128	; 0x80
 8007746:	d103      	bne.n	8007750 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2203      	movs	r2, #3
 800774c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800774e:	e115      	b.n	800797c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2205      	movs	r2, #5
 8007754:	761a      	strb	r2, [r3, #24]
      break;
 8007756:	e111      	b.n	800797c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007758:	7b7b      	ldrb	r3, [r7, #13]
 800775a:	2b80      	cmp	r3, #128	; 0x80
 800775c:	d103      	bne.n	8007766 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2209      	movs	r2, #9
 8007762:	761a      	strb	r2, [r3, #24]
      break;
 8007764:	e10a      	b.n	800797c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2207      	movs	r2, #7
 800776a:	761a      	strb	r2, [r3, #24]
      break;
 800776c:	e106      	b.n	800797c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	2b04      	cmp	r3, #4
 8007772:	d003      	beq.n	800777c <USBH_HandleControl+0xcc>
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b02      	cmp	r3, #2
 8007778:	f040 8100 	bne.w	800797c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	220b      	movs	r2, #11
 8007780:	761a      	strb	r2, [r3, #24]
      break;
 8007782:	e0fb      	b.n	800797c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6899      	ldr	r1, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	899a      	ldrh	r2, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	791b      	ldrb	r3, [r3, #4]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f93a 	bl	8007a16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2204      	movs	r2, #4
 80077a6:	761a      	strb	r2, [r3, #24]
      break;
 80077a8:	e0f1      	b.n	800798e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	791b      	ldrb	r3, [r3, #4]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f003 fac7 	bl	800ad44 <USBH_LL_GetURBState>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d102      	bne.n	80077c6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2209      	movs	r2, #9
 80077c4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b05      	cmp	r3, #5
 80077ca:	d102      	bne.n	80077d2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80077cc:	2303      	movs	r3, #3
 80077ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077d0:	e0d6      	b.n	8007980 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	f040 80d3 	bne.w	8007980 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	220b      	movs	r2, #11
 80077de:	761a      	strb	r2, [r3, #24]
      break;
 80077e0:	e0ce      	b.n	8007980 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6899      	ldr	r1, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	899a      	ldrh	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	795b      	ldrb	r3, [r3, #5]
 80077ee:	2001      	movs	r0, #1
 80077f0:	9000      	str	r0, [sp, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8ea 	bl	80079cc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2206      	movs	r2, #6
 8007808:	761a      	strb	r2, [r3, #24]
      break;
 800780a:	e0c0      	b.n	800798e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	795b      	ldrb	r3, [r3, #5]
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f003 fa96 	bl	800ad44 <USBH_LL_GetURBState>
 8007818:	4603      	mov	r3, r0
 800781a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d103      	bne.n	800782a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2207      	movs	r2, #7
 8007826:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007828:	e0ac      	b.n	8007984 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	2b05      	cmp	r3, #5
 800782e:	d105      	bne.n	800783c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	220c      	movs	r2, #12
 8007834:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007836:	2303      	movs	r3, #3
 8007838:	73fb      	strb	r3, [r7, #15]
      break;
 800783a:	e0a3      	b.n	8007984 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d103      	bne.n	800784a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2205      	movs	r2, #5
 8007846:	761a      	strb	r2, [r3, #24]
      break;
 8007848:	e09c      	b.n	8007984 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b04      	cmp	r3, #4
 800784e:	f040 8099 	bne.w	8007984 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	220b      	movs	r2, #11
 8007856:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007858:	2302      	movs	r3, #2
 800785a:	73fb      	strb	r3, [r7, #15]
      break;
 800785c:	e092      	b.n	8007984 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	791b      	ldrb	r3, [r3, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	2100      	movs	r1, #0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f8d5 	bl	8007a16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007872:	b29a      	uxth	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2208      	movs	r2, #8
 800787c:	761a      	strb	r2, [r3, #24]

      break;
 800787e:	e086      	b.n	800798e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	791b      	ldrb	r3, [r3, #4]
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f003 fa5c 	bl	800ad44 <USBH_LL_GetURBState>
 800788c:	4603      	mov	r3, r0
 800788e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d105      	bne.n	80078a2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	220d      	movs	r2, #13
 800789a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078a0:	e072      	b.n	8007988 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d103      	bne.n	80078b0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	220b      	movs	r2, #11
 80078ac:	761a      	strb	r2, [r3, #24]
      break;
 80078ae:	e06b      	b.n	8007988 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d168      	bne.n	8007988 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80078b6:	2303      	movs	r3, #3
 80078b8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ba:	e065      	b.n	8007988 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	795b      	ldrb	r3, [r3, #5]
 80078c0:	2201      	movs	r2, #1
 80078c2:	9200      	str	r2, [sp, #0]
 80078c4:	2200      	movs	r2, #0
 80078c6:	2100      	movs	r1, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f87f 	bl	80079cc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	220a      	movs	r2, #10
 80078de:	761a      	strb	r2, [r3, #24]
      break;
 80078e0:	e055      	b.n	800798e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	795b      	ldrb	r3, [r3, #5]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f003 fa2b 	bl	800ad44 <USBH_LL_GetURBState>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d105      	bne.n	8007904 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	220d      	movs	r2, #13
 8007900:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007902:	e043      	b.n	800798c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d103      	bne.n	8007912 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2209      	movs	r2, #9
 800790e:	761a      	strb	r2, [r3, #24]
      break;
 8007910:	e03c      	b.n	800798c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b04      	cmp	r3, #4
 8007916:	d139      	bne.n	800798c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	220b      	movs	r2, #11
 800791c:	761a      	strb	r2, [r3, #24]
      break;
 800791e:	e035      	b.n	800798c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7e5b      	ldrb	r3, [r3, #25]
 8007924:	3301      	adds	r3, #1
 8007926:	b2da      	uxtb	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	765a      	strb	r2, [r3, #25]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	7e5b      	ldrb	r3, [r3, #25]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d806      	bhi.n	8007942 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007940:	e025      	b.n	800798e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007948:	2106      	movs	r1, #6
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	795b      	ldrb	r3, [r3, #5]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f90c 	bl	8007b78 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	791b      	ldrb	r3, [r3, #4]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f906 	bl	8007b78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007972:	2302      	movs	r3, #2
 8007974:	73fb      	strb	r3, [r7, #15]
      break;
 8007976:	e00a      	b.n	800798e <USBH_HandleControl+0x2de>

    default:
      break;
 8007978:	bf00      	nop
 800797a:	e008      	b.n	800798e <USBH_HandleControl+0x2de>
      break;
 800797c:	bf00      	nop
 800797e:	e006      	b.n	800798e <USBH_HandleControl+0x2de>
      break;
 8007980:	bf00      	nop
 8007982:	e004      	b.n	800798e <USBH_HandleControl+0x2de>
      break;
 8007984:	bf00      	nop
 8007986:	e002      	b.n	800798e <USBH_HandleControl+0x2de>
      break;
 8007988:	bf00      	nop
 800798a:	e000      	b.n	800798e <USBH_HandleControl+0x2de>
      break;
 800798c:	bf00      	nop
  }

  return status;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af04      	add	r7, sp, #16
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079a6:	79f9      	ldrb	r1, [r7, #7]
 80079a8:	2300      	movs	r3, #0
 80079aa:	9303      	str	r3, [sp, #12]
 80079ac:	2308      	movs	r3, #8
 80079ae:	9302      	str	r3, [sp, #8]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	2300      	movs	r3, #0
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	2300      	movs	r3, #0
 80079ba:	2200      	movs	r2, #0
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f003 f990 	bl	800ace2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af04      	add	r7, sp, #16
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4611      	mov	r1, r2
 80079d8:	461a      	mov	r2, r3
 80079da:	460b      	mov	r3, r1
 80079dc:	80fb      	strh	r3, [r7, #6]
 80079de:	4613      	mov	r3, r2
 80079e0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079f0:	7979      	ldrb	r1, [r7, #5]
 80079f2:	7e3b      	ldrb	r3, [r7, #24]
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	88fb      	ldrh	r3, [r7, #6]
 80079f8:	9302      	str	r3, [sp, #8]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	2301      	movs	r3, #1
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	2300      	movs	r3, #0
 8007a04:	2200      	movs	r2, #0
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f003 f96b 	bl	800ace2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b088      	sub	sp, #32
 8007a1a:	af04      	add	r7, sp, #16
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	4611      	mov	r1, r2
 8007a22:	461a      	mov	r2, r3
 8007a24:	460b      	mov	r3, r1
 8007a26:	80fb      	strh	r3, [r7, #6]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a2c:	7979      	ldrb	r1, [r7, #5]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9303      	str	r3, [sp, #12]
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	9302      	str	r3, [sp, #8]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2201      	movs	r2, #1
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f003 f94d 	bl	800ace2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a48:	2300      	movs	r3, #0

}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b088      	sub	sp, #32
 8007a56:	af04      	add	r7, sp, #16
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	461a      	mov	r2, r3
 8007a60:	460b      	mov	r3, r1
 8007a62:	80fb      	strh	r3, [r7, #6]
 8007a64:	4613      	mov	r3, r2
 8007a66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a76:	7979      	ldrb	r1, [r7, #5]
 8007a78:	7e3b      	ldrb	r3, [r7, #24]
 8007a7a:	9303      	str	r3, [sp, #12]
 8007a7c:	88fb      	ldrh	r3, [r7, #6]
 8007a7e:	9302      	str	r3, [sp, #8]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	2301      	movs	r3, #1
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	2302      	movs	r3, #2
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f003 f928 	bl	800ace2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af04      	add	r7, sp, #16
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	460b      	mov	r3, r1
 8007aac:	80fb      	strh	r3, [r7, #6]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ab2:	7979      	ldrb	r1, [r7, #5]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	88fb      	ldrh	r3, [r7, #6]
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f003 f90a 	bl	800ace2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af04      	add	r7, sp, #16
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	70fb      	strb	r3, [r7, #3]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70bb      	strb	r3, [r7, #2]
 8007aee:	4613      	mov	r3, r2
 8007af0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007af2:	7878      	ldrb	r0, [r7, #1]
 8007af4:	78ba      	ldrb	r2, [r7, #2]
 8007af6:	78f9      	ldrb	r1, [r7, #3]
 8007af8:	8b3b      	ldrh	r3, [r7, #24]
 8007afa:	9302      	str	r3, [sp, #8]
 8007afc:	7d3b      	ldrb	r3, [r7, #20]
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	7c3b      	ldrb	r3, [r7, #16]
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	4603      	mov	r3, r0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f003 f89d 	bl	800ac46 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f003 f8bc 	bl	800aca4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f836 	bl	8007bb4 <USBH_GetFreePipe>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b4c:	89fb      	ldrh	r3, [r7, #14]
 8007b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00a      	beq.n	8007b6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	89fb      	ldrh	r3, [r7, #14]
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	33e0      	adds	r3, #224	; 0xe0
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	440b      	add	r3, r1
 8007b6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007b6c:	89fb      	ldrh	r3, [r7, #14]
 8007b6e:	b2db      	uxtb	r3, r3
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d80d      	bhi.n	8007ba6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	33e0      	adds	r3, #224	; 0xe0
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	78fb      	ldrb	r3, [r7, #3]
 8007b98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	33e0      	adds	r3, #224	; 0xe0
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]
 8007bc4:	e00f      	b.n	8007be6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	33e0      	adds	r3, #224	; 0xe0
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d102      	bne.n	8007be0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	e007      	b.n	8007bf0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	3301      	adds	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	2b0f      	cmp	r3, #15
 8007bea:	d9ec      	bls.n	8007bc6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f103 0208 	add.w	r2, r3, #8
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c14:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f103 0208 	add.w	r2, r3, #8
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f103 0208 	add.w	r2, r3, #8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c4a:	bf00      	nop
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6892      	ldr	r2, [r2, #8]
 8007cb4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6852      	ldr	r2, [r2, #4]
 8007cbe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d103      	bne.n	8007cd2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	1e5a      	subs	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b08c      	sub	sp, #48	; 0x30
 8007cf6:	af04      	add	r7, sp, #16
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	603b      	str	r3, [r7, #0]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d02:	88fb      	ldrh	r3, [r7, #6]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fee0 	bl	8008acc <pvPortMalloc>
 8007d0c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00e      	beq.n	8007d32 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d14:	2058      	movs	r0, #88	; 0x58
 8007d16:	f000 fed9 	bl	8008acc <pvPortMalloc>
 8007d1a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
 8007d28:	e005      	b.n	8007d36 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007d2a:	6978      	ldr	r0, [r7, #20]
 8007d2c:	f000 ffae 	bl	8008c8c <vPortFree>
 8007d30:	e001      	b.n	8007d36 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d013      	beq.n	8007d64 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	9302      	str	r3, [sp, #8]
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 f80e 	bl	8007d74 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007d58:	69f8      	ldr	r0, [r7, #28]
 8007d5a:	f000 f8a1 	bl	8007ea0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	61bb      	str	r3, [r7, #24]
 8007d62:	e002      	b.n	8007d6a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d68:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
    }
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3720      	adds	r7, #32
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	21a5      	movs	r1, #165	; 0xa5
 8007d8e:	f003 f8d9 	bl	800af44 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	f023 0307 	bic.w	r3, r3, #7
 8007daa:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <prvInitialiseNewTask+0x58>
        __asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	617b      	str	r3, [r7, #20]
    }
 8007dc8:	bf00      	nop
 8007dca:	e7fe      	b.n	8007dca <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d01f      	beq.n	8007e12 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61fb      	str	r3, [r7, #28]
 8007dd6:	e012      	b.n	8007dfe <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4413      	add	r3, r2
 8007dde:	7819      	ldrb	r1, [r3, #0]
 8007de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	4413      	add	r3, r2
 8007de6:	3334      	adds	r3, #52	; 0x34
 8007de8:	460a      	mov	r2, r1
 8007dea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	4413      	add	r3, r2
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d006      	beq.n	8007e06 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d9e9      	bls.n	8007dd8 <prvInitialiseNewTask+0x64>
 8007e04:	e000      	b.n	8007e08 <prvInitialiseNewTask+0x94>
            {
                break;
 8007e06:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e10:	e003      	b.n	8007e1a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d901      	bls.n	8007e24 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e20:	2304      	movs	r3, #4
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e28:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e2e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	2200      	movs	r2, #0
 8007e34:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	3304      	adds	r3, #4
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff fefe 	bl	8007c3c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	3318      	adds	r3, #24
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff fef9 	bl	8007c3c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	f1c3 0205 	rsb	r2, r3, #5
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	3350      	adds	r3, #80	; 0x50
 8007e64:	2204      	movs	r2, #4
 8007e66:	2100      	movs	r1, #0
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f003 f86b 	bl	800af44 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	3354      	adds	r3, #84	; 0x54
 8007e72:	2201      	movs	r2, #1
 8007e74:	2100      	movs	r1, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f003 f864 	bl	800af44 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	68f9      	ldr	r1, [r7, #12]
 8007e80:	69b8      	ldr	r0, [r7, #24]
 8007e82:	f000 fb49 	bl	8008518 <pxPortInitialiseStack>
 8007e86:	4602      	mov	r2, r0
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e96:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007e98:	bf00      	nop
 8007e9a:	3720      	adds	r7, #32
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007ea0:	b5b0      	push	{r4, r5, r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007ea8:	f000 fce4 	bl	8008874 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007eac:	4b35      	ldr	r3, [pc, #212]	; (8007f84 <prvAddNewTaskToReadyList+0xe4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	4a34      	ldr	r2, [pc, #208]	; (8007f84 <prvAddNewTaskToReadyList+0xe4>)
 8007eb4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007eb6:	4b34      	ldr	r3, [pc, #208]	; (8007f88 <prvAddNewTaskToReadyList+0xe8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d109      	bne.n	8007ed2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007ebe:	4a32      	ldr	r2, [pc, #200]	; (8007f88 <prvAddNewTaskToReadyList+0xe8>)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ec4:	4b2f      	ldr	r3, [pc, #188]	; (8007f84 <prvAddNewTaskToReadyList+0xe4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d110      	bne.n	8007eee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007ecc:	f000 fa8a 	bl	80083e4 <prvInitialiseTaskLists>
 8007ed0:	e00d      	b.n	8007eee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007ed2:	4b2e      	ldr	r3, [pc, #184]	; (8007f8c <prvAddNewTaskToReadyList+0xec>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007eda:	4b2b      	ldr	r3, [pc, #172]	; (8007f88 <prvAddNewTaskToReadyList+0xe8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d802      	bhi.n	8007eee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007ee8:	4a27      	ldr	r2, [pc, #156]	; (8007f88 <prvAddNewTaskToReadyList+0xe8>)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007eee:	4b28      	ldr	r3, [pc, #160]	; (8007f90 <prvAddNewTaskToReadyList+0xf0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	4a26      	ldr	r2, [pc, #152]	; (8007f90 <prvAddNewTaskToReadyList+0xf0>)
 8007ef6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ef8:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <prvAddNewTaskToReadyList+0xf0>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d016      	beq.n	8007f34 <prvAddNewTaskToReadyList+0x94>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f002 fab1 	bl	800a470 <SEGGER_SYSVIEW_OnTaskCreate>
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	461d      	mov	r5, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461c      	mov	r4, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2a:	1ae3      	subs	r3, r4, r3
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	462b      	mov	r3, r5
 8007f30:	f001 f87a 	bl	8009028 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f002 fb1e 	bl	800a578 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	2201      	movs	r2, #1
 8007f42:	409a      	lsls	r2, r3
 8007f44:	4b13      	ldr	r3, [pc, #76]	; (8007f94 <prvAddNewTaskToReadyList+0xf4>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	4a12      	ldr	r2, [pc, #72]	; (8007f94 <prvAddNewTaskToReadyList+0xf4>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a0f      	ldr	r2, [pc, #60]	; (8007f98 <prvAddNewTaskToReadyList+0xf8>)
 8007f5c:	441a      	add	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7ff fe76 	bl	8007c56 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007f6a:	f000 fcb3 	bl	80088d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <prvAddNewTaskToReadyList+0xec>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f76:	4b04      	ldr	r3, [pc, #16]	; (8007f88 <prvAddNewTaskToReadyList+0xe8>)
 8007f78:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bdb0      	pop	{r4, r5, r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000314 	.word	0x20000314
 8007f88:	2000023c 	.word	0x2000023c
 8007f8c:	20000320 	.word	0x20000320
 8007f90:	20000330 	.word	0x20000330
 8007f94:	2000031c 	.word	0x2000031c
 8007f98:	20000240 	.word	0x20000240

08007f9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8007fa2:	4b24      	ldr	r3, [pc, #144]	; (8008034 <vTaskStartScheduler+0x98>)
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	2300      	movs	r3, #0
 8007fac:	2282      	movs	r2, #130	; 0x82
 8007fae:	4922      	ldr	r1, [pc, #136]	; (8008038 <vTaskStartScheduler+0x9c>)
 8007fb0:	4822      	ldr	r0, [pc, #136]	; (800803c <vTaskStartScheduler+0xa0>)
 8007fb2:	f7ff fe9e 	bl	8007cf2 <xTaskCreate>
 8007fb6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d124      	bne.n	8008008 <vTaskStartScheduler+0x6c>
        __asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60bb      	str	r3, [r7, #8]
    }
 8007fd0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8007fd2:	4b1b      	ldr	r3, [pc, #108]	; (8008040 <vTaskStartScheduler+0xa4>)
 8007fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fd8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007fda:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <vTaskStartScheduler+0xa8>)
 8007fdc:	2201      	movs	r2, #1
 8007fde:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fe0:	4b19      	ldr	r3, [pc, #100]	; (8008048 <vTaskStartScheduler+0xac>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8007fe6:	4b19      	ldr	r3, [pc, #100]	; (800804c <vTaskStartScheduler+0xb0>)
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <vTaskStartScheduler+0x98>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d102      	bne.n	8007ff8 <vTaskStartScheduler+0x5c>
 8007ff2:	f002 fa21 	bl	800a438 <SEGGER_SYSVIEW_OnIdle>
 8007ff6:	e004      	b.n	8008002 <vTaskStartScheduler+0x66>
 8007ff8:	4b14      	ldr	r3, [pc, #80]	; (800804c <vTaskStartScheduler+0xb0>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f002 fa79 	bl	800a4f4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8008002:	f000 fb17 	bl	8008634 <xPortStartScheduler>
 8008006:	e00e      	b.n	8008026 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800800e:	d10a      	bne.n	8008026 <vTaskStartScheduler+0x8a>
        __asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	607b      	str	r3, [r7, #4]
    }
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8008026:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <vTaskStartScheduler+0xb4>)
 8008028:	681b      	ldr	r3, [r3, #0]
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000338 	.word	0x20000338
 8008038:	0800b984 	.word	0x0800b984
 800803c:	080083c1 	.word	0x080083c1
 8008040:	20000334 	.word	0x20000334
 8008044:	20000320 	.word	0x20000320
 8008048:	20000318 	.word	0x20000318
 800804c:	2000023c 	.word	0x2000023c
 8008050:	2000002c 	.word	0x2000002c

08008054 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008058:	4b04      	ldr	r3, [pc, #16]	; (800806c <vTaskSuspendAll+0x18>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	4a03      	ldr	r2, [pc, #12]	; (800806c <vTaskSuspendAll+0x18>)
 8008060:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8008062:	bf00      	nop
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	2000033c 	.word	0x2000033c

08008070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800807e:	4b3d      	ldr	r3, [pc, #244]	; (8008174 <xTaskResumeAll+0x104>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10a      	bne.n	800809c <xTaskResumeAll+0x2c>
        __asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	603b      	str	r3, [r7, #0]
    }
 8008098:	bf00      	nop
 800809a:	e7fe      	b.n	800809a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800809c:	f000 fbea 	bl	8008874 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80080a0:	4b34      	ldr	r3, [pc, #208]	; (8008174 <xTaskResumeAll+0x104>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	4a33      	ldr	r2, [pc, #204]	; (8008174 <xTaskResumeAll+0x104>)
 80080a8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080aa:	4b32      	ldr	r3, [pc, #200]	; (8008174 <xTaskResumeAll+0x104>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d159      	bne.n	8008166 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080b2:	4b31      	ldr	r3, [pc, #196]	; (8008178 <xTaskResumeAll+0x108>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d055      	beq.n	8008166 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080ba:	e032      	b.n	8008122 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080bc:	4b2f      	ldr	r3, [pc, #188]	; (800817c <xTaskResumeAll+0x10c>)
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3318      	adds	r3, #24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fde8 	bl	8007c9e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fde3 	bl	8007c9e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4618      	mov	r0, r3
 80080dc:	f002 fa4c 	bl	800a578 <SEGGER_SYSVIEW_OnTaskStartReady>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	2201      	movs	r2, #1
 80080e6:	409a      	lsls	r2, r3
 80080e8:	4b25      	ldr	r3, [pc, #148]	; (8008180 <xTaskResumeAll+0x110>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	4a24      	ldr	r2, [pc, #144]	; (8008180 <xTaskResumeAll+0x110>)
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a21      	ldr	r2, [pc, #132]	; (8008184 <xTaskResumeAll+0x114>)
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7ff fda4 	bl	8007c56 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008112:	4b1d      	ldr	r3, [pc, #116]	; (8008188 <xTaskResumeAll+0x118>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800811c:	4b1b      	ldr	r3, [pc, #108]	; (800818c <xTaskResumeAll+0x11c>)
 800811e:	2201      	movs	r2, #1
 8008120:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008122:	4b16      	ldr	r3, [pc, #88]	; (800817c <xTaskResumeAll+0x10c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1c8      	bne.n	80080bc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8008130:	f000 f9d6 	bl	80084e0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008134:	4b16      	ldr	r3, [pc, #88]	; (8008190 <xTaskResumeAll+0x120>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d010      	beq.n	8008162 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8008140:	f000 f83a 	bl	80081b8 <xTaskIncrementTick>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800814a:	4b10      	ldr	r3, [pc, #64]	; (800818c <xTaskResumeAll+0x11c>)
 800814c:	2201      	movs	r2, #1
 800814e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	3b01      	subs	r3, #1
 8008154:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f1      	bne.n	8008140 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800815c:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <xTaskResumeAll+0x120>)
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8008162:	4b0a      	ldr	r3, [pc, #40]	; (800818c <xTaskResumeAll+0x11c>)
 8008164:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008166:	f000 fbb5 	bl	80088d4 <vPortExitCritical>

    return xAlreadyYielded;
 800816a:	687b      	ldr	r3, [r7, #4]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	2000033c 	.word	0x2000033c
 8008178:	20000314 	.word	0x20000314
 800817c:	200002d4 	.word	0x200002d4
 8008180:	2000031c 	.word	0x2000031c
 8008184:	20000240 	.word	0x20000240
 8008188:	2000023c 	.word	0x2000023c
 800818c:	20000328 	.word	0x20000328
 8008190:	20000324 	.word	0x20000324

08008194 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800819a:	f000 fc57 	bl	8008a4c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800819e:	2300      	movs	r3, #0
 80081a0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80081a2:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <xTaskGetTickCountFromISR+0x20>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80081a8:	683b      	ldr	r3, [r7, #0]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000318 	.word	0x20000318

080081b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081c2:	4b41      	ldr	r3, [pc, #260]	; (80082c8 <xTaskIncrementTick+0x110>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d173      	bne.n	80082b2 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081ca:	4b40      	ldr	r3, [pc, #256]	; (80082cc <xTaskIncrementTick+0x114>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80081d2:	4a3e      	ldr	r2, [pc, #248]	; (80082cc <xTaskIncrementTick+0x114>)
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d120      	bne.n	8008220 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80081de:	4b3c      	ldr	r3, [pc, #240]	; (80082d0 <xTaskIncrementTick+0x118>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <xTaskIncrementTick+0x46>
        __asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	603b      	str	r3, [r7, #0]
    }
 80081fa:	bf00      	nop
 80081fc:	e7fe      	b.n	80081fc <xTaskIncrementTick+0x44>
 80081fe:	4b34      	ldr	r3, [pc, #208]	; (80082d0 <xTaskIncrementTick+0x118>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	4b33      	ldr	r3, [pc, #204]	; (80082d4 <xTaskIncrementTick+0x11c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a31      	ldr	r2, [pc, #196]	; (80082d0 <xTaskIncrementTick+0x118>)
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	4a31      	ldr	r2, [pc, #196]	; (80082d4 <xTaskIncrementTick+0x11c>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	4b31      	ldr	r3, [pc, #196]	; (80082d8 <xTaskIncrementTick+0x120>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3301      	adds	r3, #1
 8008218:	4a2f      	ldr	r2, [pc, #188]	; (80082d8 <xTaskIncrementTick+0x120>)
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	f000 f960 	bl	80084e0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008220:	4b2e      	ldr	r3, [pc, #184]	; (80082dc <xTaskIncrementTick+0x124>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	429a      	cmp	r2, r3
 8008228:	d348      	bcc.n	80082bc <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800822a:	4b29      	ldr	r3, [pc, #164]	; (80082d0 <xTaskIncrementTick+0x118>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008234:	4b29      	ldr	r3, [pc, #164]	; (80082dc <xTaskIncrementTick+0x124>)
 8008236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800823a:	601a      	str	r2, [r3, #0]
                    break;
 800823c:	e03e      	b.n	80082bc <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <xTaskIncrementTick+0x118>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	429a      	cmp	r2, r3
 8008254:	d203      	bcs.n	800825e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008256:	4a21      	ldr	r2, [pc, #132]	; (80082dc <xTaskIncrementTick+0x124>)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800825c:	e02e      	b.n	80082bc <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	3304      	adds	r3, #4
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fd1b 	bl	8007c9e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	3318      	adds	r3, #24
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff fd12 	bl	8007c9e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	4618      	mov	r0, r3
 800827e:	f002 f97b 	bl	800a578 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	2201      	movs	r2, #1
 8008288:	409a      	lsls	r2, r3
 800828a:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <xTaskIncrementTick+0x128>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4313      	orrs	r3, r2
 8008290:	4a13      	ldr	r2, [pc, #76]	; (80082e0 <xTaskIncrementTick+0x128>)
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4a10      	ldr	r2, [pc, #64]	; (80082e4 <xTaskIncrementTick+0x12c>)
 80082a2:	441a      	add	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f7ff fcd3 	bl	8007c56 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082b0:	e7bb      	b.n	800822a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80082b2:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <xTaskIncrementTick+0x130>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3301      	adds	r3, #1
 80082b8:	4a0b      	ldr	r2, [pc, #44]	; (80082e8 <xTaskIncrementTick+0x130>)
 80082ba:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80082bc:	697b      	ldr	r3, [r7, #20]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	2000033c 	.word	0x2000033c
 80082cc:	20000318 	.word	0x20000318
 80082d0:	200002cc 	.word	0x200002cc
 80082d4:	200002d0 	.word	0x200002d0
 80082d8:	2000032c 	.word	0x2000032c
 80082dc:	20000334 	.word	0x20000334
 80082e0:	2000031c 	.word	0x2000031c
 80082e4:	20000240 	.word	0x20000240
 80082e8:	20000324 	.word	0x20000324

080082ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082f2:	4b2d      	ldr	r3, [pc, #180]	; (80083a8 <vTaskSwitchContext+0xbc>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80082fa:	4b2c      	ldr	r3, [pc, #176]	; (80083ac <vTaskSwitchContext+0xc0>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8008300:	e04d      	b.n	800839e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8008302:	4b2a      	ldr	r3, [pc, #168]	; (80083ac <vTaskSwitchContext+0xc0>)
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008308:	4b29      	ldr	r3, [pc, #164]	; (80083b0 <vTaskSwitchContext+0xc4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	fab3 f383 	clz	r3, r3
 8008314:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008316:	7afb      	ldrb	r3, [r7, #11]
 8008318:	f1c3 031f 	rsb	r3, r3, #31
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	4925      	ldr	r1, [pc, #148]	; (80083b4 <vTaskSwitchContext+0xc8>)
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <vTaskSwitchContext+0x5c>
        __asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	607b      	str	r3, [r7, #4]
    }
 8008344:	bf00      	nop
 8008346:	e7fe      	b.n	8008346 <vTaskSwitchContext+0x5a>
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4a18      	ldr	r2, [pc, #96]	; (80083b4 <vTaskSwitchContext+0xc8>)
 8008354:	4413      	add	r3, r2
 8008356:	613b      	str	r3, [r7, #16]
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	3308      	adds	r3, #8
 800836a:	429a      	cmp	r2, r3
 800836c:	d104      	bne.n	8008378 <vTaskSwitchContext+0x8c>
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	605a      	str	r2, [r3, #4]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	4a0e      	ldr	r2, [pc, #56]	; (80083b8 <vTaskSwitchContext+0xcc>)
 8008380:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8008382:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <vTaskSwitchContext+0xcc>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <vTaskSwitchContext+0xd0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d102      	bne.n	8008394 <vTaskSwitchContext+0xa8>
 800838e:	f002 f853 	bl	800a438 <SEGGER_SYSVIEW_OnIdle>
}
 8008392:	e004      	b.n	800839e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8008394:	4b08      	ldr	r3, [pc, #32]	; (80083b8 <vTaskSwitchContext+0xcc>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f002 f8ab 	bl	800a4f4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800839e:	bf00      	nop
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	2000033c 	.word	0x2000033c
 80083ac:	20000328 	.word	0x20000328
 80083b0:	2000031c 	.word	0x2000031c
 80083b4:	20000240 	.word	0x20000240
 80083b8:	2000023c 	.word	0x2000023c
 80083bc:	20000338 	.word	0x20000338

080083c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80083c8:	f000 f84c 	bl	8008464 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80083cc:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <prvIdleTask+0x20>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80083dc:	e7f4      	b.n	80083c8 <prvIdleTask+0x8>
 80083de:	bf00      	nop
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083ea:	2300      	movs	r3, #0
 80083ec:	607b      	str	r3, [r7, #4]
 80083ee:	e00c      	b.n	800840a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4a12      	ldr	r2, [pc, #72]	; (8008444 <prvInitialiseTaskLists+0x60>)
 80083fc:	4413      	add	r3, r2
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff fbfc 	bl	8007bfc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3301      	adds	r3, #1
 8008408:	607b      	str	r3, [r7, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b04      	cmp	r3, #4
 800840e:	d9ef      	bls.n	80083f0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008410:	480d      	ldr	r0, [pc, #52]	; (8008448 <prvInitialiseTaskLists+0x64>)
 8008412:	f7ff fbf3 	bl	8007bfc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008416:	480d      	ldr	r0, [pc, #52]	; (800844c <prvInitialiseTaskLists+0x68>)
 8008418:	f7ff fbf0 	bl	8007bfc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800841c:	480c      	ldr	r0, [pc, #48]	; (8008450 <prvInitialiseTaskLists+0x6c>)
 800841e:	f7ff fbed 	bl	8007bfc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8008422:	480c      	ldr	r0, [pc, #48]	; (8008454 <prvInitialiseTaskLists+0x70>)
 8008424:	f7ff fbea 	bl	8007bfc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8008428:	480b      	ldr	r0, [pc, #44]	; (8008458 <prvInitialiseTaskLists+0x74>)
 800842a:	f7ff fbe7 	bl	8007bfc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800842e:	4b0b      	ldr	r3, [pc, #44]	; (800845c <prvInitialiseTaskLists+0x78>)
 8008430:	4a05      	ldr	r2, [pc, #20]	; (8008448 <prvInitialiseTaskLists+0x64>)
 8008432:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <prvInitialiseTaskLists+0x7c>)
 8008436:	4a05      	ldr	r2, [pc, #20]	; (800844c <prvInitialiseTaskLists+0x68>)
 8008438:	601a      	str	r2, [r3, #0]
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20000240 	.word	0x20000240
 8008448:	200002a4 	.word	0x200002a4
 800844c:	200002b8 	.word	0x200002b8
 8008450:	200002d4 	.word	0x200002d4
 8008454:	200002e8 	.word	0x200002e8
 8008458:	20000300 	.word	0x20000300
 800845c:	200002cc 	.word	0x200002cc
 8008460:	200002d0 	.word	0x200002d0

08008464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800846a:	e019      	b.n	80084a0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800846c:	f000 fa02 	bl	8008874 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008470:	4b10      	ldr	r3, [pc, #64]	; (80084b4 <prvCheckTasksWaitingTermination+0x50>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3304      	adds	r3, #4
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fc0e 	bl	8007c9e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8008482:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <prvCheckTasksWaitingTermination+0x54>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3b01      	subs	r3, #1
 8008488:	4a0b      	ldr	r2, [pc, #44]	; (80084b8 <prvCheckTasksWaitingTermination+0x54>)
 800848a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800848c:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <prvCheckTasksWaitingTermination+0x58>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3b01      	subs	r3, #1
 8008492:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <prvCheckTasksWaitingTermination+0x58>)
 8008494:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8008496:	f000 fa1d 	bl	80088d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f810 	bl	80084c0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084a0:	4b06      	ldr	r3, [pc, #24]	; (80084bc <prvCheckTasksWaitingTermination+0x58>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e1      	bne.n	800846c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200002e8 	.word	0x200002e8
 80084b8:	20000314 	.word	0x20000314
 80084bc:	200002fc 	.word	0x200002fc

080084c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fbdd 	bl	8008c8c <vPortFree>
                vPortFree( pxTCB );
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fbda 	bl	8008c8c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e4:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <prvResetNextTaskUnblockTime+0x30>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d104      	bne.n	80084f8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <prvResetNextTaskUnblockTime+0x34>)
 80084f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084f4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80084f6:	e005      	b.n	8008504 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084f8:	4b05      	ldr	r3, [pc, #20]	; (8008510 <prvResetNextTaskUnblockTime+0x30>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a04      	ldr	r2, [pc, #16]	; (8008514 <prvResetNextTaskUnblockTime+0x34>)
 8008502:	6013      	str	r3, [r2, #0]
}
 8008504:	bf00      	nop
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	200002cc 	.word	0x200002cc
 8008514:	20000334 	.word	0x20000334

08008518 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3b04      	subs	r3, #4
 8008528:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008530:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3b04      	subs	r3, #4
 8008536:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f023 0201 	bic.w	r2, r3, #1
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3b04      	subs	r3, #4
 8008546:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008548:	4a0c      	ldr	r2, [pc, #48]	; (800857c <pxPortInitialiseStack+0x64>)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3b14      	subs	r3, #20
 8008552:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3b04      	subs	r3, #4
 800855e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f06f 0202 	mvn.w	r2, #2
 8008566:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3b20      	subs	r3, #32
 800856c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800856e:	68fb      	ldr	r3, [r7, #12]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	08008581 	.word	0x08008581

08008580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <prvTaskExitError+0x54>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008592:	d00a      	beq.n	80085aa <prvTaskExitError+0x2a>
        __asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	60fb      	str	r3, [r7, #12]
    }
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <prvTaskExitError+0x28>
        __asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	60bb      	str	r3, [r7, #8]
    }
 80085bc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80085be:	bf00      	nop
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0fc      	beq.n	80085c0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80085c6:	bf00      	nop
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	20000030 	.word	0x20000030
	...

080085e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80085e0:	4b07      	ldr	r3, [pc, #28]	; (8008600 <pxCurrentTCBConst2>)
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	6808      	ldr	r0, [r1, #0]
 80085e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ea:	f380 8809 	msr	PSP, r0
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8811 	msr	BASEPRI, r0
 80085fa:	4770      	bx	lr
 80085fc:	f3af 8000 	nop.w

08008600 <pxCurrentTCBConst2>:
 8008600:	2000023c 	.word	0x2000023c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008608:	4808      	ldr	r0, [pc, #32]	; (800862c <prvPortStartFirstTask+0x24>)
 800860a:	6800      	ldr	r0, [r0, #0]
 800860c:	6800      	ldr	r0, [r0, #0]
 800860e:	f380 8808 	msr	MSP, r0
 8008612:	f04f 0000 	mov.w	r0, #0
 8008616:	f380 8814 	msr	CONTROL, r0
 800861a:	b662      	cpsie	i
 800861c:	b661      	cpsie	f
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	df00      	svc	0
 8008628:	bf00      	nop
 800862a:	0000      	.short	0x0000
 800862c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop

08008634 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800863a:	4b46      	ldr	r3, [pc, #280]	; (8008754 <xPortStartScheduler+0x120>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a46      	ldr	r2, [pc, #280]	; (8008758 <xPortStartScheduler+0x124>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d10a      	bne.n	800865a <xPortStartScheduler+0x26>
        __asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	613b      	str	r3, [r7, #16]
    }
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800865a:	4b3e      	ldr	r3, [pc, #248]	; (8008754 <xPortStartScheduler+0x120>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a3f      	ldr	r2, [pc, #252]	; (800875c <xPortStartScheduler+0x128>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d10a      	bne.n	800867a <xPortStartScheduler+0x46>
        __asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	60fb      	str	r3, [r7, #12]
    }
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800867a:	4b39      	ldr	r3, [pc, #228]	; (8008760 <xPortStartScheduler+0x12c>)
 800867c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	22ff      	movs	r2, #255	; 0xff
 800868a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800869c:	b2da      	uxtb	r2, r3
 800869e:	4b31      	ldr	r3, [pc, #196]	; (8008764 <xPortStartScheduler+0x130>)
 80086a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086a2:	4b31      	ldr	r3, [pc, #196]	; (8008768 <xPortStartScheduler+0x134>)
 80086a4:	2207      	movs	r2, #7
 80086a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086a8:	e009      	b.n	80086be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80086aa:	4b2f      	ldr	r3, [pc, #188]	; (8008768 <xPortStartScheduler+0x134>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	4a2d      	ldr	r2, [pc, #180]	; (8008768 <xPortStartScheduler+0x134>)
 80086b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c6:	2b80      	cmp	r3, #128	; 0x80
 80086c8:	d0ef      	beq.n	80086aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086ca:	4b27      	ldr	r3, [pc, #156]	; (8008768 <xPortStartScheduler+0x134>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f1c3 0307 	rsb	r3, r3, #7
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d00a      	beq.n	80086ec <xPortStartScheduler+0xb8>
        __asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	60bb      	str	r3, [r7, #8]
    }
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ec:	4b1e      	ldr	r3, [pc, #120]	; (8008768 <xPortStartScheduler+0x134>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	4a1d      	ldr	r2, [pc, #116]	; (8008768 <xPortStartScheduler+0x134>)
 80086f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086f6:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <xPortStartScheduler+0x134>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086fe:	4a1a      	ldr	r2, [pc, #104]	; (8008768 <xPortStartScheduler+0x134>)
 8008700:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	b2da      	uxtb	r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800870a:	4b18      	ldr	r3, [pc, #96]	; (800876c <xPortStartScheduler+0x138>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a17      	ldr	r2, [pc, #92]	; (800876c <xPortStartScheduler+0x138>)
 8008710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008714:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008716:	4b15      	ldr	r3, [pc, #84]	; (800876c <xPortStartScheduler+0x138>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a14      	ldr	r2, [pc, #80]	; (800876c <xPortStartScheduler+0x138>)
 800871c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008720:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008722:	f000 f963 	bl	80089ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008726:	4b12      	ldr	r3, [pc, #72]	; (8008770 <xPortStartScheduler+0x13c>)
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800872c:	f000 f982 	bl	8008a34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008730:	4b10      	ldr	r3, [pc, #64]	; (8008774 <xPortStartScheduler+0x140>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a0f      	ldr	r2, [pc, #60]	; (8008774 <xPortStartScheduler+0x140>)
 8008736:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800873a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800873c:	f7ff ff64 	bl	8008608 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008740:	f7ff fdd4 	bl	80082ec <vTaskSwitchContext>
    prvTaskExitError();
 8008744:	f7ff ff1c 	bl	8008580 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	e000ed00 	.word	0xe000ed00
 8008758:	410fc271 	.word	0x410fc271
 800875c:	410fc270 	.word	0x410fc270
 8008760:	e000e400 	.word	0xe000e400
 8008764:	20000340 	.word	0x20000340
 8008768:	20000344 	.word	0x20000344
 800876c:	e000ed20 	.word	0xe000ed20
 8008770:	20000030 	.word	0x20000030
 8008774:	e000ef34 	.word	0xe000ef34

08008778 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800877e:	4b37      	ldr	r3, [pc, #220]	; (800885c <vInitPrioGroupValue+0xe4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a37      	ldr	r2, [pc, #220]	; (8008860 <vInitPrioGroupValue+0xe8>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d10a      	bne.n	800879e <vInitPrioGroupValue+0x26>
        __asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	613b      	str	r3, [r7, #16]
    }
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800879e:	4b2f      	ldr	r3, [pc, #188]	; (800885c <vInitPrioGroupValue+0xe4>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a30      	ldr	r2, [pc, #192]	; (8008864 <vInitPrioGroupValue+0xec>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d10a      	bne.n	80087be <vInitPrioGroupValue+0x46>
        __asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	60fb      	str	r3, [r7, #12]
    }
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087be:	4b2a      	ldr	r3, [pc, #168]	; (8008868 <vInitPrioGroupValue+0xf0>)
 80087c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	22ff      	movs	r2, #255	; 0xff
 80087ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	4b22      	ldr	r3, [pc, #136]	; (800886c <vInitPrioGroupValue+0xf4>)
 80087e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087e6:	4b22      	ldr	r3, [pc, #136]	; (8008870 <vInitPrioGroupValue+0xf8>)
 80087e8:	2207      	movs	r2, #7
 80087ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ec:	e009      	b.n	8008802 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80087ee:	4b20      	ldr	r3, [pc, #128]	; (8008870 <vInitPrioGroupValue+0xf8>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	4a1e      	ldr	r2, [pc, #120]	; (8008870 <vInitPrioGroupValue+0xf8>)
 80087f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	b2db      	uxtb	r3, r3
 8008806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880a:	2b80      	cmp	r3, #128	; 0x80
 800880c:	d0ef      	beq.n	80087ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800880e:	4b18      	ldr	r3, [pc, #96]	; (8008870 <vInitPrioGroupValue+0xf8>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f1c3 0307 	rsb	r3, r3, #7
 8008816:	2b04      	cmp	r3, #4
 8008818:	d00a      	beq.n	8008830 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	60bb      	str	r3, [r7, #8]
    }
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008830:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <vInitPrioGroupValue+0xf8>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	021b      	lsls	r3, r3, #8
 8008836:	4a0e      	ldr	r2, [pc, #56]	; (8008870 <vInitPrioGroupValue+0xf8>)
 8008838:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800883a:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <vInitPrioGroupValue+0xf8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008842:	4a0b      	ldr	r2, [pc, #44]	; (8008870 <vInitPrioGroupValue+0xf8>)
 8008844:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	b2da      	uxtb	r2, r3
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800884e:	bf00      	nop
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	e000ed00 	.word	0xe000ed00
 8008860:	410fc271 	.word	0x410fc271
 8008864:	410fc270 	.word	0x410fc270
 8008868:	e000e400 	.word	0xe000e400
 800886c:	20000340 	.word	0x20000340
 8008870:	20000344 	.word	0x20000344

08008874 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
        __asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	607b      	str	r3, [r7, #4]
    }
 800888c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <vPortEnterCritical+0x58>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3301      	adds	r3, #1
 8008894:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <vPortEnterCritical+0x58>)
 8008896:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008898:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <vPortEnterCritical+0x58>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d10f      	bne.n	80088c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <vPortEnterCritical+0x5c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	603b      	str	r3, [r7, #0]
    }
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <vPortEnterCritical+0x4a>
    }
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	20000030 	.word	0x20000030
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80088da:	4b12      	ldr	r3, [pc, #72]	; (8008924 <vPortExitCritical+0x50>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <vPortExitCritical+0x24>
        __asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	607b      	str	r3, [r7, #4]
    }
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <vPortExitCritical+0x50>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	4a09      	ldr	r2, [pc, #36]	; (8008924 <vPortExitCritical+0x50>)
 8008900:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008902:	4b08      	ldr	r3, [pc, #32]	; (8008924 <vPortExitCritical+0x50>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <vPortExitCritical+0x42>
 800890a:	2300      	movs	r3, #0
 800890c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008914:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000030 	.word	0x20000030
	...

08008930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008930:	f3ef 8009 	mrs	r0, PSP
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	4b15      	ldr	r3, [pc, #84]	; (8008990 <pxCurrentTCBConst>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	f01e 0f10 	tst.w	lr, #16
 8008940:	bf08      	it	eq
 8008942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	6010      	str	r0, [r2, #0]
 800894c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008954:	f380 8811 	msr	BASEPRI, r0
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f7ff fcc4 	bl	80082ec <vTaskSwitchContext>
 8008964:	f04f 0000 	mov.w	r0, #0
 8008968:	f380 8811 	msr	BASEPRI, r0
 800896c:	bc09      	pop	{r0, r3}
 800896e:	6819      	ldr	r1, [r3, #0]
 8008970:	6808      	ldr	r0, [r1, #0]
 8008972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008976:	f01e 0f10 	tst.w	lr, #16
 800897a:	bf08      	it	eq
 800897c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008980:	f380 8809 	msr	PSP, r0
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w

08008990 <pxCurrentTCBConst>:
 8008990:	2000023c 	.word	0x2000023c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop

08008998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
        __asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	607b      	str	r3, [r7, #4]
    }
 80089b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80089b2:	f001 fcc7 	bl	800a344 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80089b6:	f7ff fbff 	bl	80081b8 <xTaskIncrementTick>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d006      	beq.n	80089ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80089c0:	f001 fd1e 	bl	800a400 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089c4:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <SysTick_Handler+0x50>)
 80089c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	e001      	b.n	80089d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80089ce:	f001 fcfb 	bl	800a3c8 <SEGGER_SYSVIEW_RecordExitISR>
 80089d2:	2300      	movs	r3, #0
 80089d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	f383 8811 	msr	BASEPRI, r3
    }
 80089dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <vPortSetupTimerInterrupt+0x34>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <vPortSetupTimerInterrupt+0x38>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <vPortSetupTimerInterrupt+0x3c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a0a      	ldr	r2, [pc, #40]	; (8008a2c <vPortSetupTimerInterrupt+0x40>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	099b      	lsrs	r3, r3, #6
 8008a08:	4a09      	ldr	r2, [pc, #36]	; (8008a30 <vPortSetupTimerInterrupt+0x44>)
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a0e:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <vPortSetupTimerInterrupt+0x34>)
 8008a10:	2207      	movs	r2, #7
 8008a12:	601a      	str	r2, [r3, #0]
}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	e000e010 	.word	0xe000e010
 8008a24:	e000e018 	.word	0xe000e018
 8008a28:	20000000 	.word	0x20000000
 8008a2c:	10624dd3 	.word	0x10624dd3
 8008a30:	e000e014 	.word	0xe000e014

08008a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a44 <vPortEnableVFP+0x10>
 8008a38:	6801      	ldr	r1, [r0, #0]
 8008a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a3e:	6001      	str	r1, [r0, #0]
 8008a40:	4770      	bx	lr
 8008a42:	0000      	.short	0x0000
 8008a44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop

08008a4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008a52:	f3ef 8305 	mrs	r3, IPSR
 8008a56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b0f      	cmp	r3, #15
 8008a5c:	d914      	bls.n	8008a88 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a5e:	4a17      	ldr	r2, [pc, #92]	; (8008abc <vPortValidateInterruptPriority+0x70>)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4413      	add	r3, r2
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a68:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <vPortValidateInterruptPriority+0x74>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	7afa      	ldrb	r2, [r7, #11]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d20a      	bcs.n	8008a88 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	607b      	str	r3, [r7, #4]
    }
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a88:	4b0e      	ldr	r3, [pc, #56]	; (8008ac4 <vPortValidateInterruptPriority+0x78>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a90:	4b0d      	ldr	r3, [pc, #52]	; (8008ac8 <vPortValidateInterruptPriority+0x7c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d90a      	bls.n	8008aae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	603b      	str	r3, [r7, #0]
    }
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <vPortValidateInterruptPriority+0x60>
    }
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	e000e3f0 	.word	0xe000e3f0
 8008ac0:	20000340 	.word	0x20000340
 8008ac4:	e000ed0c 	.word	0xe000ed0c
 8008ac8:	20000344 	.word	0x20000344

08008acc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08a      	sub	sp, #40	; 0x28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008ad8:	f7ff fabc 	bl	8008054 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008adc:	4b65      	ldr	r3, [pc, #404]	; (8008c74 <pvPortMalloc+0x1a8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008ae4:	f000 f934 	bl	8008d50 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ae8:	4b63      	ldr	r3, [pc, #396]	; (8008c78 <pvPortMalloc+0x1ac>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4013      	ands	r3, r2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 80a7 	bne.w	8008c44 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d02d      	beq.n	8008b58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008afc:	2208      	movs	r2, #8
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d227      	bcs.n	8008b58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008b08:	2208      	movs	r2, #8
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d021      	beq.n	8008b5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f023 0307 	bic.w	r3, r3, #7
 8008b20:	3308      	adds	r3, #8
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d214      	bcs.n	8008b52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f023 0307 	bic.w	r3, r3, #7
 8008b2e:	3308      	adds	r3, #8
 8008b30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d010      	beq.n	8008b5e <pvPortMalloc+0x92>
        __asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	617b      	str	r3, [r7, #20]
    }
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b56:	e002      	b.n	8008b5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	607b      	str	r3, [r7, #4]
 8008b5c:	e000      	b.n	8008b60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d06e      	beq.n	8008c44 <pvPortMalloc+0x178>
 8008b66:	4b45      	ldr	r3, [pc, #276]	; (8008c7c <pvPortMalloc+0x1b0>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d869      	bhi.n	8008c44 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008b70:	4b43      	ldr	r3, [pc, #268]	; (8008c80 <pvPortMalloc+0x1b4>)
 8008b72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008b74:	4b42      	ldr	r3, [pc, #264]	; (8008c80 <pvPortMalloc+0x1b4>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b7a:	e004      	b.n	8008b86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d903      	bls.n	8008b98 <pvPortMalloc+0xcc>
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1f1      	bne.n	8008b7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008b98:	4b36      	ldr	r3, [pc, #216]	; (8008c74 <pvPortMalloc+0x1a8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d050      	beq.n	8008c44 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2208      	movs	r2, #8
 8008ba8:	4413      	add	r3, r2
 8008baa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	1ad2      	subs	r2, r2, r3
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d91f      	bls.n	8008c04 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4413      	add	r3, r2
 8008bca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <pvPortMalloc+0x120>
        __asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	613b      	str	r3, [r7, #16]
    }
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	1ad2      	subs	r2, r2, r3
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bfe:	69b8      	ldr	r0, [r7, #24]
 8008c00:	f000 f908 	bl	8008e14 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c04:	4b1d      	ldr	r3, [pc, #116]	; (8008c7c <pvPortMalloc+0x1b0>)
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	4a1b      	ldr	r2, [pc, #108]	; (8008c7c <pvPortMalloc+0x1b0>)
 8008c10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c12:	4b1a      	ldr	r3, [pc, #104]	; (8008c7c <pvPortMalloc+0x1b0>)
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	4b1b      	ldr	r3, [pc, #108]	; (8008c84 <pvPortMalloc+0x1b8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d203      	bcs.n	8008c26 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c1e:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <pvPortMalloc+0x1b0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a18      	ldr	r2, [pc, #96]	; (8008c84 <pvPortMalloc+0x1b8>)
 8008c24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	4b13      	ldr	r3, [pc, #76]	; (8008c78 <pvPortMalloc+0x1ac>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008c3a:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <pvPortMalloc+0x1bc>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	4a11      	ldr	r2, [pc, #68]	; (8008c88 <pvPortMalloc+0x1bc>)
 8008c42:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008c44:	f7ff fa14 	bl	8008070 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <pvPortMalloc+0x19c>
        __asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60fb      	str	r3, [r7, #12]
    }
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <pvPortMalloc+0x19a>
    return pvReturn;
 8008c68:	69fb      	ldr	r3, [r7, #28]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3728      	adds	r7, #40	; 0x28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20012f50 	.word	0x20012f50
 8008c78:	20012f64 	.word	0x20012f64
 8008c7c:	20012f54 	.word	0x20012f54
 8008c80:	20012f48 	.word	0x20012f48
 8008c84:	20012f58 	.word	0x20012f58
 8008c88:	20012f5c 	.word	0x20012f5c

08008c8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d04d      	beq.n	8008d3a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008c9e:	2308      	movs	r3, #8
 8008ca0:	425b      	negs	r3, r3
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	4b24      	ldr	r3, [pc, #144]	; (8008d44 <vPortFree+0xb8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10a      	bne.n	8008cd0 <vPortFree+0x44>
        __asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	60fb      	str	r3, [r7, #12]
    }
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <vPortFree+0x62>
        __asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	60bb      	str	r3, [r7, #8]
    }
 8008cea:	bf00      	nop
 8008cec:	e7fe      	b.n	8008cec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	4b14      	ldr	r3, [pc, #80]	; (8008d44 <vPortFree+0xb8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d01e      	beq.n	8008d3a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d11a      	bne.n	8008d3a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	4b0e      	ldr	r3, [pc, #56]	; (8008d44 <vPortFree+0xb8>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	401a      	ands	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008d14:	f7ff f99e 	bl	8008054 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <vPortFree+0xbc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4413      	add	r3, r2
 8008d22:	4a09      	ldr	r2, [pc, #36]	; (8008d48 <vPortFree+0xbc>)
 8008d24:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d26:	6938      	ldr	r0, [r7, #16]
 8008d28:	f000 f874 	bl	8008e14 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008d2c:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <vPortFree+0xc0>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3301      	adds	r3, #1
 8008d32:	4a06      	ldr	r2, [pc, #24]	; (8008d4c <vPortFree+0xc0>)
 8008d34:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008d36:	f7ff f99b 	bl	8008070 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008d3a:	bf00      	nop
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20012f64 	.word	0x20012f64
 8008d48:	20012f54 	.word	0x20012f54
 8008d4c:	20012f60 	.word	0x20012f60

08008d50 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d56:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008d5a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008d5c:	4b27      	ldr	r3, [pc, #156]	; (8008dfc <prvHeapInit+0xac>)
 8008d5e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00c      	beq.n	8008d84 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	3307      	adds	r3, #7
 8008d6e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0307 	bic.w	r3, r3, #7
 8008d76:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	4a1f      	ldr	r2, [pc, #124]	; (8008dfc <prvHeapInit+0xac>)
 8008d80:	4413      	add	r3, r2
 8008d82:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d88:	4a1d      	ldr	r2, [pc, #116]	; (8008e00 <prvHeapInit+0xb0>)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008d8e:	4b1c      	ldr	r3, [pc, #112]	; (8008e00 <prvHeapInit+0xb0>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	4413      	add	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	1a9b      	subs	r3, r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0307 	bic.w	r3, r3, #7
 8008daa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4a15      	ldr	r2, [pc, #84]	; (8008e04 <prvHeapInit+0xb4>)
 8008db0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008db2:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <prvHeapInit+0xb4>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2200      	movs	r2, #0
 8008db8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008dba:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <prvHeapInit+0xb4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	1ad2      	subs	r2, r2, r3
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <prvHeapInit+0xb4>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	4a0a      	ldr	r2, [pc, #40]	; (8008e08 <prvHeapInit+0xb8>)
 8008dde:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	4a09      	ldr	r2, [pc, #36]	; (8008e0c <prvHeapInit+0xbc>)
 8008de6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008de8:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <prvHeapInit+0xc0>)
 8008dea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008dee:	601a      	str	r2, [r3, #0]
}
 8008df0:	bf00      	nop
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	20000348 	.word	0x20000348
 8008e00:	20012f48 	.word	0x20012f48
 8008e04:	20012f50 	.word	0x20012f50
 8008e08:	20012f58 	.word	0x20012f58
 8008e0c:	20012f54 	.word	0x20012f54
 8008e10:	20012f64 	.word	0x20012f64

08008e14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e1c:	4b28      	ldr	r3, [pc, #160]	; (8008ec0 <prvInsertBlockIntoFreeList+0xac>)
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	e002      	b.n	8008e28 <prvInsertBlockIntoFreeList+0x14>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d8f7      	bhi.n	8008e22 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d108      	bne.n	8008e56 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	441a      	add	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	441a      	add	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d118      	bne.n	8008e9c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	4b15      	ldr	r3, [pc, #84]	; (8008ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d00d      	beq.n	8008e92 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	441a      	add	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	e008      	b.n	8008ea4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e92:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	e003      	b.n	8008ea4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d002      	beq.n	8008eb2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008eb2:	bf00      	nop
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20012f48 	.word	0x20012f48
 8008ec4:	20012f50 	.word	0x20012f50

08008ec8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008ecc:	4803      	ldr	r0, [pc, #12]	; (8008edc <_cbSendSystemDesc+0x14>)
 8008ece:	f001 f9e3 	bl	800a298 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008ed2:	4803      	ldr	r0, [pc, #12]	; (8008ee0 <_cbSendSystemDesc+0x18>)
 8008ed4:	f001 f9e0 	bl	800a298 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008ed8:	bf00      	nop
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	0800b98c 	.word	0x0800b98c
 8008ee0:	0800b9c0 	.word	0x0800b9c0

08008ee4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008ee8:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <SEGGER_SYSVIEW_Conf+0x20>)
 8008eea:	6818      	ldr	r0, [r3, #0]
 8008eec:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <SEGGER_SYSVIEW_Conf+0x20>)
 8008eee:	6819      	ldr	r1, [r3, #0]
 8008ef0:	4b05      	ldr	r3, [pc, #20]	; (8008f08 <SEGGER_SYSVIEW_Conf+0x24>)
 8008ef2:	4a06      	ldr	r2, [pc, #24]	; (8008f0c <SEGGER_SYSVIEW_Conf+0x28>)
 8008ef4:	f000 fe56 	bl	8009ba4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008ef8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008efc:	f000 fe96 	bl	8009c2c <SEGGER_SYSVIEW_SetRAMBase>
}
 8008f00:	bf00      	nop
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20000000 	.word	0x20000000
 8008f08:	08008ec9 	.word	0x08008ec9
 8008f0c:	0800ba60 	.word	0x0800ba60

08008f10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008f16:	2300      	movs	r3, #0
 8008f18:	607b      	str	r3, [r7, #4]
 8008f1a:	e033      	b.n	8008f84 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008f1c:	491e      	ldr	r1, [pc, #120]	; (8008f98 <_cbSendTaskList+0x88>)
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	440b      	add	r3, r1
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	491a      	ldr	r1, [pc, #104]	; (8008f98 <_cbSendTaskList+0x88>)
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	440b      	add	r3, r1
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	6819      	ldr	r1, [r3, #0]
 8008f3e:	4c16      	ldr	r4, [pc, #88]	; (8008f98 <_cbSendTaskList+0x88>)
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4423      	add	r3, r4
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	681c      	ldr	r4, [r3, #0]
 8008f50:	4d11      	ldr	r5, [pc, #68]	; (8008f98 <_cbSendTaskList+0x88>)
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	442b      	add	r3, r5
 8008f5e:	330c      	adds	r3, #12
 8008f60:	681d      	ldr	r5, [r3, #0]
 8008f62:	4e0d      	ldr	r6, [pc, #52]	; (8008f98 <_cbSendTaskList+0x88>)
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4433      	add	r3, r6
 8008f70:	3310      	adds	r3, #16
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	462b      	mov	r3, r5
 8008f78:	4622      	mov	r2, r4
 8008f7a:	f000 f8bd 	bl	80090f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3301      	adds	r3, #1
 8008f82:	607b      	str	r3, [r7, #4]
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <_cbSendTaskList+0x8c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d3c6      	bcc.n	8008f1c <_cbSendTaskList+0xc>
  }
}
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f98:	20012f68 	.word	0x20012f68
 8008f9c:	20013008 	.word	0x20013008

08008fa0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008fa8:	f7ff f8f4 	bl	8008194 <xTaskGetTickCountFromISR>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2200      	movs	r2, #0
 8008fb0:	469a      	mov	sl, r3
 8008fb2:	4693      	mov	fp, r2
 8008fb4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	f04f 0a00 	mov.w	sl, #0
 8008fc4:	f04f 0b00 	mov.w	fp, #0
 8008fc8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008fcc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008fd0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	1a14      	subs	r4, r2, r0
 8008fda:	eb63 0501 	sbc.w	r5, r3, r1
 8008fde:	f04f 0200 	mov.w	r2, #0
 8008fe2:	f04f 0300 	mov.w	r3, #0
 8008fe6:	00ab      	lsls	r3, r5, #2
 8008fe8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008fec:	00a2      	lsls	r2, r4, #2
 8008fee:	4614      	mov	r4, r2
 8008ff0:	461d      	mov	r5, r3
 8008ff2:	eb14 0800 	adds.w	r8, r4, r0
 8008ff6:	eb45 0901 	adc.w	r9, r5, r1
 8008ffa:	f04f 0200 	mov.w	r2, #0
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800900a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800900e:	4690      	mov	r8, r2
 8009010:	4699      	mov	r9, r3
 8009012:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8009016:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800901a:	4610      	mov	r0, r2
 800901c:	4619      	mov	r1, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009028 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af02      	add	r7, sp, #8
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8009036:	2205      	movs	r2, #5
 8009038:	492b      	ldr	r1, [pc, #172]	; (80090e8 <SYSVIEW_AddTask+0xc0>)
 800903a:	68b8      	ldr	r0, [r7, #8]
 800903c:	f001 ff64 	bl	800af08 <memcmp>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d04b      	beq.n	80090de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8009046:	4b29      	ldr	r3, [pc, #164]	; (80090ec <SYSVIEW_AddTask+0xc4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b07      	cmp	r3, #7
 800904c:	d903      	bls.n	8009056 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800904e:	4828      	ldr	r0, [pc, #160]	; (80090f0 <SYSVIEW_AddTask+0xc8>)
 8009050:	f001 fbb0 	bl	800a7b4 <SEGGER_SYSVIEW_Warn>
    return;
 8009054:	e044      	b.n	80090e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8009056:	4b25      	ldr	r3, [pc, #148]	; (80090ec <SYSVIEW_AddTask+0xc4>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4926      	ldr	r1, [pc, #152]	; (80090f4 <SYSVIEW_AddTask+0xcc>)
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	440b      	add	r3, r1
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800906a:	4b20      	ldr	r3, [pc, #128]	; (80090ec <SYSVIEW_AddTask+0xc4>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	4921      	ldr	r1, [pc, #132]	; (80090f4 <SYSVIEW_AddTask+0xcc>)
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	3304      	adds	r3, #4
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009080:	4b1a      	ldr	r3, [pc, #104]	; (80090ec <SYSVIEW_AddTask+0xc4>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	491b      	ldr	r1, [pc, #108]	; (80090f4 <SYSVIEW_AddTask+0xcc>)
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	3308      	adds	r3, #8
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8009096:	4b15      	ldr	r3, [pc, #84]	; (80090ec <SYSVIEW_AddTask+0xc4>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4916      	ldr	r1, [pc, #88]	; (80090f4 <SYSVIEW_AddTask+0xcc>)
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	330c      	adds	r3, #12
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80090ac:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <SYSVIEW_AddTask+0xc4>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	4910      	ldr	r1, [pc, #64]	; (80090f4 <SYSVIEW_AddTask+0xcc>)
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	3310      	adds	r3, #16
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80090c2:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <SYSVIEW_AddTask+0xc4>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3301      	adds	r3, #1
 80090c8:	4a08      	ldr	r2, [pc, #32]	; (80090ec <SYSVIEW_AddTask+0xc4>)
 80090ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	68b9      	ldr	r1, [r7, #8]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 f80e 	bl	80090f8 <SYSVIEW_SendTaskInfo>
 80090dc:	e000      	b.n	80090e0 <SYSVIEW_AddTask+0xb8>
    return;
 80090de:	bf00      	nop

}
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	0800b9d0 	.word	0x0800b9d0
 80090ec:	20013008 	.word	0x20013008
 80090f0:	0800b9d8 	.word	0x0800b9d8
 80090f4:	20012f68 	.word	0x20012f68

080090f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	; 0x28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8009106:	f107 0314 	add.w	r3, r7, #20
 800910a:	2214      	movs	r2, #20
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f001 ff18 	bl	800af44 <memset>
  TaskInfo.TaskID     = TaskID;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8009128:	f107 0314 	add.w	r3, r7, #20
 800912c:	4618      	mov	r0, r3
 800912e:	f000 ffbb 	bl	800a0a8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8009132:	bf00      	nop
 8009134:	3728      	adds	r7, #40	; 0x28
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8009142:	4b24      	ldr	r3, [pc, #144]	; (80091d4 <_DoInit+0x98>)
 8009144:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2203      	movs	r2, #3
 800914a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2203      	movs	r2, #3
 8009150:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a20      	ldr	r2, [pc, #128]	; (80091d8 <_DoInit+0x9c>)
 8009156:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a20      	ldr	r2, [pc, #128]	; (80091dc <_DoInit+0xa0>)
 800915c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009164:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <_DoInit+0x9c>)
 800917c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a17      	ldr	r2, [pc, #92]	; (80091e0 <_DoInit+0xa4>)
 8009182:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2210      	movs	r2, #16
 8009188:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3307      	adds	r3, #7
 80091a0:	4a10      	ldr	r2, [pc, #64]	; (80091e4 <_DoInit+0xa8>)
 80091a2:	6810      	ldr	r0, [r2, #0]
 80091a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80091a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a0e      	ldr	r2, [pc, #56]	; (80091e8 <_DoInit+0xac>)
 80091ae:	6810      	ldr	r0, [r2, #0]
 80091b0:	6018      	str	r0, [r3, #0]
 80091b2:	8891      	ldrh	r1, [r2, #4]
 80091b4:	7992      	ldrb	r2, [r2, #6]
 80091b6:	8099      	strh	r1, [r3, #4]
 80091b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80091ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2220      	movs	r2, #32
 80091c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80091c4:	f3bf 8f5f 	dmb	sy
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	2001300c 	.word	0x2001300c
 80091d8:	0800ba28 	.word	0x0800ba28
 80091dc:	200130b4 	.word	0x200130b4
 80091e0:	200134b4 	.word	0x200134b4
 80091e4:	0800ba34 	.word	0x0800ba34
 80091e8:	0800ba38 	.word	0x0800ba38

080091ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	; 0x28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80091f8:	2300      	movs	r3, #0
 80091fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	429a      	cmp	r2, r3
 800920e:	d905      	bls.n	800921c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	3b01      	subs	r3, #1
 8009218:	627b      	str	r3, [r7, #36]	; 0x24
 800921a:	e007      	b.n	800922c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	69b9      	ldr	r1, [r7, #24]
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	1acb      	subs	r3, r1, r3
 8009226:	4413      	add	r3, r2
 8009228:	3b01      	subs	r3, #1
 800922a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	689a      	ldr	r2, [r3, #8]
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009236:	4293      	cmp	r3, r2
 8009238:	bf28      	it	cs
 800923a:	4613      	movcs	r3, r2
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800923e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4293      	cmp	r3, r2
 8009244:	bf28      	it	cs
 8009246:	4613      	movcs	r3, r2
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	4413      	add	r3, r2
 8009252:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8009254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	6978      	ldr	r0, [r7, #20]
 800925a:	f001 fe65 	bl	800af28 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800925e:	6a3a      	ldr	r2, [r7, #32]
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	4413      	add	r3, r2
 8009264:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	4413      	add	r3, r2
 800926c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	4413      	add	r3, r2
 800927c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	69fa      	ldr	r2, [r7, #28]
 8009284:	429a      	cmp	r2, r3
 8009286:	d101      	bne.n	800928c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800928c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1b2      	bne.n	8009202 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800929c:	6a3b      	ldr	r3, [r7, #32]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3728      	adds	r7, #40	; 0x28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b088      	sub	sp, #32
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80092c2:	69ba      	ldr	r2, [r7, #24]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d911      	bls.n	80092ee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4413      	add	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	6938      	ldr	r0, [r7, #16]
 80092da:	f001 fe25 	bl	800af28 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80092de:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	441a      	add	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80092ec:	e01f      	b.n	800932e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	4413      	add	r3, r2
 80092fa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	6938      	ldr	r0, [r7, #16]
 8009302:	f001 fe11 	bl	800af28 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	4413      	add	r3, r2
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	4619      	mov	r1, r3
 800931e:	6938      	ldr	r0, [r7, #16]
 8009320:	f001 fe02 	bl	800af28 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009324:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	60da      	str	r2, [r3, #12]
}
 800932e:	bf00      	nop
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8009336:	b480      	push	{r7}
 8009338:	b087      	sub	sp, #28
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	429a      	cmp	r2, r3
 8009350:	d808      	bhi.n	8009364 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689a      	ldr	r2, [r3, #8]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	1ad2      	subs	r2, r2, r3
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	4413      	add	r3, r2
 800935e:	3b01      	subs	r3, #1
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	e004      	b.n	800936e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	3b01      	subs	r3, #1
 800936c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800936e:	697b      	ldr	r3, [r7, #20]
}
 8009370:	4618      	mov	r0, r3
 8009372:	371c      	adds	r7, #28
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800937c:	b580      	push	{r7, lr}
 800937e:	b08c      	sub	sp, #48	; 0x30
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8009388:	4b3e      	ldr	r3, [pc, #248]	; (8009484 <SEGGER_RTT_ReadNoLock+0x108>)
 800938a:	623b      	str	r3, [r7, #32]
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <SEGGER_RTT_ReadNoLock+0x1e>
 8009396:	f7ff fed1 	bl	800913c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4613      	mov	r3, r2
 800939e:	005b      	lsls	r3, r3, #1
 80093a0:	4413      	add	r3, r2
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	3360      	adds	r3, #96	; 0x60
 80093a6:	4a37      	ldr	r2, [pc, #220]	; (8009484 <SEGGER_RTT_ReadNoLock+0x108>)
 80093a8:	4413      	add	r3, r2
 80093aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80093bc:	2300      	movs	r3, #0
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80093c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d92b      	bls.n	8009420 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4293      	cmp	r3, r2
 80093d8:	bf28      	it	cs
 80093da:	4613      	movcs	r3, r2
 80093dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	4413      	add	r3, r2
 80093e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	6939      	ldr	r1, [r7, #16]
 80093ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093ee:	f001 fd9b 	bl	800af28 <memcpy>
    NumBytesRead += NumBytesRem;
 80093f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	4413      	add	r3, r2
 80093f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80093fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	4413      	add	r3, r2
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800940a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	4413      	add	r3, r2
 8009410:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009418:	429a      	cmp	r2, r3
 800941a:	d101      	bne.n	8009420 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800941c:	2300      	movs	r3, #0
 800941e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4293      	cmp	r3, r2
 800942e:	bf28      	it	cs
 8009430:	4613      	movcs	r3, r2
 8009432:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d019      	beq.n	800946e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	4413      	add	r3, r2
 8009442:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	6939      	ldr	r1, [r7, #16]
 8009448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800944a:	f001 fd6d 	bl	800af28 <memcpy>
    NumBytesRead += NumBytesRem;
 800944e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	4413      	add	r3, r2
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8009456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	4413      	add	r3, r2
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	4413      	add	r3, r2
 800946c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009478:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800947c:	4618      	mov	r0, r3
 800947e:	3730      	adds	r7, #48	; 0x30
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	2001300c 	.word	0x2001300c

08009488 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	4613      	mov	r3, r2
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	4413      	add	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4a1f      	ldr	r2, [pc, #124]	; (8009524 <SEGGER_RTT_WriteNoLock+0x9c>)
 80094a6:	4413      	add	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d029      	beq.n	8009506 <SEGGER_RTT_WriteNoLock+0x7e>
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d82e      	bhi.n	8009514 <SEGGER_RTT_WriteNoLock+0x8c>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <SEGGER_RTT_WriteNoLock+0x38>
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d013      	beq.n	80094e6 <SEGGER_RTT_WriteNoLock+0x5e>
 80094be:	e029      	b.n	8009514 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80094c0:	6978      	ldr	r0, [r7, #20]
 80094c2:	f7ff ff38 	bl	8009336 <_GetAvailWriteSpace>
 80094c6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d202      	bcs.n	80094d6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80094d4:	e021      	b.n	800951a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	69b9      	ldr	r1, [r7, #24]
 80094de:	6978      	ldr	r0, [r7, #20]
 80094e0:	f7ff fee1 	bl	80092a6 <_WriteNoCheck>
    break;
 80094e4:	e019      	b.n	800951a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80094e6:	6978      	ldr	r0, [r7, #20]
 80094e8:	f7ff ff25 	bl	8009336 <_GetAvailWriteSpace>
 80094ec:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	4293      	cmp	r3, r2
 80094f4:	bf28      	it	cs
 80094f6:	4613      	movcs	r3, r2
 80094f8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	69b9      	ldr	r1, [r7, #24]
 80094fe:	6978      	ldr	r0, [r7, #20]
 8009500:	f7ff fed1 	bl	80092a6 <_WriteNoCheck>
    break;
 8009504:	e009      	b.n	800951a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	69b9      	ldr	r1, [r7, #24]
 800950a:	6978      	ldr	r0, [r7, #20]
 800950c:	f7ff fe6e 	bl	80091ec <_WriteBlocking>
 8009510:	61f8      	str	r0, [r7, #28]
    break;
 8009512:	e002      	b.n	800951a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009514:	2300      	movs	r3, #0
 8009516:	61fb      	str	r3, [r7, #28]
    break;
 8009518:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800951a:	69fb      	ldr	r3, [r7, #28]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3720      	adds	r7, #32
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	2001300c 	.word	0x2001300c

08009528 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009534:	4b0e      	ldr	r3, [pc, #56]	; (8009570 <SEGGER_RTT_Write+0x48>)
 8009536:	61fb      	str	r3, [r7, #28]
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <SEGGER_RTT_Write+0x1e>
 8009542:	f7ff fdfb 	bl	800913c <_DoInit>
  SEGGER_RTT_LOCK();
 8009546:	f3ef 8311 	mrs	r3, BASEPRI
 800954a:	f04f 0120 	mov.w	r1, #32
 800954e:	f381 8811 	msr	BASEPRI, r1
 8009552:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	68b9      	ldr	r1, [r7, #8]
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7ff ff95 	bl	8009488 <SEGGER_RTT_WriteNoLock>
 800955e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8009566:	697b      	ldr	r3, [r7, #20]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3720      	adds	r7, #32
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	2001300c 	.word	0x2001300c

08009574 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009574:	b580      	push	{r7, lr}
 8009576:	b088      	sub	sp, #32
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
 8009580:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8009582:	4b3d      	ldr	r3, [pc, #244]	; (8009678 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009584:	61bb      	str	r3, [r7, #24]
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <SEGGER_RTT_AllocUpBuffer+0x20>
 8009590:	f7ff fdd4 	bl	800913c <_DoInit>
  SEGGER_RTT_LOCK();
 8009594:	f3ef 8311 	mrs	r3, BASEPRI
 8009598:	f04f 0120 	mov.w	r1, #32
 800959c:	f381 8811 	msr	BASEPRI, r1
 80095a0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80095a2:	4b35      	ldr	r3, [pc, #212]	; (8009678 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80095a4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80095aa:	6939      	ldr	r1, [r7, #16]
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	4613      	mov	r3, r2
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	4413      	add	r3, r2
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	440b      	add	r3, r1
 80095ba:	3304      	adds	r3, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d008      	beq.n	80095d4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	3301      	adds	r3, #1
 80095c6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	dbeb      	blt.n	80095aa <SEGGER_RTT_AllocUpBuffer+0x36>
 80095d2:	e000      	b.n	80095d6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80095d4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	69fa      	ldr	r2, [r7, #28]
 80095dc:	429a      	cmp	r2, r3
 80095de:	da3f      	bge.n	8009660 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80095e0:	6939      	ldr	r1, [r7, #16]
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	4613      	mov	r3, r2
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	4413      	add	r3, r2
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	440b      	add	r3, r1
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80095f4:	6939      	ldr	r1, [r7, #16]
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	1c5a      	adds	r2, r3, #1
 80095fa:	4613      	mov	r3, r2
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	4413      	add	r3, r2
 8009600:	00db      	lsls	r3, r3, #3
 8009602:	440b      	add	r3, r1
 8009604:	3304      	adds	r3, #4
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800960a:	6939      	ldr	r1, [r7, #16]
 800960c:	69fa      	ldr	r2, [r7, #28]
 800960e:	4613      	mov	r3, r2
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	4413      	add	r3, r2
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	440b      	add	r3, r1
 8009618:	3320      	adds	r3, #32
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800961e:	6939      	ldr	r1, [r7, #16]
 8009620:	69fa      	ldr	r2, [r7, #28]
 8009622:	4613      	mov	r3, r2
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	4413      	add	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	440b      	add	r3, r1
 800962c:	3328      	adds	r3, #40	; 0x28
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8009632:	6939      	ldr	r1, [r7, #16]
 8009634:	69fa      	ldr	r2, [r7, #28]
 8009636:	4613      	mov	r3, r2
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	4413      	add	r3, r2
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	440b      	add	r3, r1
 8009640:	3324      	adds	r3, #36	; 0x24
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8009646:	6939      	ldr	r1, [r7, #16]
 8009648:	69fa      	ldr	r2, [r7, #28]
 800964a:	4613      	mov	r3, r2
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	4413      	add	r3, r2
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	440b      	add	r3, r1
 8009654:	332c      	adds	r3, #44	; 0x2c
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800965a:	f3bf 8f5f 	dmb	sy
 800965e:	e002      	b.n	8009666 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8009660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009664:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800966c:	69fb      	ldr	r3, [r7, #28]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3720      	adds	r7, #32
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	2001300c 	.word	0x2001300c

0800967c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800967c:	b580      	push	{r7, lr}
 800967e:	b088      	sub	sp, #32
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800968a:	4b33      	ldr	r3, [pc, #204]	; (8009758 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800968c:	61bb      	str	r3, [r7, #24]
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8009698:	f7ff fd50 	bl	800913c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800969c:	4b2e      	ldr	r3, [pc, #184]	; (8009758 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800969e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	461a      	mov	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d24d      	bcs.n	8009748 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80096ac:	f3ef 8311 	mrs	r3, BASEPRI
 80096b0:	f04f 0120 	mov.w	r1, #32
 80096b4:	f381 8811 	msr	BASEPRI, r1
 80096b8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d031      	beq.n	8009724 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80096c0:	6979      	ldr	r1, [r7, #20]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	4613      	mov	r3, r2
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	4413      	add	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	440b      	add	r3, r1
 80096ce:	3360      	adds	r3, #96	; 0x60
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80096d4:	6979      	ldr	r1, [r7, #20]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	4613      	mov	r3, r2
 80096da:	005b      	lsls	r3, r3, #1
 80096dc:	4413      	add	r3, r2
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	440b      	add	r3, r1
 80096e2:	3364      	adds	r3, #100	; 0x64
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80096e8:	6979      	ldr	r1, [r7, #20]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4613      	mov	r3, r2
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	4413      	add	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	440b      	add	r3, r1
 80096f6:	3368      	adds	r3, #104	; 0x68
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80096fc:	6979      	ldr	r1, [r7, #20]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4613      	mov	r3, r2
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	4413      	add	r3, r2
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	440b      	add	r3, r1
 800970a:	3370      	adds	r3, #112	; 0x70
 800970c:	2200      	movs	r2, #0
 800970e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8009710:	6979      	ldr	r1, [r7, #20]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	4613      	mov	r3, r2
 8009716:	005b      	lsls	r3, r3, #1
 8009718:	4413      	add	r3, r2
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	440b      	add	r3, r1
 800971e:	336c      	adds	r3, #108	; 0x6c
 8009720:	2200      	movs	r2, #0
 8009722:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8009724:	6979      	ldr	r1, [r7, #20]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4613      	mov	r3, r2
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	4413      	add	r3, r2
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	440b      	add	r3, r1
 8009732:	3374      	adds	r3, #116	; 0x74
 8009734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009736:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009738:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009742:	2300      	movs	r3, #0
 8009744:	61fb      	str	r3, [r7, #28]
 8009746:	e002      	b.n	800974e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8009748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800974c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800974e:	69fb      	ldr	r3, [r7, #28]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3720      	adds	r7, #32
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	2001300c 	.word	0x2001300c

0800975c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800975c:	b480      	push	{r7}
 800975e:	b087      	sub	sp, #28
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800976c:	e002      	b.n	8009774 <_EncodeStr+0x18>
    Len++;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	3301      	adds	r3, #1
 8009772:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	4413      	add	r3, r2
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1f6      	bne.n	800976e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d901      	bls.n	800978c <_EncodeStr+0x30>
    Len = Limit;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2bfe      	cmp	r3, #254	; 0xfe
 8009790:	d806      	bhi.n	80097a0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	60fa      	str	r2, [r7, #12]
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	b2d2      	uxtb	r2, r2
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	e011      	b.n	80097c4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	60fa      	str	r2, [r7, #12]
 80097a6:	22ff      	movs	r2, #255	; 0xff
 80097a8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	60fa      	str	r2, [r7, #12]
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	b2d2      	uxtb	r2, r2
 80097b4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	0a19      	lsrs	r1, r3, #8
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	60fa      	str	r2, [r7, #12]
 80097c0:	b2ca      	uxtb	r2, r1
 80097c2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80097c8:	e00a      	b.n	80097e0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	1c53      	adds	r3, r2, #1
 80097ce:	60bb      	str	r3, [r7, #8]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	1c59      	adds	r1, r3, #1
 80097d4:	60f9      	str	r1, [r7, #12]
 80097d6:	7812      	ldrb	r2, [r2, #0]
 80097d8:	701a      	strb	r2, [r3, #0]
    n++;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	3301      	adds	r3, #1
 80097de:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d3f0      	bcc.n	80097ca <_EncodeStr+0x6e>
  }
  return pPayload;
 80097e8:	68fb      	ldr	r3, [r7, #12]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3304      	adds	r3, #4
}
 8009802:	4618      	mov	r0, r3
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
	...

08009810 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009816:	4b36      	ldr	r3, [pc, #216]	; (80098f0 <_HandleIncomingPacket+0xe0>)
 8009818:	7e1b      	ldrb	r3, [r3, #24]
 800981a:	4618      	mov	r0, r3
 800981c:	1cfb      	adds	r3, r7, #3
 800981e:	2201      	movs	r2, #1
 8009820:	4619      	mov	r1, r3
 8009822:	f7ff fdab 	bl	800937c <SEGGER_RTT_ReadNoLock>
 8009826:	4603      	mov	r3, r0
 8009828:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	dd54      	ble.n	80098da <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	2b80      	cmp	r3, #128	; 0x80
 8009834:	d032      	beq.n	800989c <_HandleIncomingPacket+0x8c>
 8009836:	2b80      	cmp	r3, #128	; 0x80
 8009838:	dc42      	bgt.n	80098c0 <_HandleIncomingPacket+0xb0>
 800983a:	2b07      	cmp	r3, #7
 800983c:	dc16      	bgt.n	800986c <_HandleIncomingPacket+0x5c>
 800983e:	2b00      	cmp	r3, #0
 8009840:	dd3e      	ble.n	80098c0 <_HandleIncomingPacket+0xb0>
 8009842:	3b01      	subs	r3, #1
 8009844:	2b06      	cmp	r3, #6
 8009846:	d83b      	bhi.n	80098c0 <_HandleIncomingPacket+0xb0>
 8009848:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <_HandleIncomingPacket+0x40>)
 800984a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984e:	bf00      	nop
 8009850:	08009873 	.word	0x08009873
 8009854:	08009879 	.word	0x08009879
 8009858:	0800987f 	.word	0x0800987f
 800985c:	08009885 	.word	0x08009885
 8009860:	0800988b 	.word	0x0800988b
 8009864:	08009891 	.word	0x08009891
 8009868:	08009897 	.word	0x08009897
 800986c:	2b7f      	cmp	r3, #127	; 0x7f
 800986e:	d036      	beq.n	80098de <_HandleIncomingPacket+0xce>
 8009870:	e026      	b.n	80098c0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8009872:	f000 fa9f 	bl	8009db4 <SEGGER_SYSVIEW_Start>
      break;
 8009876:	e037      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009878:	f000 fb56 	bl	8009f28 <SEGGER_SYSVIEW_Stop>
      break;
 800987c:	e034      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800987e:	f000 fd2f 	bl	800a2e0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8009882:	e031      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009884:	f000 fcf4 	bl	800a270 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009888:	e02e      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800988a:	f000 fb73 	bl	8009f74 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800988e:	e02b      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009890:	f000 ff52 	bl	800a738 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009894:	e028      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8009896:	f000 ff31 	bl	800a6fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800989a:	e025      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800989c:	4b14      	ldr	r3, [pc, #80]	; (80098f0 <_HandleIncomingPacket+0xe0>)
 800989e:	7e1b      	ldrb	r3, [r3, #24]
 80098a0:	4618      	mov	r0, r3
 80098a2:	1cfb      	adds	r3, r7, #3
 80098a4:	2201      	movs	r2, #1
 80098a6:	4619      	mov	r1, r3
 80098a8:	f7ff fd68 	bl	800937c <SEGGER_RTT_ReadNoLock>
 80098ac:	4603      	mov	r3, r0
 80098ae:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dd15      	ble.n	80098e2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fe9f 	bl	800a5fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80098be:	e010      	b.n	80098e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	b25b      	sxtb	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	da0e      	bge.n	80098e6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80098c8:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <_HandleIncomingPacket+0xe0>)
 80098ca:	7e1b      	ldrb	r3, [r3, #24]
 80098cc:	4618      	mov	r0, r3
 80098ce:	1cfb      	adds	r3, r7, #3
 80098d0:	2201      	movs	r2, #1
 80098d2:	4619      	mov	r1, r3
 80098d4:	f7ff fd52 	bl	800937c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80098d8:	e005      	b.n	80098e6 <_HandleIncomingPacket+0xd6>
    }
  }
 80098da:	bf00      	nop
 80098dc:	e004      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
      break;
 80098de:	bf00      	nop
 80098e0:	e002      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
      break;
 80098e2:	bf00      	nop
 80098e4:	e000      	b.n	80098e8 <_HandleIncomingPacket+0xd8>
      break;
 80098e6:	bf00      	nop
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	200144cc 	.word	0x200144cc

080098f4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08c      	sub	sp, #48	; 0x30
 80098f8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80098fa:	2301      	movs	r3, #1
 80098fc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80098fe:	1d3b      	adds	r3, r7, #4
 8009900:	3301      	adds	r3, #1
 8009902:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009908:	4b31      	ldr	r3, [pc, #196]	; (80099d0 <_TrySendOverflowPacket+0xdc>)
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	62bb      	str	r3, [r7, #40]	; 0x28
 800990e:	e00b      	b.n	8009928 <_TrySendOverflowPacket+0x34>
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	b2da      	uxtb	r2, r3
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	1c59      	adds	r1, r3, #1
 8009918:	62f9      	str	r1, [r7, #44]	; 0x2c
 800991a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	701a      	strb	r2, [r3, #0]
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	09db      	lsrs	r3, r3, #7
 8009926:	62bb      	str	r3, [r7, #40]	; 0x28
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	2b7f      	cmp	r3, #127	; 0x7f
 800992c:	d8f0      	bhi.n	8009910 <_TrySendOverflowPacket+0x1c>
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800993e:	4b25      	ldr	r3, [pc, #148]	; (80099d4 <_TrySendOverflowPacket+0xe0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009944:	4b22      	ldr	r3, [pc, #136]	; (80099d0 <_TrySendOverflowPacket+0xdc>)
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	69ba      	ldr	r2, [r7, #24]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	627b      	str	r3, [r7, #36]	; 0x24
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	623b      	str	r3, [r7, #32]
 8009956:	e00b      	b.n	8009970 <_TrySendOverflowPacket+0x7c>
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	b2da      	uxtb	r2, r3
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	1c59      	adds	r1, r3, #1
 8009960:	6279      	str	r1, [r7, #36]	; 0x24
 8009962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009966:	b2d2      	uxtb	r2, r2
 8009968:	701a      	strb	r2, [r3, #0]
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	09db      	lsrs	r3, r3, #7
 800996e:	623b      	str	r3, [r7, #32]
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	2b7f      	cmp	r3, #127	; 0x7f
 8009974:	d8f0      	bhi.n	8009958 <_TrySendOverflowPacket+0x64>
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	627a      	str	r2, [r7, #36]	; 0x24
 800997c:	6a3a      	ldr	r2, [r7, #32]
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8009986:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <_TrySendOverflowPacket+0xdc>)
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	4618      	mov	r0, r3
 800998c:	1d3b      	adds	r3, r7, #4
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	461a      	mov	r2, r3
 8009994:	1d3b      	adds	r3, r7, #4
 8009996:	4619      	mov	r1, r3
 8009998:	f7f6 fc22 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800999c:	4603      	mov	r3, r0
 800999e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d009      	beq.n	80099ba <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80099a6:	4a0a      	ldr	r2, [pc, #40]	; (80099d0 <_TrySendOverflowPacket+0xdc>)
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80099ac:	4b08      	ldr	r3, [pc, #32]	; (80099d0 <_TrySendOverflowPacket+0xdc>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <_TrySendOverflowPacket+0xdc>)
 80099b6:	701a      	strb	r2, [r3, #0]
 80099b8:	e004      	b.n	80099c4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <_TrySendOverflowPacket+0xdc>)
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	3301      	adds	r3, #1
 80099c0:	4a03      	ldr	r2, [pc, #12]	; (80099d0 <_TrySendOverflowPacket+0xdc>)
 80099c2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80099c4:	693b      	ldr	r3, [r7, #16]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3730      	adds	r7, #48	; 0x30
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	200144cc 	.word	0x200144cc
 80099d4:	e0001004 	.word	0xe0001004

080099d8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08a      	sub	sp, #40	; 0x28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80099e4:	4b6c      	ldr	r3, [pc, #432]	; (8009b98 <_SendPacket+0x1c0>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d010      	beq.n	8009a0e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80099ec:	4b6a      	ldr	r3, [pc, #424]	; (8009b98 <_SendPacket+0x1c0>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 80a3 	beq.w	8009b3c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80099f6:	4b68      	ldr	r3, [pc, #416]	; (8009b98 <_SendPacket+0x1c0>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d109      	bne.n	8009a12 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80099fe:	f7ff ff79 	bl	80098f4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8009a02:	4b65      	ldr	r3, [pc, #404]	; (8009b98 <_SendPacket+0x1c0>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	f040 809a 	bne.w	8009b40 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8009a0c:	e001      	b.n	8009a12 <_SendPacket+0x3a>
    goto Send;
 8009a0e:	bf00      	nop
 8009a10:	e000      	b.n	8009a14 <_SendPacket+0x3c>
Send:
 8009a12:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b1f      	cmp	r3, #31
 8009a18:	d809      	bhi.n	8009a2e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8009a1a:	4b5f      	ldr	r3, [pc, #380]	; (8009b98 <_SendPacket+0x1c0>)
 8009a1c:	69da      	ldr	r2, [r3, #28]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	fa22 f303 	lsr.w	r3, r2, r3
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f040 808b 	bne.w	8009b44 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b17      	cmp	r3, #23
 8009a32:	d807      	bhi.n	8009a44 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	60fb      	str	r3, [r7, #12]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	e03d      	b.n	8009ac0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8009a50:	d912      	bls.n	8009a78 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	09da      	lsrs	r2, r3, #7
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	b2d2      	uxtb	r2, r2
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	3a01      	subs	r2, #1
 8009a6a:	60fa      	str	r2, [r7, #12]
 8009a6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	701a      	strb	r2, [r3, #0]
 8009a76:	e006      	b.n	8009a86 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b7f      	cmp	r3, #127	; 0x7f
 8009a8a:	d912      	bls.n	8009ab2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	09da      	lsrs	r2, r3, #7
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3b01      	subs	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	b2d2      	uxtb	r2, r2
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	3a01      	subs	r2, #1
 8009aa4:	60fa      	str	r2, [r7, #12]
 8009aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	701a      	strb	r2, [r3, #0]
 8009ab0:	e006      	b.n	8009ac0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009ac0:	4b36      	ldr	r3, [pc, #216]	; (8009b9c <_SendPacket+0x1c4>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009ac6:	4b34      	ldr	r3, [pc, #208]	; (8009b98 <_SendPacket+0x1c0>)
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	623b      	str	r3, [r7, #32]
 8009ad8:	e00b      	b.n	8009af2 <_SendPacket+0x11a>
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	1c59      	adds	r1, r3, #1
 8009ae2:	6279      	str	r1, [r7, #36]	; 0x24
 8009ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ae8:	b2d2      	uxtb	r2, r2
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	09db      	lsrs	r3, r3, #7
 8009af0:	623b      	str	r3, [r7, #32]
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	2b7f      	cmp	r3, #127	; 0x7f
 8009af6:	d8f0      	bhi.n	8009ada <_SendPacket+0x102>
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	627a      	str	r2, [r7, #36]	; 0x24
 8009afe:	6a3a      	ldr	r2, [r7, #32]
 8009b00:	b2d2      	uxtb	r2, r2
 8009b02:	701a      	strb	r2, [r3, #0]
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8009b08:	4b23      	ldr	r3, [pc, #140]	; (8009b98 <_SendPacket+0x1c0>)
 8009b0a:	785b      	ldrb	r3, [r3, #1]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	461a      	mov	r2, r3
 8009b16:	68f9      	ldr	r1, [r7, #12]
 8009b18:	f7f6 fb62 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009b26:	4a1c      	ldr	r2, [pc, #112]	; (8009b98 <_SendPacket+0x1c0>)
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	60d3      	str	r3, [r2, #12]
 8009b2c:	e00b      	b.n	8009b46 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009b2e:	4b1a      	ldr	r3, [pc, #104]	; (8009b98 <_SendPacket+0x1c0>)
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	3301      	adds	r3, #1
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	4b18      	ldr	r3, [pc, #96]	; (8009b98 <_SendPacket+0x1c0>)
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	e004      	b.n	8009b46 <_SendPacket+0x16e>
    goto SendDone;
 8009b3c:	bf00      	nop
 8009b3e:	e002      	b.n	8009b46 <_SendPacket+0x16e>
      goto SendDone;
 8009b40:	bf00      	nop
 8009b42:	e000      	b.n	8009b46 <_SendPacket+0x16e>
      goto SendDone;
 8009b44:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8009b46:	4b14      	ldr	r3, [pc, #80]	; (8009b98 <_SendPacket+0x1c0>)
 8009b48:	7e1b      	ldrb	r3, [r3, #24]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4a14      	ldr	r2, [pc, #80]	; (8009ba0 <_SendPacket+0x1c8>)
 8009b4e:	460b      	mov	r3, r1
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	440b      	add	r3, r1
 8009b54:	00db      	lsls	r3, r3, #3
 8009b56:	4413      	add	r3, r2
 8009b58:	336c      	adds	r3, #108	; 0x6c
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	4b0e      	ldr	r3, [pc, #56]	; (8009b98 <_SendPacket+0x1c0>)
 8009b5e:	7e1b      	ldrb	r3, [r3, #24]
 8009b60:	4618      	mov	r0, r3
 8009b62:	490f      	ldr	r1, [pc, #60]	; (8009ba0 <_SendPacket+0x1c8>)
 8009b64:	4603      	mov	r3, r0
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	4403      	add	r3, r0
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	440b      	add	r3, r1
 8009b6e:	3370      	adds	r3, #112	; 0x70
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d00b      	beq.n	8009b8e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009b76:	4b08      	ldr	r3, [pc, #32]	; (8009b98 <_SendPacket+0x1c0>)
 8009b78:	789b      	ldrb	r3, [r3, #2]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d107      	bne.n	8009b8e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8009b7e:	4b06      	ldr	r3, [pc, #24]	; (8009b98 <_SendPacket+0x1c0>)
 8009b80:	2201      	movs	r2, #1
 8009b82:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009b84:	f7ff fe44 	bl	8009810 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009b88:	4b03      	ldr	r3, [pc, #12]	; (8009b98 <_SendPacket+0x1c0>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8009b8e:	bf00      	nop
 8009b90:	3728      	adds	r7, #40	; 0x28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	200144cc 	.word	0x200144cc
 8009b9c:	e0001004 	.word	0xe0001004
 8009ba0:	2001300c 	.word	0x2001300c

08009ba4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af02      	add	r7, sp, #8
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009bb8:	4917      	ldr	r1, [pc, #92]	; (8009c18 <SEGGER_SYSVIEW_Init+0x74>)
 8009bba:	4818      	ldr	r0, [pc, #96]	; (8009c1c <SEGGER_SYSVIEW_Init+0x78>)
 8009bbc:	f7ff fcda 	bl	8009574 <SEGGER_RTT_AllocUpBuffer>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	4b16      	ldr	r3, [pc, #88]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009bc6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009bc8:	4b15      	ldr	r3, [pc, #84]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009bca:	785a      	ldrb	r2, [r3, #1]
 8009bcc:	4b14      	ldr	r3, [pc, #80]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009bce:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009bd0:	4b13      	ldr	r3, [pc, #76]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009bd2:	7e1b      	ldrb	r3, [r3, #24]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	2308      	movs	r3, #8
 8009bdc:	4a11      	ldr	r2, [pc, #68]	; (8009c24 <SEGGER_SYSVIEW_Init+0x80>)
 8009bde:	490f      	ldr	r1, [pc, #60]	; (8009c1c <SEGGER_SYSVIEW_Init+0x78>)
 8009be0:	f7ff fd4c 	bl	800967c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8009be4:	4b0e      	ldr	r3, [pc, #56]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009bea:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <SEGGER_SYSVIEW_Init+0x84>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a0c      	ldr	r2, [pc, #48]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009bf0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8009bf2:	4a0b      	ldr	r2, [pc, #44]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8009bf8:	4a09      	ldr	r2, [pc, #36]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009bfe:	4a08      	ldr	r2, [pc, #32]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8009c04:	4a06      	ldr	r2, [pc, #24]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8009c0a:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <SEGGER_SYSVIEW_Init+0x7c>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009c10:	bf00      	nop
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	200134c4 	.word	0x200134c4
 8009c1c:	0800ba40 	.word	0x0800ba40
 8009c20:	200144cc 	.word	0x200144cc
 8009c24:	200144c4 	.word	0x200144c4
 8009c28:	e0001004 	.word	0xe0001004

08009c2c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8009c34:	4a04      	ldr	r2, [pc, #16]	; (8009c48 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6113      	str	r3, [r2, #16]
}
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	200144cc 	.word	0x200144cc

08009c4c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009c54:	f3ef 8311 	mrs	r3, BASEPRI
 8009c58:	f04f 0120 	mov.w	r1, #32
 8009c5c:	f381 8811 	msr	BASEPRI, r1
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	4808      	ldr	r0, [pc, #32]	; (8009c84 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8009c64:	f7ff fdc7 	bl	80097f6 <_PreparePacket>
 8009c68:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	68b9      	ldr	r1, [r7, #8]
 8009c6e:	68b8      	ldr	r0, [r7, #8]
 8009c70:	f7ff feb2 	bl	80099d8 <_SendPacket>
  RECORD_END();
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f383 8811 	msr	BASEPRI, r3
}
 8009c7a:	bf00      	nop
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200144fc 	.word	0x200144fc

08009c88 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009c92:	f3ef 8311 	mrs	r3, BASEPRI
 8009c96:	f04f 0120 	mov.w	r1, #32
 8009c9a:	f381 8811 	msr	BASEPRI, r1
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	4816      	ldr	r0, [pc, #88]	; (8009cfc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8009ca2:	f7ff fda8 	bl	80097f6 <_PreparePacket>
 8009ca6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	61fb      	str	r3, [r7, #28]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	e00b      	b.n	8009cce <SEGGER_SYSVIEW_RecordU32+0x46>
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	1c59      	adds	r1, r3, #1
 8009cbe:	61f9      	str	r1, [r7, #28]
 8009cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009cc4:	b2d2      	uxtb	r2, r2
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	09db      	lsrs	r3, r3, #7
 8009ccc:	61bb      	str	r3, [r7, #24]
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8009cd2:	d8f0      	bhi.n	8009cb6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	61fa      	str	r2, [r7, #28]
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	b2d2      	uxtb	r2, r2
 8009cde:	701a      	strb	r2, [r3, #0]
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	68f9      	ldr	r1, [r7, #12]
 8009ce8:	6938      	ldr	r0, [r7, #16]
 8009cea:	f7ff fe75 	bl	80099d8 <_SendPacket>
  RECORD_END();
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f383 8811 	msr	BASEPRI, r3
}
 8009cf4:	bf00      	nop
 8009cf6:	3720      	adds	r7, #32
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	200144fc 	.word	0x200144fc

08009d00 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08c      	sub	sp, #48	; 0x30
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8009d10:	f04f 0120 	mov.w	r1, #32
 8009d14:	f381 8811 	msr	BASEPRI, r1
 8009d18:	61fb      	str	r3, [r7, #28]
 8009d1a:	4825      	ldr	r0, [pc, #148]	; (8009db0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009d1c:	f7ff fd6b 	bl	80097f6 <_PreparePacket>
 8009d20:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d2e:	e00b      	b.n	8009d48 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d36:	1c59      	adds	r1, r3, #1
 8009d38:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d3e:	b2d2      	uxtb	r2, r2
 8009d40:	701a      	strb	r2, [r3, #0]
 8009d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d44:	09db      	lsrs	r3, r3, #7
 8009d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d4c:	d8f0      	bhi.n	8009d30 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	701a      	strb	r2, [r3, #0]
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	623b      	str	r3, [r7, #32]
 8009d66:	e00b      	b.n	8009d80 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	1c59      	adds	r1, r3, #1
 8009d70:	6279      	str	r1, [r7, #36]	; 0x24
 8009d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	09db      	lsrs	r3, r3, #7
 8009d7e:	623b      	str	r3, [r7, #32]
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	2b7f      	cmp	r3, #127	; 0x7f
 8009d84:	d8f0      	bhi.n	8009d68 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	627a      	str	r2, [r7, #36]	; 0x24
 8009d8c:	6a3a      	ldr	r2, [r7, #32]
 8009d8e:	b2d2      	uxtb	r2, r2
 8009d90:	701a      	strb	r2, [r3, #0]
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	6979      	ldr	r1, [r7, #20]
 8009d9a:	69b8      	ldr	r0, [r7, #24]
 8009d9c:	f7ff fe1c 	bl	80099d8 <_SendPacket>
  RECORD_END();
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	f383 8811 	msr	BASEPRI, r3
}
 8009da6:	bf00      	nop
 8009da8:	3730      	adds	r7, #48	; 0x30
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	200144fc 	.word	0x200144fc

08009db4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08c      	sub	sp, #48	; 0x30
 8009db8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8009dba:	4b58      	ldr	r3, [pc, #352]	; (8009f1c <SEGGER_SYSVIEW_Start+0x168>)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8009dc4:	f04f 0120 	mov.w	r1, #32
 8009dc8:	f381 8811 	msr	BASEPRI, r1
 8009dcc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009dce:	4b53      	ldr	r3, [pc, #332]	; (8009f1c <SEGGER_SYSVIEW_Start+0x168>)
 8009dd0:	785b      	ldrb	r3, [r3, #1]
 8009dd2:	220a      	movs	r2, #10
 8009dd4:	4952      	ldr	r1, [pc, #328]	; (8009f20 <SEGGER_SYSVIEW_Start+0x16c>)
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7f6 fa02 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009de2:	200a      	movs	r0, #10
 8009de4:	f7ff ff32 	bl	8009c4c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009de8:	f3ef 8311 	mrs	r3, BASEPRI
 8009dec:	f04f 0120 	mov.w	r1, #32
 8009df0:	f381 8811 	msr	BASEPRI, r1
 8009df4:	60bb      	str	r3, [r7, #8]
 8009df6:	484b      	ldr	r0, [pc, #300]	; (8009f24 <SEGGER_SYSVIEW_Start+0x170>)
 8009df8:	f7ff fcfd 	bl	80097f6 <_PreparePacket>
 8009dfc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e06:	4b45      	ldr	r3, [pc, #276]	; (8009f1c <SEGGER_SYSVIEW_Start+0x168>)
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e0c:	e00b      	b.n	8009e26 <SEGGER_SYSVIEW_Start+0x72>
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	1c59      	adds	r1, r3, #1
 8009e16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e1c:	b2d2      	uxtb	r2, r2
 8009e1e:	701a      	strb	r2, [r3, #0]
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	09db      	lsrs	r3, r3, #7
 8009e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	2b7f      	cmp	r3, #127	; 0x7f
 8009e2a:	d8f0      	bhi.n	8009e0e <SEGGER_SYSVIEW_Start+0x5a>
 8009e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e34:	b2d2      	uxtb	r2, r2
 8009e36:	701a      	strb	r2, [r3, #0]
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e40:	4b36      	ldr	r3, [pc, #216]	; (8009f1c <SEGGER_SYSVIEW_Start+0x168>)
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	623b      	str	r3, [r7, #32]
 8009e46:	e00b      	b.n	8009e60 <SEGGER_SYSVIEW_Start+0xac>
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	1c59      	adds	r1, r3, #1
 8009e50:	6279      	str	r1, [r7, #36]	; 0x24
 8009e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e56:	b2d2      	uxtb	r2, r2
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	09db      	lsrs	r3, r3, #7
 8009e5e:	623b      	str	r3, [r7, #32]
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	2b7f      	cmp	r3, #127	; 0x7f
 8009e64:	d8f0      	bhi.n	8009e48 <SEGGER_SYSVIEW_Start+0x94>
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	627a      	str	r2, [r7, #36]	; 0x24
 8009e6c:	6a3a      	ldr	r2, [r7, #32]
 8009e6e:	b2d2      	uxtb	r2, r2
 8009e70:	701a      	strb	r2, [r3, #0]
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	4b28      	ldr	r3, [pc, #160]	; (8009f1c <SEGGER_SYSVIEW_Start+0x168>)
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	61bb      	str	r3, [r7, #24]
 8009e80:	e00b      	b.n	8009e9a <SEGGER_SYSVIEW_Start+0xe6>
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	1c59      	adds	r1, r3, #1
 8009e8a:	61f9      	str	r1, [r7, #28]
 8009e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e90:	b2d2      	uxtb	r2, r2
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	09db      	lsrs	r3, r3, #7
 8009e98:	61bb      	str	r3, [r7, #24]
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8009e9e:	d8f0      	bhi.n	8009e82 <SEGGER_SYSVIEW_Start+0xce>
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	61fa      	str	r2, [r7, #28]
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	b2d2      	uxtb	r2, r2
 8009eaa:	701a      	strb	r2, [r3, #0]
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	613b      	str	r3, [r7, #16]
 8009eb8:	e00b      	b.n	8009ed2 <SEGGER_SYSVIEW_Start+0x11e>
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	1c59      	adds	r1, r3, #1
 8009ec2:	6179      	str	r1, [r7, #20]
 8009ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ec8:	b2d2      	uxtb	r2, r2
 8009eca:	701a      	strb	r2, [r3, #0]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	09db      	lsrs	r3, r3, #7
 8009ed0:	613b      	str	r3, [r7, #16]
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ed6:	d8f0      	bhi.n	8009eba <SEGGER_SYSVIEW_Start+0x106>
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	617a      	str	r2, [r7, #20]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	701a      	strb	r2, [r3, #0]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009ee8:	2218      	movs	r2, #24
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff fd73 	bl	80099d8 <_SendPacket>
      RECORD_END();
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009ef8:	4b08      	ldr	r3, [pc, #32]	; (8009f1c <SEGGER_SYSVIEW_Start+0x168>)
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009f00:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <SEGGER_SYSVIEW_Start+0x168>)
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009f06:	f000 f9eb 	bl	800a2e0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009f0a:	f000 f9b1 	bl	800a270 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009f0e:	f000 fc13 	bl	800a738 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009f12:	bf00      	nop
 8009f14:	3730      	adds	r7, #48	; 0x30
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200144cc 	.word	0x200144cc
 8009f20:	0800ba68 	.word	0x0800ba68
 8009f24:	200144fc 	.word	0x200144fc

08009f28 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8009f32:	f04f 0120 	mov.w	r1, #32
 8009f36:	f381 8811 	msr	BASEPRI, r1
 8009f3a:	607b      	str	r3, [r7, #4]
 8009f3c:	480b      	ldr	r0, [pc, #44]	; (8009f6c <SEGGER_SYSVIEW_Stop+0x44>)
 8009f3e:	f7ff fc5a 	bl	80097f6 <_PreparePacket>
 8009f42:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009f44:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <SEGGER_SYSVIEW_Stop+0x48>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d007      	beq.n	8009f5c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009f4c:	220b      	movs	r2, #11
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6838      	ldr	r0, [r7, #0]
 8009f52:	f7ff fd41 	bl	80099d8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009f56:	4b06      	ldr	r3, [pc, #24]	; (8009f70 <SEGGER_SYSVIEW_Stop+0x48>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f383 8811 	msr	BASEPRI, r3
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	200144fc 	.word	0x200144fc
 8009f70:	200144cc 	.word	0x200144cc

08009f74 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08c      	sub	sp, #48	; 0x30
 8009f78:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8009f7e:	f04f 0120 	mov.w	r1, #32
 8009f82:	f381 8811 	msr	BASEPRI, r1
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	4845      	ldr	r0, [pc, #276]	; (800a0a0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009f8a:	f7ff fc34 	bl	80097f6 <_PreparePacket>
 8009f8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f98:	4b42      	ldr	r3, [pc, #264]	; (800a0a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f9e:	e00b      	b.n	8009fb8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa6:	1c59      	adds	r1, r3, #1
 8009fa8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009fae:	b2d2      	uxtb	r2, r2
 8009fb0:	701a      	strb	r2, [r3, #0]
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	09db      	lsrs	r3, r3, #7
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	2b7f      	cmp	r3, #127	; 0x7f
 8009fbc:	d8f0      	bhi.n	8009fa0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc6:	b2d2      	uxtb	r2, r2
 8009fc8:	701a      	strb	r2, [r3, #0]
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fd2:	4b34      	ldr	r3, [pc, #208]	; (800a0a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	623b      	str	r3, [r7, #32]
 8009fd8:	e00b      	b.n	8009ff2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	1c59      	adds	r1, r3, #1
 8009fe2:	6279      	str	r1, [r7, #36]	; 0x24
 8009fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009fe8:	b2d2      	uxtb	r2, r2
 8009fea:	701a      	strb	r2, [r3, #0]
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	09db      	lsrs	r3, r3, #7
 8009ff0:	623b      	str	r3, [r7, #32]
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ff6:	d8f0      	bhi.n	8009fda <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	627a      	str	r2, [r7, #36]	; 0x24
 8009ffe:	6a3a      	ldr	r2, [r7, #32]
 800a000:	b2d2      	uxtb	r2, r2
 800a002:	701a      	strb	r2, [r3, #0]
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	4b25      	ldr	r3, [pc, #148]	; (800a0a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	61bb      	str	r3, [r7, #24]
 800a012:	e00b      	b.n	800a02c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	b2da      	uxtb	r2, r3
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	1c59      	adds	r1, r3, #1
 800a01c:	61f9      	str	r1, [r7, #28]
 800a01e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a022:	b2d2      	uxtb	r2, r2
 800a024:	701a      	strb	r2, [r3, #0]
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	09db      	lsrs	r3, r3, #7
 800a02a:	61bb      	str	r3, [r7, #24]
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	2b7f      	cmp	r3, #127	; 0x7f
 800a030:	d8f0      	bhi.n	800a014 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	1c5a      	adds	r2, r3, #1
 800a036:	61fa      	str	r2, [r7, #28]
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	701a      	strb	r2, [r3, #0]
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	2300      	movs	r3, #0
 800a048:	613b      	str	r3, [r7, #16]
 800a04a:	e00b      	b.n	800a064 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	1c59      	adds	r1, r3, #1
 800a054:	6179      	str	r1, [r7, #20]
 800a056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a05a:	b2d2      	uxtb	r2, r2
 800a05c:	701a      	strb	r2, [r3, #0]
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	09db      	lsrs	r3, r3, #7
 800a062:	613b      	str	r3, [r7, #16]
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2b7f      	cmp	r3, #127	; 0x7f
 800a068:	d8f0      	bhi.n	800a04c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	617a      	str	r2, [r7, #20]
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	b2d2      	uxtb	r2, r2
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a07a:	2218      	movs	r2, #24
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	68b8      	ldr	r0, [r7, #8]
 800a080:	f7ff fcaa 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a08a:	4b06      	ldr	r3, [pc, #24]	; (800a0a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800a092:	4b04      	ldr	r3, [pc, #16]	; (800a0a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	4798      	blx	r3
  }
}
 800a098:	bf00      	nop
 800a09a:	3730      	adds	r7, #48	; 0x30
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	200144fc 	.word	0x200144fc
 800a0a4:	200144cc 	.word	0x200144cc

0800a0a8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b092      	sub	sp, #72	; 0x48
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a0b0:	f3ef 8311 	mrs	r3, BASEPRI
 800a0b4:	f04f 0120 	mov.w	r1, #32
 800a0b8:	f381 8811 	msr	BASEPRI, r1
 800a0bc:	617b      	str	r3, [r7, #20]
 800a0be:	486a      	ldr	r0, [pc, #424]	; (800a268 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a0c0:	f7ff fb99 	bl	80097f6 <_PreparePacket>
 800a0c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	4b66      	ldr	r3, [pc, #408]	; (800a26c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	643b      	str	r3, [r7, #64]	; 0x40
 800a0da:	e00b      	b.n	800a0f4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0e2:	1c59      	adds	r1, r3, #1
 800a0e4:	6479      	str	r1, [r7, #68]	; 0x44
 800a0e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a0ea:	b2d2      	uxtb	r2, r2
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0f0:	09db      	lsrs	r3, r3, #7
 800a0f2:	643b      	str	r3, [r7, #64]	; 0x40
 800a0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a0f8:	d8f0      	bhi.n	800a0dc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a0fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	647a      	str	r2, [r7, #68]	; 0x44
 800a100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a102:	b2d2      	uxtb	r2, r2
 800a104:	701a      	strb	r2, [r3, #0]
 800a106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a108:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	63bb      	str	r3, [r7, #56]	; 0x38
 800a114:	e00b      	b.n	800a12e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a11c:	1c59      	adds	r1, r3, #1
 800a11e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a120:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a124:	b2d2      	uxtb	r2, r2
 800a126:	701a      	strb	r2, [r3, #0]
 800a128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12a:	09db      	lsrs	r3, r3, #7
 800a12c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	2b7f      	cmp	r3, #127	; 0x7f
 800a132:	d8f0      	bhi.n	800a116 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a13a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a13c:	b2d2      	uxtb	r2, r2
 800a13e:	701a      	strb	r2, [r3, #0]
 800a140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a142:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	4619      	mov	r1, r3
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f7ff fb05 	bl	800975c <_EncodeStr>
 800a152:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a154:	2209      	movs	r2, #9
 800a156:	68f9      	ldr	r1, [r7, #12]
 800a158:	6938      	ldr	r0, [r7, #16]
 800a15a:	f7ff fc3d 	bl	80099d8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	637b      	str	r3, [r7, #52]	; 0x34
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	4b40      	ldr	r3, [pc, #256]	; (800a26c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	633b      	str	r3, [r7, #48]	; 0x30
 800a172:	e00b      	b.n	800a18c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a176:	b2da      	uxtb	r2, r3
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	1c59      	adds	r1, r3, #1
 800a17c:	6379      	str	r1, [r7, #52]	; 0x34
 800a17e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	09db      	lsrs	r3, r3, #7
 800a18a:	633b      	str	r3, [r7, #48]	; 0x30
 800a18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18e:	2b7f      	cmp	r3, #127	; 0x7f
 800a190:	d8f0      	bhi.n	800a174 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a194:	1c5a      	adds	r2, r3, #1
 800a196:	637a      	str	r2, [r7, #52]	; 0x34
 800a198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1ac:	e00b      	b.n	800a1c6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	1c59      	adds	r1, r3, #1
 800a1b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a1b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	701a      	strb	r2, [r3, #0]
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	09db      	lsrs	r3, r3, #7
 800a1c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c8:	2b7f      	cmp	r3, #127	; 0x7f
 800a1ca:	d8f0      	bhi.n	800a1ae <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	1c5a      	adds	r2, r3, #1
 800a1d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d4:	b2d2      	uxtb	r2, r2
 800a1d6:	701a      	strb	r2, [r3, #0]
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	627b      	str	r3, [r7, #36]	; 0x24
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	623b      	str	r3, [r7, #32]
 800a1e6:	e00b      	b.n	800a200 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	1c59      	adds	r1, r3, #1
 800a1f0:	6279      	str	r1, [r7, #36]	; 0x24
 800a1f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a1f6:	b2d2      	uxtb	r2, r2
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	09db      	lsrs	r3, r3, #7
 800a1fe:	623b      	str	r3, [r7, #32]
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	2b7f      	cmp	r3, #127	; 0x7f
 800a204:	d8f0      	bhi.n	800a1e8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	627a      	str	r2, [r7, #36]	; 0x24
 800a20c:	6a3a      	ldr	r2, [r7, #32]
 800a20e:	b2d2      	uxtb	r2, r2
 800a210:	701a      	strb	r2, [r3, #0]
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	61fb      	str	r3, [r7, #28]
 800a21a:	2300      	movs	r3, #0
 800a21c:	61bb      	str	r3, [r7, #24]
 800a21e:	e00b      	b.n	800a238 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	b2da      	uxtb	r2, r3
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	1c59      	adds	r1, r3, #1
 800a228:	61f9      	str	r1, [r7, #28]
 800a22a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a22e:	b2d2      	uxtb	r2, r2
 800a230:	701a      	strb	r2, [r3, #0]
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	09db      	lsrs	r3, r3, #7
 800a236:	61bb      	str	r3, [r7, #24]
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	2b7f      	cmp	r3, #127	; 0x7f
 800a23c:	d8f0      	bhi.n	800a220 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	61fa      	str	r2, [r7, #28]
 800a244:	69ba      	ldr	r2, [r7, #24]
 800a246:	b2d2      	uxtb	r2, r2
 800a248:	701a      	strb	r2, [r3, #0]
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a24e:	2215      	movs	r2, #21
 800a250:	68f9      	ldr	r1, [r7, #12]
 800a252:	6938      	ldr	r0, [r7, #16]
 800a254:	f7ff fbc0 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f383 8811 	msr	BASEPRI, r3
}
 800a25e:	bf00      	nop
 800a260:	3748      	adds	r7, #72	; 0x48
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	200144fc 	.word	0x200144fc
 800a26c:	200144cc 	.word	0x200144cc

0800a270 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a274:	4b07      	ldr	r3, [pc, #28]	; (800a294 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d008      	beq.n	800a28e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a27e:	6a1b      	ldr	r3, [r3, #32]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a286:	4b03      	ldr	r3, [pc, #12]	; (800a294 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	4798      	blx	r3
  }
}
 800a28e:	bf00      	nop
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	200144cc 	.word	0x200144cc

0800a298 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a2a0:	f3ef 8311 	mrs	r3, BASEPRI
 800a2a4:	f04f 0120 	mov.w	r1, #32
 800a2a8:	f381 8811 	msr	BASEPRI, r1
 800a2ac:	617b      	str	r3, [r7, #20]
 800a2ae:	480b      	ldr	r0, [pc, #44]	; (800a2dc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a2b0:	f7ff faa1 	bl	80097f6 <_PreparePacket>
 800a2b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a2b6:	2280      	movs	r2, #128	; 0x80
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	6938      	ldr	r0, [r7, #16]
 800a2bc:	f7ff fa4e 	bl	800975c <_EncodeStr>
 800a2c0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a2c2:	220e      	movs	r2, #14
 800a2c4:	68f9      	ldr	r1, [r7, #12]
 800a2c6:	6938      	ldr	r0, [r7, #16]
 800a2c8:	f7ff fb86 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f383 8811 	msr	BASEPRI, r3
}
 800a2d2:	bf00      	nop
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	200144fc 	.word	0x200144fc

0800a2e0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a2e0:	b590      	push	{r4, r7, lr}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a2e6:	4b15      	ldr	r3, [pc, #84]	; (800a33c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d01a      	beq.n	800a324 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d015      	beq.n	800a324 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a2f8:	4b10      	ldr	r3, [pc, #64]	; (800a33c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4798      	blx	r3
 800a300:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a304:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a30a:	f04f 0200 	mov.w	r2, #0
 800a30e:	f04f 0300 	mov.w	r3, #0
 800a312:	000a      	movs	r2, r1
 800a314:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a316:	4613      	mov	r3, r2
 800a318:	461a      	mov	r2, r3
 800a31a:	4621      	mov	r1, r4
 800a31c:	200d      	movs	r0, #13
 800a31e:	f7ff fcef 	bl	8009d00 <SEGGER_SYSVIEW_RecordU32x2>
 800a322:	e006      	b.n	800a332 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a324:	4b06      	ldr	r3, [pc, #24]	; (800a340 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4619      	mov	r1, r3
 800a32a:	200c      	movs	r0, #12
 800a32c:	f7ff fcac 	bl	8009c88 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}
 800a33a:	bf00      	nop
 800a33c:	200144cc 	.word	0x200144cc
 800a340:	e0001004 	.word	0xe0001004

0800a344 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a34a:	f3ef 8311 	mrs	r3, BASEPRI
 800a34e:	f04f 0120 	mov.w	r1, #32
 800a352:	f381 8811 	msr	BASEPRI, r1
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	4819      	ldr	r0, [pc, #100]	; (800a3c0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800a35a:	f7ff fa4c 	bl	80097f6 <_PreparePacket>
 800a35e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800a364:	4b17      	ldr	r3, [pc, #92]	; (800a3c4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a36c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	613b      	str	r3, [r7, #16]
 800a376:	e00b      	b.n	800a390 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	1c59      	adds	r1, r3, #1
 800a380:	6179      	str	r1, [r7, #20]
 800a382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a386:	b2d2      	uxtb	r2, r2
 800a388:	701a      	strb	r2, [r3, #0]
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	09db      	lsrs	r3, r3, #7
 800a38e:	613b      	str	r3, [r7, #16]
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	2b7f      	cmp	r3, #127	; 0x7f
 800a394:	d8f0      	bhi.n	800a378 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	617a      	str	r2, [r7, #20]
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	b2d2      	uxtb	r2, r2
 800a3a0:	701a      	strb	r2, [r3, #0]
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	6879      	ldr	r1, [r7, #4]
 800a3aa:	68b8      	ldr	r0, [r7, #8]
 800a3ac:	f7ff fb14 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f383 8811 	msr	BASEPRI, r3
}
 800a3b6:	bf00      	nop
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	200144fc 	.word	0x200144fc
 800a3c4:	e000ed04 	.word	0xe000ed04

0800a3c8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a3ce:	f3ef 8311 	mrs	r3, BASEPRI
 800a3d2:	f04f 0120 	mov.w	r1, #32
 800a3d6:	f381 8811 	msr	BASEPRI, r1
 800a3da:	607b      	str	r3, [r7, #4]
 800a3dc:	4807      	ldr	r0, [pc, #28]	; (800a3fc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a3de:	f7ff fa0a 	bl	80097f6 <_PreparePacket>
 800a3e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a3e4:	2203      	movs	r2, #3
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6838      	ldr	r0, [r7, #0]
 800a3ea:	f7ff faf5 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f383 8811 	msr	BASEPRI, r3
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	200144fc 	.word	0x200144fc

0800a400 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a406:	f3ef 8311 	mrs	r3, BASEPRI
 800a40a:	f04f 0120 	mov.w	r1, #32
 800a40e:	f381 8811 	msr	BASEPRI, r1
 800a412:	607b      	str	r3, [r7, #4]
 800a414:	4807      	ldr	r0, [pc, #28]	; (800a434 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a416:	f7ff f9ee 	bl	80097f6 <_PreparePacket>
 800a41a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a41c:	2212      	movs	r2, #18
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6838      	ldr	r0, [r7, #0]
 800a422:	f7ff fad9 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f383 8811 	msr	BASEPRI, r3
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	200144fc 	.word	0x200144fc

0800a438 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a43e:	f3ef 8311 	mrs	r3, BASEPRI
 800a442:	f04f 0120 	mov.w	r1, #32
 800a446:	f381 8811 	msr	BASEPRI, r1
 800a44a:	607b      	str	r3, [r7, #4]
 800a44c:	4807      	ldr	r0, [pc, #28]	; (800a46c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a44e:	f7ff f9d2 	bl	80097f6 <_PreparePacket>
 800a452:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a454:	2211      	movs	r2, #17
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6838      	ldr	r0, [r7, #0]
 800a45a:	f7ff fabd 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f383 8811 	msr	BASEPRI, r3
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	200144fc 	.word	0x200144fc

0800a470 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a478:	f3ef 8311 	mrs	r3, BASEPRI
 800a47c:	f04f 0120 	mov.w	r1, #32
 800a480:	f381 8811 	msr	BASEPRI, r1
 800a484:	617b      	str	r3, [r7, #20]
 800a486:	4819      	ldr	r0, [pc, #100]	; (800a4ec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a488:	f7ff f9b5 	bl	80097f6 <_PreparePacket>
 800a48c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a492:	4b17      	ldr	r3, [pc, #92]	; (800a4f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	61fb      	str	r3, [r7, #28]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	61bb      	str	r3, [r7, #24]
 800a4a4:	e00b      	b.n	800a4be <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	1c59      	adds	r1, r3, #1
 800a4ae:	61f9      	str	r1, [r7, #28]
 800a4b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a4b4:	b2d2      	uxtb	r2, r2
 800a4b6:	701a      	strb	r2, [r3, #0]
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	09db      	lsrs	r3, r3, #7
 800a4bc:	61bb      	str	r3, [r7, #24]
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b7f      	cmp	r3, #127	; 0x7f
 800a4c2:	d8f0      	bhi.n	800a4a6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	61fa      	str	r2, [r7, #28]
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	b2d2      	uxtb	r2, r2
 800a4ce:	701a      	strb	r2, [r3, #0]
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a4d4:	2208      	movs	r2, #8
 800a4d6:	68f9      	ldr	r1, [r7, #12]
 800a4d8:	6938      	ldr	r0, [r7, #16]
 800a4da:	f7ff fa7d 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f383 8811 	msr	BASEPRI, r3
}
 800a4e4:	bf00      	nop
 800a4e6:	3720      	adds	r7, #32
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	200144fc 	.word	0x200144fc
 800a4f0:	200144cc 	.word	0x200144cc

0800a4f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a4fc:	f3ef 8311 	mrs	r3, BASEPRI
 800a500:	f04f 0120 	mov.w	r1, #32
 800a504:	f381 8811 	msr	BASEPRI, r1
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	4819      	ldr	r0, [pc, #100]	; (800a570 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a50c:	f7ff f973 	bl	80097f6 <_PreparePacket>
 800a510:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a516:	4b17      	ldr	r3, [pc, #92]	; (800a574 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	61fb      	str	r3, [r7, #28]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	61bb      	str	r3, [r7, #24]
 800a528:	e00b      	b.n	800a542 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	1c59      	adds	r1, r3, #1
 800a532:	61f9      	str	r1, [r7, #28]
 800a534:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a538:	b2d2      	uxtb	r2, r2
 800a53a:	701a      	strb	r2, [r3, #0]
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	09db      	lsrs	r3, r3, #7
 800a540:	61bb      	str	r3, [r7, #24]
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	2b7f      	cmp	r3, #127	; 0x7f
 800a546:	d8f0      	bhi.n	800a52a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	61fa      	str	r2, [r7, #28]
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	b2d2      	uxtb	r2, r2
 800a552:	701a      	strb	r2, [r3, #0]
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a558:	2204      	movs	r2, #4
 800a55a:	68f9      	ldr	r1, [r7, #12]
 800a55c:	6938      	ldr	r0, [r7, #16]
 800a55e:	f7ff fa3b 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f383 8811 	msr	BASEPRI, r3
}
 800a568:	bf00      	nop
 800a56a:	3720      	adds	r7, #32
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	200144fc 	.word	0x200144fc
 800a574:	200144cc 	.word	0x200144cc

0800a578 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a578:	b580      	push	{r7, lr}
 800a57a:	b088      	sub	sp, #32
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a580:	f3ef 8311 	mrs	r3, BASEPRI
 800a584:	f04f 0120 	mov.w	r1, #32
 800a588:	f381 8811 	msr	BASEPRI, r1
 800a58c:	617b      	str	r3, [r7, #20]
 800a58e:	4819      	ldr	r0, [pc, #100]	; (800a5f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a590:	f7ff f931 	bl	80097f6 <_PreparePacket>
 800a594:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a59a:	4b17      	ldr	r3, [pc, #92]	; (800a5f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	61fb      	str	r3, [r7, #28]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	61bb      	str	r3, [r7, #24]
 800a5ac:	e00b      	b.n	800a5c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	1c59      	adds	r1, r3, #1
 800a5b6:	61f9      	str	r1, [r7, #28]
 800a5b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5bc:	b2d2      	uxtb	r2, r2
 800a5be:	701a      	strb	r2, [r3, #0]
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	09db      	lsrs	r3, r3, #7
 800a5c4:	61bb      	str	r3, [r7, #24]
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	2b7f      	cmp	r3, #127	; 0x7f
 800a5ca:	d8f0      	bhi.n	800a5ae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	61fa      	str	r2, [r7, #28]
 800a5d2:	69ba      	ldr	r2, [r7, #24]
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a5dc:	2206      	movs	r2, #6
 800a5de:	68f9      	ldr	r1, [r7, #12]
 800a5e0:	6938      	ldr	r0, [r7, #16]
 800a5e2:	f7ff f9f9 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f383 8811 	msr	BASEPRI, r3
}
 800a5ec:	bf00      	nop
 800a5ee:	3720      	adds	r7, #32
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	200144fc 	.word	0x200144fc
 800a5f8:	200144cc 	.word	0x200144cc

0800a5fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08c      	sub	sp, #48	; 0x30
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a606:	4b3b      	ldr	r3, [pc, #236]	; (800a6f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d06d      	beq.n	800a6ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800a60e:	4b39      	ldr	r3, [pc, #228]	; (800a6f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a614:	2300      	movs	r3, #0
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28
 800a618:	e008      	b.n	800a62c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	2b00      	cmp	r3, #0
 800a624:	d007      	beq.n	800a636 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	3301      	adds	r3, #1
 800a62a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a630:	429a      	cmp	r2, r3
 800a632:	d3f2      	bcc.n	800a61a <SEGGER_SYSVIEW_SendModule+0x1e>
 800a634:	e000      	b.n	800a638 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a636:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d055      	beq.n	800a6ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a63e:	f3ef 8311 	mrs	r3, BASEPRI
 800a642:	f04f 0120 	mov.w	r1, #32
 800a646:	f381 8811 	msr	BASEPRI, r1
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	482a      	ldr	r0, [pc, #168]	; (800a6f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800a64e:	f7ff f8d2 	bl	80097f6 <_PreparePacket>
 800a652:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	623b      	str	r3, [r7, #32]
 800a660:	e00b      	b.n	800a67a <SEGGER_SYSVIEW_SendModule+0x7e>
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	b2da      	uxtb	r2, r3
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	1c59      	adds	r1, r3, #1
 800a66a:	6279      	str	r1, [r7, #36]	; 0x24
 800a66c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a670:	b2d2      	uxtb	r2, r2
 800a672:	701a      	strb	r2, [r3, #0]
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	09db      	lsrs	r3, r3, #7
 800a678:	623b      	str	r3, [r7, #32]
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	2b7f      	cmp	r3, #127	; 0x7f
 800a67e:	d8f0      	bhi.n	800a662 <SEGGER_SYSVIEW_SendModule+0x66>
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	627a      	str	r2, [r7, #36]	; 0x24
 800a686:	6a3a      	ldr	r2, [r7, #32]
 800a688:	b2d2      	uxtb	r2, r2
 800a68a:	701a      	strb	r2, [r3, #0]
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	61fb      	str	r3, [r7, #28]
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	61bb      	str	r3, [r7, #24]
 800a69a:	e00b      	b.n	800a6b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	1c59      	adds	r1, r3, #1
 800a6a4:	61f9      	str	r1, [r7, #28]
 800a6a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a6aa:	b2d2      	uxtb	r2, r2
 800a6ac:	701a      	strb	r2, [r3, #0]
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	09db      	lsrs	r3, r3, #7
 800a6b2:	61bb      	str	r3, [r7, #24]
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	2b7f      	cmp	r3, #127	; 0x7f
 800a6b8:	d8f0      	bhi.n	800a69c <SEGGER_SYSVIEW_SendModule+0xa0>
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	61fa      	str	r2, [r7, #28]
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	b2d2      	uxtb	r2, r2
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2280      	movs	r2, #128	; 0x80
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff f842 	bl	800975c <_EncodeStr>
 800a6d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a6da:	2216      	movs	r2, #22
 800a6dc:	68f9      	ldr	r1, [r7, #12]
 800a6de:	6938      	ldr	r0, [r7, #16]
 800a6e0:	f7ff f97a 	bl	80099d8 <_SendPacket>
      RECORD_END();
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800a6ea:	bf00      	nop
 800a6ec:	3730      	adds	r7, #48	; 0x30
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	200144f4 	.word	0x200144f4
 800a6f8:	200144fc 	.word	0x200144fc

0800a6fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a702:	4b0c      	ldr	r3, [pc, #48]	; (800a734 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00f      	beq.n	800a72a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a70a:	4b0a      	ldr	r3, [pc, #40]	; (800a734 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1f2      	bne.n	800a710 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	200144f4 	.word	0x200144f4

0800a738 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a73e:	f3ef 8311 	mrs	r3, BASEPRI
 800a742:	f04f 0120 	mov.w	r1, #32
 800a746:	f381 8811 	msr	BASEPRI, r1
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	4817      	ldr	r0, [pc, #92]	; (800a7ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a74e:	f7ff f852 	bl	80097f6 <_PreparePacket>
 800a752:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	617b      	str	r3, [r7, #20]
 800a75c:	4b14      	ldr	r3, [pc, #80]	; (800a7b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	613b      	str	r3, [r7, #16]
 800a762:	e00b      	b.n	800a77c <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	b2da      	uxtb	r2, r3
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	1c59      	adds	r1, r3, #1
 800a76c:	6179      	str	r1, [r7, #20]
 800a76e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	701a      	strb	r2, [r3, #0]
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	09db      	lsrs	r3, r3, #7
 800a77a:	613b      	str	r3, [r7, #16]
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	2b7f      	cmp	r3, #127	; 0x7f
 800a780:	d8f0      	bhi.n	800a764 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	617a      	str	r2, [r7, #20]
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	b2d2      	uxtb	r2, r2
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a792:	221b      	movs	r2, #27
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	68b8      	ldr	r0, [r7, #8]
 800a798:	f7ff f91e 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f383 8811 	msr	BASEPRI, r3
}
 800a7a2:	bf00      	nop
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200144fc 	.word	0x200144fc
 800a7b0:	200144f8 	.word	0x200144f8

0800a7b4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08a      	sub	sp, #40	; 0x28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a7bc:	f3ef 8311 	mrs	r3, BASEPRI
 800a7c0:	f04f 0120 	mov.w	r1, #32
 800a7c4:	f381 8811 	msr	BASEPRI, r1
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	4827      	ldr	r0, [pc, #156]	; (800a868 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a7cc:	f7ff f813 	bl	80097f6 <_PreparePacket>
 800a7d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a7d2:	2280      	movs	r2, #128	; 0x80
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	6938      	ldr	r0, [r7, #16]
 800a7d8:	f7fe ffc0 	bl	800975c <_EncodeStr>
 800a7dc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	623b      	str	r3, [r7, #32]
 800a7e6:	e00b      	b.n	800a800 <SEGGER_SYSVIEW_Warn+0x4c>
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	1c59      	adds	r1, r3, #1
 800a7f0:	6279      	str	r1, [r7, #36]	; 0x24
 800a7f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a7f6:	b2d2      	uxtb	r2, r2
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	09db      	lsrs	r3, r3, #7
 800a7fe:	623b      	str	r3, [r7, #32]
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	2b7f      	cmp	r3, #127	; 0x7f
 800a804:	d8f0      	bhi.n	800a7e8 <SEGGER_SYSVIEW_Warn+0x34>
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	627a      	str	r2, [r7, #36]	; 0x24
 800a80c:	6a3a      	ldr	r2, [r7, #32]
 800a80e:	b2d2      	uxtb	r2, r2
 800a810:	701a      	strb	r2, [r3, #0]
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	61fb      	str	r3, [r7, #28]
 800a81a:	2300      	movs	r3, #0
 800a81c:	61bb      	str	r3, [r7, #24]
 800a81e:	e00b      	b.n	800a838 <SEGGER_SYSVIEW_Warn+0x84>
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	b2da      	uxtb	r2, r3
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	1c59      	adds	r1, r3, #1
 800a828:	61f9      	str	r1, [r7, #28]
 800a82a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a82e:	b2d2      	uxtb	r2, r2
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	09db      	lsrs	r3, r3, #7
 800a836:	61bb      	str	r3, [r7, #24]
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b7f      	cmp	r3, #127	; 0x7f
 800a83c:	d8f0      	bhi.n	800a820 <SEGGER_SYSVIEW_Warn+0x6c>
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	61fa      	str	r2, [r7, #28]
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	b2d2      	uxtb	r2, r2
 800a848:	701a      	strb	r2, [r3, #0]
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a84e:	221a      	movs	r2, #26
 800a850:	68f9      	ldr	r1, [r7, #12]
 800a852:	6938      	ldr	r0, [r7, #16]
 800a854:	f7ff f8c0 	bl	80099d8 <_SendPacket>
  RECORD_END();
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f383 8811 	msr	BASEPRI, r3
}
 800a85e:	bf00      	nop
 800a860:	3728      	adds	r7, #40	; 0x28
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	200144fc 	.word	0x200144fc

0800a86c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	6879      	ldr	r1, [r7, #4]
 800a87e:	2000      	movs	r0, #0
 800a880:	f7fe fe52 	bl	8009528 <SEGGER_RTT_Write>
  return len;
 800a884:	683b      	ldr	r3, [r7, #0]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a894:	2201      	movs	r2, #1
 800a896:	490e      	ldr	r1, [pc, #56]	; (800a8d0 <MX_USB_HOST_Init+0x40>)
 800a898:	480e      	ldr	r0, [pc, #56]	; (800a8d4 <MX_USB_HOST_Init+0x44>)
 800a89a:	f7fb fd5d 	bl	8006358 <USBH_Init>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a8a4:	f7f6 f92a 	bl	8000afc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a8a8:	490b      	ldr	r1, [pc, #44]	; (800a8d8 <MX_USB_HOST_Init+0x48>)
 800a8aa:	480a      	ldr	r0, [pc, #40]	; (800a8d4 <MX_USB_HOST_Init+0x44>)
 800a8ac:	f7fb fde2 	bl	8006474 <USBH_RegisterClass>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a8b6:	f7f6 f921 	bl	8000afc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a8ba:	4806      	ldr	r0, [pc, #24]	; (800a8d4 <MX_USB_HOST_Init+0x44>)
 800a8bc:	f7fb fe66 	bl	800658c <USBH_Start>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a8c6:	f7f6 f919 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a8ca:	bf00      	nop
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	0800a8f1 	.word	0x0800a8f1
 800a8d4:	200145e0 	.word	0x200145e0
 800a8d8:	2000000c 	.word	0x2000000c

0800a8dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a8e0:	4802      	ldr	r0, [pc, #8]	; (800a8ec <MX_USB_HOST_Process+0x10>)
 800a8e2:	f7fb fe63 	bl	80065ac <USBH_Process>
}
 800a8e6:	bf00      	nop
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	200145e0 	.word	0x200145e0

0800a8f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	2b04      	cmp	r3, #4
 800a902:	d819      	bhi.n	800a938 <USBH_UserProcess+0x48>
 800a904:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <USBH_UserProcess+0x1c>)
 800a906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90a:	bf00      	nop
 800a90c:	0800a939 	.word	0x0800a939
 800a910:	0800a929 	.word	0x0800a929
 800a914:	0800a939 	.word	0x0800a939
 800a918:	0800a931 	.word	0x0800a931
 800a91c:	0800a921 	.word	0x0800a921
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a920:	4b09      	ldr	r3, [pc, #36]	; (800a948 <USBH_UserProcess+0x58>)
 800a922:	2203      	movs	r2, #3
 800a924:	701a      	strb	r2, [r3, #0]
  break;
 800a926:	e008      	b.n	800a93a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a928:	4b07      	ldr	r3, [pc, #28]	; (800a948 <USBH_UserProcess+0x58>)
 800a92a:	2202      	movs	r2, #2
 800a92c:	701a      	strb	r2, [r3, #0]
  break;
 800a92e:	e004      	b.n	800a93a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <USBH_UserProcess+0x58>)
 800a932:	2201      	movs	r2, #1
 800a934:	701a      	strb	r2, [r3, #0]
  break;
 800a936:	e000      	b.n	800a93a <USBH_UserProcess+0x4a>

  default:
  break;
 800a938:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	200149b8 	.word	0x200149b8

0800a94c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08a      	sub	sp, #40	; 0x28
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a954:	f107 0314 	add.w	r3, r7, #20
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]
 800a95c:	605a      	str	r2, [r3, #4]
 800a95e:	609a      	str	r2, [r3, #8]
 800a960:	60da      	str	r2, [r3, #12]
 800a962:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a96c:	d147      	bne.n	800a9fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a96e:	2300      	movs	r3, #0
 800a970:	613b      	str	r3, [r7, #16]
 800a972:	4b25      	ldr	r3, [pc, #148]	; (800aa08 <HAL_HCD_MspInit+0xbc>)
 800a974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a976:	4a24      	ldr	r2, [pc, #144]	; (800aa08 <HAL_HCD_MspInit+0xbc>)
 800a978:	f043 0301 	orr.w	r3, r3, #1
 800a97c:	6313      	str	r3, [r2, #48]	; 0x30
 800a97e:	4b22      	ldr	r3, [pc, #136]	; (800aa08 <HAL_HCD_MspInit+0xbc>)
 800a980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	613b      	str	r3, [r7, #16]
 800a988:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a98a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a98e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a990:	2300      	movs	r3, #0
 800a992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a994:	2300      	movs	r3, #0
 800a996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	4619      	mov	r1, r3
 800a99e:	481b      	ldr	r0, [pc, #108]	; (800aa0c <HAL_HCD_MspInit+0xc0>)
 800a9a0:	f7f6 fcaa 	bl	80012f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a9a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a9a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9b6:	230a      	movs	r3, #10
 800a9b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9ba:	f107 0314 	add.w	r3, r7, #20
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4812      	ldr	r0, [pc, #72]	; (800aa0c <HAL_HCD_MspInit+0xc0>)
 800a9c2:	f7f6 fc99 	bl	80012f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9c6:	4b10      	ldr	r3, [pc, #64]	; (800aa08 <HAL_HCD_MspInit+0xbc>)
 800a9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ca:	4a0f      	ldr	r2, [pc, #60]	; (800aa08 <HAL_HCD_MspInit+0xbc>)
 800a9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d0:	6353      	str	r3, [r2, #52]	; 0x34
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60fb      	str	r3, [r7, #12]
 800a9d6:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <HAL_HCD_MspInit+0xbc>)
 800a9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9da:	4a0b      	ldr	r2, [pc, #44]	; (800aa08 <HAL_HCD_MspInit+0xbc>)
 800a9dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a9e2:	4b09      	ldr	r3, [pc, #36]	; (800aa08 <HAL_HCD_MspInit+0xbc>)
 800a9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	2043      	movs	r0, #67	; 0x43
 800a9f4:	f7f6 fc56 	bl	80012a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9f8:	2043      	movs	r0, #67	; 0x43
 800a9fa:	f7f6 fc6f 	bl	80012dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9fe:	bf00      	nop
 800aa00:	3728      	adds	r7, #40	; 0x28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	40023800 	.word	0x40023800
 800aa0c:	40020000 	.word	0x40020000

0800aa10 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fc f9a3 	bl	8006d6a <USBH_LL_IncTimer>
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fc f9db 	bl	8006df6 <USBH_LL_Connect>
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fc f9e4 	bl	8006e24 <USBH_LL_Disconnect>
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
 800aa70:	4613      	mov	r3, r2
 800aa72:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fc f995 	bl	8006dbe <USBH_LL_PortEnabled>
}
 800aa94:	bf00      	nop
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fc f995 	bl	8006dda <USBH_LL_PortDisabled>
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d12a      	bne.n	800ab20 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aaca:	4a18      	ldr	r2, [pc, #96]	; (800ab2c <USBH_LL_Init+0x74>)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a15      	ldr	r2, [pc, #84]	; (800ab2c <USBH_LL_Init+0x74>)
 800aad6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aada:	4b14      	ldr	r3, [pc, #80]	; (800ab2c <USBH_LL_Init+0x74>)
 800aadc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aae0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aae2:	4b12      	ldr	r3, [pc, #72]	; (800ab2c <USBH_LL_Init+0x74>)
 800aae4:	2208      	movs	r2, #8
 800aae6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aae8:	4b10      	ldr	r3, [pc, #64]	; (800ab2c <USBH_LL_Init+0x74>)
 800aaea:	2201      	movs	r2, #1
 800aaec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aaee:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <USBH_LL_Init+0x74>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aaf4:	4b0d      	ldr	r3, [pc, #52]	; (800ab2c <USBH_LL_Init+0x74>)
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aafa:	4b0c      	ldr	r3, [pc, #48]	; (800ab2c <USBH_LL_Init+0x74>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ab00:	480a      	ldr	r0, [pc, #40]	; (800ab2c <USBH_LL_Init+0x74>)
 800ab02:	f7f6 fd96 	bl	8001632 <HAL_HCD_Init>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ab0c:	f7f5 fff6 	bl	8000afc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ab10:	4806      	ldr	r0, [pc, #24]	; (800ab2c <USBH_LL_Init+0x74>)
 800ab12:	f7f7 f97a 	bl	8001e0a <HAL_HCD_GetCurrentFrame>
 800ab16:	4603      	mov	r3, r0
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7fc f916 	bl	8006d4c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	200149bc 	.word	0x200149bc

0800ab30 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7f7 f8e9 	bl	8001d1e <HAL_HCD_Start>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab50:	7bfb      	ldrb	r3, [r7, #15]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 f95c 	bl	800ae10 <USBH_Get_USB_Status>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7f7 f8f1 	bl	8001d64 <HAL_HCD_Stop>
 800ab82:	4603      	mov	r3, r0
 800ab84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 f941 	bl	800ae10 <USBH_Get_USB_Status>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aba4:	2301      	movs	r3, #1
 800aba6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abae:	4618      	mov	r0, r3
 800abb0:	f7f7 f939 	bl	8001e26 <HAL_HCD_GetCurrentSpeed>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d00c      	beq.n	800abd4 <USBH_LL_GetSpeed+0x38>
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d80d      	bhi.n	800abda <USBH_LL_GetSpeed+0x3e>
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <USBH_LL_GetSpeed+0x2c>
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d003      	beq.n	800abce <USBH_LL_GetSpeed+0x32>
 800abc6:	e008      	b.n	800abda <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800abc8:	2300      	movs	r3, #0
 800abca:	73fb      	strb	r3, [r7, #15]
    break;
 800abcc:	e008      	b.n	800abe0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800abce:	2301      	movs	r3, #1
 800abd0:	73fb      	strb	r3, [r7, #15]
    break;
 800abd2:	e005      	b.n	800abe0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800abd4:	2302      	movs	r3, #2
 800abd6:	73fb      	strb	r3, [r7, #15]
    break;
 800abd8:	e002      	b.n	800abe0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800abda:	2301      	movs	r3, #1
 800abdc:	73fb      	strb	r3, [r7, #15]
    break;
 800abde:	bf00      	nop
  }
  return  speed;
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f7 f8cc 	bl	8001d9e <HAL_HCD_ResetPort>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 f8ff 	bl	800ae10 <USBH_Get_USB_Status>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac32:	78fa      	ldrb	r2, [r7, #3]
 800ac34:	4611      	mov	r1, r2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7f7 f8d3 	bl	8001de2 <HAL_HCD_HC_GetXferCount>
 800ac3c:	4603      	mov	r3, r0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac46:	b590      	push	{r4, r7, lr}
 800ac48:	b089      	sub	sp, #36	; 0x24
 800ac4a:	af04      	add	r7, sp, #16
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	4608      	mov	r0, r1
 800ac50:	4611      	mov	r1, r2
 800ac52:	461a      	mov	r2, r3
 800ac54:	4603      	mov	r3, r0
 800ac56:	70fb      	strb	r3, [r7, #3]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70bb      	strb	r3, [r7, #2]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac64:	2300      	movs	r3, #0
 800ac66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac6e:	787c      	ldrb	r4, [r7, #1]
 800ac70:	78ba      	ldrb	r2, [r7, #2]
 800ac72:	78f9      	ldrb	r1, [r7, #3]
 800ac74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac76:	9302      	str	r3, [sp, #8]
 800ac78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	4623      	mov	r3, r4
 800ac86:	f7f6 fd36 	bl	80016f6 <HAL_HCD_HC_Init>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 f8bd 	bl	800ae10 <USBH_Get_USB_Status>
 800ac96:	4603      	mov	r3, r0
 800ac98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd90      	pop	{r4, r7, pc}

0800aca4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acbe:	78fa      	ldrb	r2, [r7, #3]
 800acc0:	4611      	mov	r1, r2
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7f6 fda6 	bl	8001814 <HAL_HCD_HC_Halt>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 f89e 	bl	800ae10 <USBH_Get_USB_Status>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ace2:	b590      	push	{r4, r7, lr}
 800ace4:	b089      	sub	sp, #36	; 0x24
 800ace6:	af04      	add	r7, sp, #16
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	461a      	mov	r2, r3
 800acf0:	4603      	mov	r3, r0
 800acf2:	70fb      	strb	r3, [r7, #3]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70bb      	strb	r3, [r7, #2]
 800acf8:	4613      	mov	r3, r2
 800acfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ad0a:	787c      	ldrb	r4, [r7, #1]
 800ad0c:	78ba      	ldrb	r2, [r7, #2]
 800ad0e:	78f9      	ldrb	r1, [r7, #3]
 800ad10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad14:	9303      	str	r3, [sp, #12]
 800ad16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad18:	9302      	str	r3, [sp, #8]
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	4623      	mov	r3, r4
 800ad26:	f7f6 fd99 	bl	800185c <HAL_HCD_HC_SubmitRequest>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ad2e:	7bfb      	ldrb	r3, [r7, #15]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 f86d 	bl	800ae10 <USBH_Get_USB_Status>
 800ad36:	4603      	mov	r3, r0
 800ad38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd90      	pop	{r4, r7, pc}

0800ad44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad56:	78fa      	ldrb	r2, [r7, #3]
 800ad58:	4611      	mov	r1, r2
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7f7 f82d 	bl	8001dba <HAL_HCD_HC_GetURBState>
 800ad60:	4603      	mov	r3, r0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b082      	sub	sp, #8
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d103      	bne.n	800ad88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 f870 	bl	800ae68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ad88:	20c8      	movs	r0, #200	; 0xc8
 800ad8a:	f7f6 f9af 	bl	80010ec <HAL_Delay>
  return USBH_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
 800ada4:	4613      	mov	r3, r2
 800ada6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	212c      	movs	r1, #44	; 0x2c
 800adb6:	fb01 f303 	mul.w	r3, r1, r3
 800adba:	4413      	add	r3, r2
 800adbc:	333b      	adds	r3, #59	; 0x3b
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d009      	beq.n	800add8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800adc4:	78fb      	ldrb	r3, [r7, #3]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	212c      	movs	r1, #44	; 0x2c
 800adca:	fb01 f303 	mul.w	r3, r1, r3
 800adce:	4413      	add	r3, r2
 800add0:	3354      	adds	r3, #84	; 0x54
 800add2:	78ba      	ldrb	r2, [r7, #2]
 800add4:	701a      	strb	r2, [r3, #0]
 800add6:	e008      	b.n	800adea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	212c      	movs	r1, #44	; 0x2c
 800adde:	fb01 f303 	mul.w	r3, r1, r3
 800ade2:	4413      	add	r3, r2
 800ade4:	3355      	adds	r3, #85	; 0x55
 800ade6:	78ba      	ldrb	r2, [r7, #2]
 800ade8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7f6 f973 	bl	80010ec <HAL_Delay>
}
 800ae06:	bf00      	nop
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	4603      	mov	r3, r0
 800ae18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d817      	bhi.n	800ae54 <USBH_Get_USB_Status+0x44>
 800ae24:	a201      	add	r2, pc, #4	; (adr r2, 800ae2c <USBH_Get_USB_Status+0x1c>)
 800ae26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2a:	bf00      	nop
 800ae2c:	0800ae3d 	.word	0x0800ae3d
 800ae30:	0800ae43 	.word	0x0800ae43
 800ae34:	0800ae49 	.word	0x0800ae49
 800ae38:	0800ae4f 	.word	0x0800ae4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae40:	e00b      	b.n	800ae5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae42:	2302      	movs	r3, #2
 800ae44:	73fb      	strb	r3, [r7, #15]
    break;
 800ae46:	e008      	b.n	800ae5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4c:	e005      	b.n	800ae5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae4e:	2302      	movs	r3, #2
 800ae50:	73fb      	strb	r3, [r7, #15]
    break;
 800ae52:	e002      	b.n	800ae5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae54:	2302      	movs	r3, #2
 800ae56:	73fb      	strb	r3, [r7, #15]
    break;
 800ae58:	bf00      	nop
  }
  return usb_status;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ae72:	79fb      	ldrb	r3, [r7, #7]
 800ae74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d102      	bne.n	800ae82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73fb      	strb	r3, [r7, #15]
 800ae80:	e001      	b.n	800ae86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ae82:	2301      	movs	r3, #1
 800ae84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	4803      	ldr	r0, [pc, #12]	; (800ae9c <MX_DriverVbusFS+0x34>)
 800ae8e:	f7f6 fbb7 	bl	8001600 <HAL_GPIO_WritePin>
}
 800ae92:	bf00      	nop
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	40020800 	.word	0x40020800

0800aea0 <__libc_init_array>:
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	4d0d      	ldr	r5, [pc, #52]	; (800aed8 <__libc_init_array+0x38>)
 800aea4:	4c0d      	ldr	r4, [pc, #52]	; (800aedc <__libc_init_array+0x3c>)
 800aea6:	1b64      	subs	r4, r4, r5
 800aea8:	10a4      	asrs	r4, r4, #2
 800aeaa:	2600      	movs	r6, #0
 800aeac:	42a6      	cmp	r6, r4
 800aeae:	d109      	bne.n	800aec4 <__libc_init_array+0x24>
 800aeb0:	4d0b      	ldr	r5, [pc, #44]	; (800aee0 <__libc_init_array+0x40>)
 800aeb2:	4c0c      	ldr	r4, [pc, #48]	; (800aee4 <__libc_init_array+0x44>)
 800aeb4:	f000 fd48 	bl	800b948 <_init>
 800aeb8:	1b64      	subs	r4, r4, r5
 800aeba:	10a4      	asrs	r4, r4, #2
 800aebc:	2600      	movs	r6, #0
 800aebe:	42a6      	cmp	r6, r4
 800aec0:	d105      	bne.n	800aece <__libc_init_array+0x2e>
 800aec2:	bd70      	pop	{r4, r5, r6, pc}
 800aec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec8:	4798      	blx	r3
 800aeca:	3601      	adds	r6, #1
 800aecc:	e7ee      	b.n	800aeac <__libc_init_array+0xc>
 800aece:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed2:	4798      	blx	r3
 800aed4:	3601      	adds	r6, #1
 800aed6:	e7f2      	b.n	800aebe <__libc_init_array+0x1e>
 800aed8:	0800bae0 	.word	0x0800bae0
 800aedc:	0800bae0 	.word	0x0800bae0
 800aee0:	0800bae0 	.word	0x0800bae0
 800aee4:	0800bae4 	.word	0x0800bae4

0800aee8 <malloc>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <malloc+0xc>)
 800aeea:	4601      	mov	r1, r0
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f000 b89d 	b.w	800b02c <_malloc_r>
 800aef2:	bf00      	nop
 800aef4:	20000034 	.word	0x20000034

0800aef8 <free>:
 800aef8:	4b02      	ldr	r3, [pc, #8]	; (800af04 <free+0xc>)
 800aefa:	4601      	mov	r1, r0
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	f000 b829 	b.w	800af54 <_free_r>
 800af02:	bf00      	nop
 800af04:	20000034 	.word	0x20000034

0800af08 <memcmp>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	3901      	subs	r1, #1
 800af0c:	4402      	add	r2, r0
 800af0e:	4290      	cmp	r0, r2
 800af10:	d101      	bne.n	800af16 <memcmp+0xe>
 800af12:	2000      	movs	r0, #0
 800af14:	e005      	b.n	800af22 <memcmp+0x1a>
 800af16:	7803      	ldrb	r3, [r0, #0]
 800af18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	d001      	beq.n	800af24 <memcmp+0x1c>
 800af20:	1b18      	subs	r0, r3, r4
 800af22:	bd10      	pop	{r4, pc}
 800af24:	3001      	adds	r0, #1
 800af26:	e7f2      	b.n	800af0e <memcmp+0x6>

0800af28 <memcpy>:
 800af28:	440a      	add	r2, r1
 800af2a:	4291      	cmp	r1, r2
 800af2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800af30:	d100      	bne.n	800af34 <memcpy+0xc>
 800af32:	4770      	bx	lr
 800af34:	b510      	push	{r4, lr}
 800af36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af3e:	4291      	cmp	r1, r2
 800af40:	d1f9      	bne.n	800af36 <memcpy+0xe>
 800af42:	bd10      	pop	{r4, pc}

0800af44 <memset>:
 800af44:	4402      	add	r2, r0
 800af46:	4603      	mov	r3, r0
 800af48:	4293      	cmp	r3, r2
 800af4a:	d100      	bne.n	800af4e <memset+0xa>
 800af4c:	4770      	bx	lr
 800af4e:	f803 1b01 	strb.w	r1, [r3], #1
 800af52:	e7f9      	b.n	800af48 <memset+0x4>

0800af54 <_free_r>:
 800af54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af56:	2900      	cmp	r1, #0
 800af58:	d044      	beq.n	800afe4 <_free_r+0x90>
 800af5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af5e:	9001      	str	r0, [sp, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	f1a1 0404 	sub.w	r4, r1, #4
 800af66:	bfb8      	it	lt
 800af68:	18e4      	addlt	r4, r4, r3
 800af6a:	f000 fc39 	bl	800b7e0 <__malloc_lock>
 800af6e:	4a1e      	ldr	r2, [pc, #120]	; (800afe8 <_free_r+0x94>)
 800af70:	9801      	ldr	r0, [sp, #4]
 800af72:	6813      	ldr	r3, [r2, #0]
 800af74:	b933      	cbnz	r3, 800af84 <_free_r+0x30>
 800af76:	6063      	str	r3, [r4, #4]
 800af78:	6014      	str	r4, [r2, #0]
 800af7a:	b003      	add	sp, #12
 800af7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af80:	f000 bc34 	b.w	800b7ec <__malloc_unlock>
 800af84:	42a3      	cmp	r3, r4
 800af86:	d908      	bls.n	800af9a <_free_r+0x46>
 800af88:	6825      	ldr	r5, [r4, #0]
 800af8a:	1961      	adds	r1, r4, r5
 800af8c:	428b      	cmp	r3, r1
 800af8e:	bf01      	itttt	eq
 800af90:	6819      	ldreq	r1, [r3, #0]
 800af92:	685b      	ldreq	r3, [r3, #4]
 800af94:	1949      	addeq	r1, r1, r5
 800af96:	6021      	streq	r1, [r4, #0]
 800af98:	e7ed      	b.n	800af76 <_free_r+0x22>
 800af9a:	461a      	mov	r2, r3
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	b10b      	cbz	r3, 800afa4 <_free_r+0x50>
 800afa0:	42a3      	cmp	r3, r4
 800afa2:	d9fa      	bls.n	800af9a <_free_r+0x46>
 800afa4:	6811      	ldr	r1, [r2, #0]
 800afa6:	1855      	adds	r5, r2, r1
 800afa8:	42a5      	cmp	r5, r4
 800afaa:	d10b      	bne.n	800afc4 <_free_r+0x70>
 800afac:	6824      	ldr	r4, [r4, #0]
 800afae:	4421      	add	r1, r4
 800afb0:	1854      	adds	r4, r2, r1
 800afb2:	42a3      	cmp	r3, r4
 800afb4:	6011      	str	r1, [r2, #0]
 800afb6:	d1e0      	bne.n	800af7a <_free_r+0x26>
 800afb8:	681c      	ldr	r4, [r3, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	6053      	str	r3, [r2, #4]
 800afbe:	4421      	add	r1, r4
 800afc0:	6011      	str	r1, [r2, #0]
 800afc2:	e7da      	b.n	800af7a <_free_r+0x26>
 800afc4:	d902      	bls.n	800afcc <_free_r+0x78>
 800afc6:	230c      	movs	r3, #12
 800afc8:	6003      	str	r3, [r0, #0]
 800afca:	e7d6      	b.n	800af7a <_free_r+0x26>
 800afcc:	6825      	ldr	r5, [r4, #0]
 800afce:	1961      	adds	r1, r4, r5
 800afd0:	428b      	cmp	r3, r1
 800afd2:	bf04      	itt	eq
 800afd4:	6819      	ldreq	r1, [r3, #0]
 800afd6:	685b      	ldreq	r3, [r3, #4]
 800afd8:	6063      	str	r3, [r4, #4]
 800afda:	bf04      	itt	eq
 800afdc:	1949      	addeq	r1, r1, r5
 800afde:	6021      	streq	r1, [r4, #0]
 800afe0:	6054      	str	r4, [r2, #4]
 800afe2:	e7ca      	b.n	800af7a <_free_r+0x26>
 800afe4:	b003      	add	sp, #12
 800afe6:	bd30      	pop	{r4, r5, pc}
 800afe8:	20014cc0 	.word	0x20014cc0

0800afec <sbrk_aligned>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	4e0e      	ldr	r6, [pc, #56]	; (800b028 <sbrk_aligned+0x3c>)
 800aff0:	460c      	mov	r4, r1
 800aff2:	6831      	ldr	r1, [r6, #0]
 800aff4:	4605      	mov	r5, r0
 800aff6:	b911      	cbnz	r1, 800affe <sbrk_aligned+0x12>
 800aff8:	f000 f902 	bl	800b200 <_sbrk_r>
 800affc:	6030      	str	r0, [r6, #0]
 800affe:	4621      	mov	r1, r4
 800b000:	4628      	mov	r0, r5
 800b002:	f000 f8fd 	bl	800b200 <_sbrk_r>
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	d00a      	beq.n	800b020 <sbrk_aligned+0x34>
 800b00a:	1cc4      	adds	r4, r0, #3
 800b00c:	f024 0403 	bic.w	r4, r4, #3
 800b010:	42a0      	cmp	r0, r4
 800b012:	d007      	beq.n	800b024 <sbrk_aligned+0x38>
 800b014:	1a21      	subs	r1, r4, r0
 800b016:	4628      	mov	r0, r5
 800b018:	f000 f8f2 	bl	800b200 <_sbrk_r>
 800b01c:	3001      	adds	r0, #1
 800b01e:	d101      	bne.n	800b024 <sbrk_aligned+0x38>
 800b020:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b024:	4620      	mov	r0, r4
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	20014cc4 	.word	0x20014cc4

0800b02c <_malloc_r>:
 800b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b030:	1ccd      	adds	r5, r1, #3
 800b032:	f025 0503 	bic.w	r5, r5, #3
 800b036:	3508      	adds	r5, #8
 800b038:	2d0c      	cmp	r5, #12
 800b03a:	bf38      	it	cc
 800b03c:	250c      	movcc	r5, #12
 800b03e:	2d00      	cmp	r5, #0
 800b040:	4607      	mov	r7, r0
 800b042:	db01      	blt.n	800b048 <_malloc_r+0x1c>
 800b044:	42a9      	cmp	r1, r5
 800b046:	d905      	bls.n	800b054 <_malloc_r+0x28>
 800b048:	230c      	movs	r3, #12
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	2600      	movs	r6, #0
 800b04e:	4630      	mov	r0, r6
 800b050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b054:	4e2e      	ldr	r6, [pc, #184]	; (800b110 <_malloc_r+0xe4>)
 800b056:	f000 fbc3 	bl	800b7e0 <__malloc_lock>
 800b05a:	6833      	ldr	r3, [r6, #0]
 800b05c:	461c      	mov	r4, r3
 800b05e:	bb34      	cbnz	r4, 800b0ae <_malloc_r+0x82>
 800b060:	4629      	mov	r1, r5
 800b062:	4638      	mov	r0, r7
 800b064:	f7ff ffc2 	bl	800afec <sbrk_aligned>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	4604      	mov	r4, r0
 800b06c:	d14d      	bne.n	800b10a <_malloc_r+0xde>
 800b06e:	6834      	ldr	r4, [r6, #0]
 800b070:	4626      	mov	r6, r4
 800b072:	2e00      	cmp	r6, #0
 800b074:	d140      	bne.n	800b0f8 <_malloc_r+0xcc>
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	4631      	mov	r1, r6
 800b07a:	4638      	mov	r0, r7
 800b07c:	eb04 0803 	add.w	r8, r4, r3
 800b080:	f000 f8be 	bl	800b200 <_sbrk_r>
 800b084:	4580      	cmp	r8, r0
 800b086:	d13a      	bne.n	800b0fe <_malloc_r+0xd2>
 800b088:	6821      	ldr	r1, [r4, #0]
 800b08a:	3503      	adds	r5, #3
 800b08c:	1a6d      	subs	r5, r5, r1
 800b08e:	f025 0503 	bic.w	r5, r5, #3
 800b092:	3508      	adds	r5, #8
 800b094:	2d0c      	cmp	r5, #12
 800b096:	bf38      	it	cc
 800b098:	250c      	movcc	r5, #12
 800b09a:	4629      	mov	r1, r5
 800b09c:	4638      	mov	r0, r7
 800b09e:	f7ff ffa5 	bl	800afec <sbrk_aligned>
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d02b      	beq.n	800b0fe <_malloc_r+0xd2>
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	442b      	add	r3, r5
 800b0aa:	6023      	str	r3, [r4, #0]
 800b0ac:	e00e      	b.n	800b0cc <_malloc_r+0xa0>
 800b0ae:	6822      	ldr	r2, [r4, #0]
 800b0b0:	1b52      	subs	r2, r2, r5
 800b0b2:	d41e      	bmi.n	800b0f2 <_malloc_r+0xc6>
 800b0b4:	2a0b      	cmp	r2, #11
 800b0b6:	d916      	bls.n	800b0e6 <_malloc_r+0xba>
 800b0b8:	1961      	adds	r1, r4, r5
 800b0ba:	42a3      	cmp	r3, r4
 800b0bc:	6025      	str	r5, [r4, #0]
 800b0be:	bf18      	it	ne
 800b0c0:	6059      	strne	r1, [r3, #4]
 800b0c2:	6863      	ldr	r3, [r4, #4]
 800b0c4:	bf08      	it	eq
 800b0c6:	6031      	streq	r1, [r6, #0]
 800b0c8:	5162      	str	r2, [r4, r5]
 800b0ca:	604b      	str	r3, [r1, #4]
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f104 060b 	add.w	r6, r4, #11
 800b0d2:	f000 fb8b 	bl	800b7ec <__malloc_unlock>
 800b0d6:	f026 0607 	bic.w	r6, r6, #7
 800b0da:	1d23      	adds	r3, r4, #4
 800b0dc:	1af2      	subs	r2, r6, r3
 800b0de:	d0b6      	beq.n	800b04e <_malloc_r+0x22>
 800b0e0:	1b9b      	subs	r3, r3, r6
 800b0e2:	50a3      	str	r3, [r4, r2]
 800b0e4:	e7b3      	b.n	800b04e <_malloc_r+0x22>
 800b0e6:	6862      	ldr	r2, [r4, #4]
 800b0e8:	42a3      	cmp	r3, r4
 800b0ea:	bf0c      	ite	eq
 800b0ec:	6032      	streq	r2, [r6, #0]
 800b0ee:	605a      	strne	r2, [r3, #4]
 800b0f0:	e7ec      	b.n	800b0cc <_malloc_r+0xa0>
 800b0f2:	4623      	mov	r3, r4
 800b0f4:	6864      	ldr	r4, [r4, #4]
 800b0f6:	e7b2      	b.n	800b05e <_malloc_r+0x32>
 800b0f8:	4634      	mov	r4, r6
 800b0fa:	6876      	ldr	r6, [r6, #4]
 800b0fc:	e7b9      	b.n	800b072 <_malloc_r+0x46>
 800b0fe:	230c      	movs	r3, #12
 800b100:	603b      	str	r3, [r7, #0]
 800b102:	4638      	mov	r0, r7
 800b104:	f000 fb72 	bl	800b7ec <__malloc_unlock>
 800b108:	e7a1      	b.n	800b04e <_malloc_r+0x22>
 800b10a:	6025      	str	r5, [r4, #0]
 800b10c:	e7de      	b.n	800b0cc <_malloc_r+0xa0>
 800b10e:	bf00      	nop
 800b110:	20014cc0 	.word	0x20014cc0

0800b114 <_puts_r>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	460e      	mov	r6, r1
 800b118:	4605      	mov	r5, r0
 800b11a:	b118      	cbz	r0, 800b124 <_puts_r+0x10>
 800b11c:	6983      	ldr	r3, [r0, #24]
 800b11e:	b90b      	cbnz	r3, 800b124 <_puts_r+0x10>
 800b120:	f000 fa58 	bl	800b5d4 <__sinit>
 800b124:	69ab      	ldr	r3, [r5, #24]
 800b126:	68ac      	ldr	r4, [r5, #8]
 800b128:	b913      	cbnz	r3, 800b130 <_puts_r+0x1c>
 800b12a:	4628      	mov	r0, r5
 800b12c:	f000 fa52 	bl	800b5d4 <__sinit>
 800b130:	4b2c      	ldr	r3, [pc, #176]	; (800b1e4 <_puts_r+0xd0>)
 800b132:	429c      	cmp	r4, r3
 800b134:	d120      	bne.n	800b178 <_puts_r+0x64>
 800b136:	686c      	ldr	r4, [r5, #4]
 800b138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b13a:	07db      	lsls	r3, r3, #31
 800b13c:	d405      	bmi.n	800b14a <_puts_r+0x36>
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	0598      	lsls	r0, r3, #22
 800b142:	d402      	bmi.n	800b14a <_puts_r+0x36>
 800b144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b146:	f000 fae3 	bl	800b710 <__retarget_lock_acquire_recursive>
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	0719      	lsls	r1, r3, #28
 800b14e:	d51d      	bpl.n	800b18c <_puts_r+0x78>
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	b1db      	cbz	r3, 800b18c <_puts_r+0x78>
 800b154:	3e01      	subs	r6, #1
 800b156:	68a3      	ldr	r3, [r4, #8]
 800b158:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b15c:	3b01      	subs	r3, #1
 800b15e:	60a3      	str	r3, [r4, #8]
 800b160:	bb39      	cbnz	r1, 800b1b2 <_puts_r+0x9e>
 800b162:	2b00      	cmp	r3, #0
 800b164:	da38      	bge.n	800b1d8 <_puts_r+0xc4>
 800b166:	4622      	mov	r2, r4
 800b168:	210a      	movs	r1, #10
 800b16a:	4628      	mov	r0, r5
 800b16c:	f000 f858 	bl	800b220 <__swbuf_r>
 800b170:	3001      	adds	r0, #1
 800b172:	d011      	beq.n	800b198 <_puts_r+0x84>
 800b174:	250a      	movs	r5, #10
 800b176:	e011      	b.n	800b19c <_puts_r+0x88>
 800b178:	4b1b      	ldr	r3, [pc, #108]	; (800b1e8 <_puts_r+0xd4>)
 800b17a:	429c      	cmp	r4, r3
 800b17c:	d101      	bne.n	800b182 <_puts_r+0x6e>
 800b17e:	68ac      	ldr	r4, [r5, #8]
 800b180:	e7da      	b.n	800b138 <_puts_r+0x24>
 800b182:	4b1a      	ldr	r3, [pc, #104]	; (800b1ec <_puts_r+0xd8>)
 800b184:	429c      	cmp	r4, r3
 800b186:	bf08      	it	eq
 800b188:	68ec      	ldreq	r4, [r5, #12]
 800b18a:	e7d5      	b.n	800b138 <_puts_r+0x24>
 800b18c:	4621      	mov	r1, r4
 800b18e:	4628      	mov	r0, r5
 800b190:	f000 f898 	bl	800b2c4 <__swsetup_r>
 800b194:	2800      	cmp	r0, #0
 800b196:	d0dd      	beq.n	800b154 <_puts_r+0x40>
 800b198:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b19c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b19e:	07da      	lsls	r2, r3, #31
 800b1a0:	d405      	bmi.n	800b1ae <_puts_r+0x9a>
 800b1a2:	89a3      	ldrh	r3, [r4, #12]
 800b1a4:	059b      	lsls	r3, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_puts_r+0x9a>
 800b1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1aa:	f000 fab2 	bl	800b712 <__retarget_lock_release_recursive>
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	da04      	bge.n	800b1c0 <_puts_r+0xac>
 800b1b6:	69a2      	ldr	r2, [r4, #24]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	dc06      	bgt.n	800b1ca <_puts_r+0xb6>
 800b1bc:	290a      	cmp	r1, #10
 800b1be:	d004      	beq.n	800b1ca <_puts_r+0xb6>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	1c5a      	adds	r2, r3, #1
 800b1c4:	6022      	str	r2, [r4, #0]
 800b1c6:	7019      	strb	r1, [r3, #0]
 800b1c8:	e7c5      	b.n	800b156 <_puts_r+0x42>
 800b1ca:	4622      	mov	r2, r4
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	f000 f827 	bl	800b220 <__swbuf_r>
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	d1bf      	bne.n	800b156 <_puts_r+0x42>
 800b1d6:	e7df      	b.n	800b198 <_puts_r+0x84>
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	250a      	movs	r5, #10
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	6022      	str	r2, [r4, #0]
 800b1e0:	701d      	strb	r5, [r3, #0]
 800b1e2:	e7db      	b.n	800b19c <_puts_r+0x88>
 800b1e4:	0800ba98 	.word	0x0800ba98
 800b1e8:	0800bab8 	.word	0x0800bab8
 800b1ec:	0800ba78 	.word	0x0800ba78

0800b1f0 <puts>:
 800b1f0:	4b02      	ldr	r3, [pc, #8]	; (800b1fc <puts+0xc>)
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	6818      	ldr	r0, [r3, #0]
 800b1f6:	f7ff bf8d 	b.w	800b114 <_puts_r>
 800b1fa:	bf00      	nop
 800b1fc:	20000034 	.word	0x20000034

0800b200 <_sbrk_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4d06      	ldr	r5, [pc, #24]	; (800b21c <_sbrk_r+0x1c>)
 800b204:	2300      	movs	r3, #0
 800b206:	4604      	mov	r4, r0
 800b208:	4608      	mov	r0, r1
 800b20a:	602b      	str	r3, [r5, #0]
 800b20c:	f000 fb8e 	bl	800b92c <_sbrk>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d102      	bne.n	800b21a <_sbrk_r+0x1a>
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	b103      	cbz	r3, 800b21a <_sbrk_r+0x1a>
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	20014ccc 	.word	0x20014ccc

0800b220 <__swbuf_r>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	460e      	mov	r6, r1
 800b224:	4614      	mov	r4, r2
 800b226:	4605      	mov	r5, r0
 800b228:	b118      	cbz	r0, 800b232 <__swbuf_r+0x12>
 800b22a:	6983      	ldr	r3, [r0, #24]
 800b22c:	b90b      	cbnz	r3, 800b232 <__swbuf_r+0x12>
 800b22e:	f000 f9d1 	bl	800b5d4 <__sinit>
 800b232:	4b21      	ldr	r3, [pc, #132]	; (800b2b8 <__swbuf_r+0x98>)
 800b234:	429c      	cmp	r4, r3
 800b236:	d12b      	bne.n	800b290 <__swbuf_r+0x70>
 800b238:	686c      	ldr	r4, [r5, #4]
 800b23a:	69a3      	ldr	r3, [r4, #24]
 800b23c:	60a3      	str	r3, [r4, #8]
 800b23e:	89a3      	ldrh	r3, [r4, #12]
 800b240:	071a      	lsls	r2, r3, #28
 800b242:	d52f      	bpl.n	800b2a4 <__swbuf_r+0x84>
 800b244:	6923      	ldr	r3, [r4, #16]
 800b246:	b36b      	cbz	r3, 800b2a4 <__swbuf_r+0x84>
 800b248:	6923      	ldr	r3, [r4, #16]
 800b24a:	6820      	ldr	r0, [r4, #0]
 800b24c:	1ac0      	subs	r0, r0, r3
 800b24e:	6963      	ldr	r3, [r4, #20]
 800b250:	b2f6      	uxtb	r6, r6
 800b252:	4283      	cmp	r3, r0
 800b254:	4637      	mov	r7, r6
 800b256:	dc04      	bgt.n	800b262 <__swbuf_r+0x42>
 800b258:	4621      	mov	r1, r4
 800b25a:	4628      	mov	r0, r5
 800b25c:	f000 f926 	bl	800b4ac <_fflush_r>
 800b260:	bb30      	cbnz	r0, 800b2b0 <__swbuf_r+0x90>
 800b262:	68a3      	ldr	r3, [r4, #8]
 800b264:	3b01      	subs	r3, #1
 800b266:	60a3      	str	r3, [r4, #8]
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	6022      	str	r2, [r4, #0]
 800b26e:	701e      	strb	r6, [r3, #0]
 800b270:	6963      	ldr	r3, [r4, #20]
 800b272:	3001      	adds	r0, #1
 800b274:	4283      	cmp	r3, r0
 800b276:	d004      	beq.n	800b282 <__swbuf_r+0x62>
 800b278:	89a3      	ldrh	r3, [r4, #12]
 800b27a:	07db      	lsls	r3, r3, #31
 800b27c:	d506      	bpl.n	800b28c <__swbuf_r+0x6c>
 800b27e:	2e0a      	cmp	r6, #10
 800b280:	d104      	bne.n	800b28c <__swbuf_r+0x6c>
 800b282:	4621      	mov	r1, r4
 800b284:	4628      	mov	r0, r5
 800b286:	f000 f911 	bl	800b4ac <_fflush_r>
 800b28a:	b988      	cbnz	r0, 800b2b0 <__swbuf_r+0x90>
 800b28c:	4638      	mov	r0, r7
 800b28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b290:	4b0a      	ldr	r3, [pc, #40]	; (800b2bc <__swbuf_r+0x9c>)
 800b292:	429c      	cmp	r4, r3
 800b294:	d101      	bne.n	800b29a <__swbuf_r+0x7a>
 800b296:	68ac      	ldr	r4, [r5, #8]
 800b298:	e7cf      	b.n	800b23a <__swbuf_r+0x1a>
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <__swbuf_r+0xa0>)
 800b29c:	429c      	cmp	r4, r3
 800b29e:	bf08      	it	eq
 800b2a0:	68ec      	ldreq	r4, [r5, #12]
 800b2a2:	e7ca      	b.n	800b23a <__swbuf_r+0x1a>
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	f000 f80c 	bl	800b2c4 <__swsetup_r>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d0cb      	beq.n	800b248 <__swbuf_r+0x28>
 800b2b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b2b4:	e7ea      	b.n	800b28c <__swbuf_r+0x6c>
 800b2b6:	bf00      	nop
 800b2b8:	0800ba98 	.word	0x0800ba98
 800b2bc:	0800bab8 	.word	0x0800bab8
 800b2c0:	0800ba78 	.word	0x0800ba78

0800b2c4 <__swsetup_r>:
 800b2c4:	4b32      	ldr	r3, [pc, #200]	; (800b390 <__swsetup_r+0xcc>)
 800b2c6:	b570      	push	{r4, r5, r6, lr}
 800b2c8:	681d      	ldr	r5, [r3, #0]
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	460c      	mov	r4, r1
 800b2ce:	b125      	cbz	r5, 800b2da <__swsetup_r+0x16>
 800b2d0:	69ab      	ldr	r3, [r5, #24]
 800b2d2:	b913      	cbnz	r3, 800b2da <__swsetup_r+0x16>
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	f000 f97d 	bl	800b5d4 <__sinit>
 800b2da:	4b2e      	ldr	r3, [pc, #184]	; (800b394 <__swsetup_r+0xd0>)
 800b2dc:	429c      	cmp	r4, r3
 800b2de:	d10f      	bne.n	800b300 <__swsetup_r+0x3c>
 800b2e0:	686c      	ldr	r4, [r5, #4]
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2e8:	0719      	lsls	r1, r3, #28
 800b2ea:	d42c      	bmi.n	800b346 <__swsetup_r+0x82>
 800b2ec:	06dd      	lsls	r5, r3, #27
 800b2ee:	d411      	bmi.n	800b314 <__swsetup_r+0x50>
 800b2f0:	2309      	movs	r3, #9
 800b2f2:	6033      	str	r3, [r6, #0]
 800b2f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2fe:	e03e      	b.n	800b37e <__swsetup_r+0xba>
 800b300:	4b25      	ldr	r3, [pc, #148]	; (800b398 <__swsetup_r+0xd4>)
 800b302:	429c      	cmp	r4, r3
 800b304:	d101      	bne.n	800b30a <__swsetup_r+0x46>
 800b306:	68ac      	ldr	r4, [r5, #8]
 800b308:	e7eb      	b.n	800b2e2 <__swsetup_r+0x1e>
 800b30a:	4b24      	ldr	r3, [pc, #144]	; (800b39c <__swsetup_r+0xd8>)
 800b30c:	429c      	cmp	r4, r3
 800b30e:	bf08      	it	eq
 800b310:	68ec      	ldreq	r4, [r5, #12]
 800b312:	e7e6      	b.n	800b2e2 <__swsetup_r+0x1e>
 800b314:	0758      	lsls	r0, r3, #29
 800b316:	d512      	bpl.n	800b33e <__swsetup_r+0x7a>
 800b318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b31a:	b141      	cbz	r1, 800b32e <__swsetup_r+0x6a>
 800b31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b320:	4299      	cmp	r1, r3
 800b322:	d002      	beq.n	800b32a <__swsetup_r+0x66>
 800b324:	4630      	mov	r0, r6
 800b326:	f7ff fe15 	bl	800af54 <_free_r>
 800b32a:	2300      	movs	r3, #0
 800b32c:	6363      	str	r3, [r4, #52]	; 0x34
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b334:	81a3      	strh	r3, [r4, #12]
 800b336:	2300      	movs	r3, #0
 800b338:	6063      	str	r3, [r4, #4]
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	f043 0308 	orr.w	r3, r3, #8
 800b344:	81a3      	strh	r3, [r4, #12]
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	b94b      	cbnz	r3, 800b35e <__swsetup_r+0x9a>
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b354:	d003      	beq.n	800b35e <__swsetup_r+0x9a>
 800b356:	4621      	mov	r1, r4
 800b358:	4630      	mov	r0, r6
 800b35a:	f000 fa01 	bl	800b760 <__smakebuf_r>
 800b35e:	89a0      	ldrh	r0, [r4, #12]
 800b360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b364:	f010 0301 	ands.w	r3, r0, #1
 800b368:	d00a      	beq.n	800b380 <__swsetup_r+0xbc>
 800b36a:	2300      	movs	r3, #0
 800b36c:	60a3      	str	r3, [r4, #8]
 800b36e:	6963      	ldr	r3, [r4, #20]
 800b370:	425b      	negs	r3, r3
 800b372:	61a3      	str	r3, [r4, #24]
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	b943      	cbnz	r3, 800b38a <__swsetup_r+0xc6>
 800b378:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b37c:	d1ba      	bne.n	800b2f4 <__swsetup_r+0x30>
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	0781      	lsls	r1, r0, #30
 800b382:	bf58      	it	pl
 800b384:	6963      	ldrpl	r3, [r4, #20]
 800b386:	60a3      	str	r3, [r4, #8]
 800b388:	e7f4      	b.n	800b374 <__swsetup_r+0xb0>
 800b38a:	2000      	movs	r0, #0
 800b38c:	e7f7      	b.n	800b37e <__swsetup_r+0xba>
 800b38e:	bf00      	nop
 800b390:	20000034 	.word	0x20000034
 800b394:	0800ba98 	.word	0x0800ba98
 800b398:	0800bab8 	.word	0x0800bab8
 800b39c:	0800ba78 	.word	0x0800ba78

0800b3a0 <__sflush_r>:
 800b3a0:	898a      	ldrh	r2, [r1, #12]
 800b3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	0710      	lsls	r0, r2, #28
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	d458      	bmi.n	800b460 <__sflush_r+0xc0>
 800b3ae:	684b      	ldr	r3, [r1, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	dc05      	bgt.n	800b3c0 <__sflush_r+0x20>
 800b3b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	dc02      	bgt.n	800b3c0 <__sflush_r+0x20>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3c2:	2e00      	cmp	r6, #0
 800b3c4:	d0f9      	beq.n	800b3ba <__sflush_r+0x1a>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3cc:	682f      	ldr	r7, [r5, #0]
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	d032      	beq.n	800b438 <__sflush_r+0x98>
 800b3d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	075a      	lsls	r2, r3, #29
 800b3d8:	d505      	bpl.n	800b3e6 <__sflush_r+0x46>
 800b3da:	6863      	ldr	r3, [r4, #4]
 800b3dc:	1ac0      	subs	r0, r0, r3
 800b3de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3e0:	b10b      	cbz	r3, 800b3e6 <__sflush_r+0x46>
 800b3e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3e4:	1ac0      	subs	r0, r0, r3
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3ec:	6a21      	ldr	r1, [r4, #32]
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	47b0      	blx	r6
 800b3f2:	1c43      	adds	r3, r0, #1
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	d106      	bne.n	800b406 <__sflush_r+0x66>
 800b3f8:	6829      	ldr	r1, [r5, #0]
 800b3fa:	291d      	cmp	r1, #29
 800b3fc:	d82c      	bhi.n	800b458 <__sflush_r+0xb8>
 800b3fe:	4a2a      	ldr	r2, [pc, #168]	; (800b4a8 <__sflush_r+0x108>)
 800b400:	40ca      	lsrs	r2, r1
 800b402:	07d6      	lsls	r6, r2, #31
 800b404:	d528      	bpl.n	800b458 <__sflush_r+0xb8>
 800b406:	2200      	movs	r2, #0
 800b408:	6062      	str	r2, [r4, #4]
 800b40a:	04d9      	lsls	r1, r3, #19
 800b40c:	6922      	ldr	r2, [r4, #16]
 800b40e:	6022      	str	r2, [r4, #0]
 800b410:	d504      	bpl.n	800b41c <__sflush_r+0x7c>
 800b412:	1c42      	adds	r2, r0, #1
 800b414:	d101      	bne.n	800b41a <__sflush_r+0x7a>
 800b416:	682b      	ldr	r3, [r5, #0]
 800b418:	b903      	cbnz	r3, 800b41c <__sflush_r+0x7c>
 800b41a:	6560      	str	r0, [r4, #84]	; 0x54
 800b41c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b41e:	602f      	str	r7, [r5, #0]
 800b420:	2900      	cmp	r1, #0
 800b422:	d0ca      	beq.n	800b3ba <__sflush_r+0x1a>
 800b424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b428:	4299      	cmp	r1, r3
 800b42a:	d002      	beq.n	800b432 <__sflush_r+0x92>
 800b42c:	4628      	mov	r0, r5
 800b42e:	f7ff fd91 	bl	800af54 <_free_r>
 800b432:	2000      	movs	r0, #0
 800b434:	6360      	str	r0, [r4, #52]	; 0x34
 800b436:	e7c1      	b.n	800b3bc <__sflush_r+0x1c>
 800b438:	6a21      	ldr	r1, [r4, #32]
 800b43a:	2301      	movs	r3, #1
 800b43c:	4628      	mov	r0, r5
 800b43e:	47b0      	blx	r6
 800b440:	1c41      	adds	r1, r0, #1
 800b442:	d1c7      	bne.n	800b3d4 <__sflush_r+0x34>
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d0c4      	beq.n	800b3d4 <__sflush_r+0x34>
 800b44a:	2b1d      	cmp	r3, #29
 800b44c:	d001      	beq.n	800b452 <__sflush_r+0xb2>
 800b44e:	2b16      	cmp	r3, #22
 800b450:	d101      	bne.n	800b456 <__sflush_r+0xb6>
 800b452:	602f      	str	r7, [r5, #0]
 800b454:	e7b1      	b.n	800b3ba <__sflush_r+0x1a>
 800b456:	89a3      	ldrh	r3, [r4, #12]
 800b458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	e7ad      	b.n	800b3bc <__sflush_r+0x1c>
 800b460:	690f      	ldr	r7, [r1, #16]
 800b462:	2f00      	cmp	r7, #0
 800b464:	d0a9      	beq.n	800b3ba <__sflush_r+0x1a>
 800b466:	0793      	lsls	r3, r2, #30
 800b468:	680e      	ldr	r6, [r1, #0]
 800b46a:	bf08      	it	eq
 800b46c:	694b      	ldreq	r3, [r1, #20]
 800b46e:	600f      	str	r7, [r1, #0]
 800b470:	bf18      	it	ne
 800b472:	2300      	movne	r3, #0
 800b474:	eba6 0807 	sub.w	r8, r6, r7
 800b478:	608b      	str	r3, [r1, #8]
 800b47a:	f1b8 0f00 	cmp.w	r8, #0
 800b47e:	dd9c      	ble.n	800b3ba <__sflush_r+0x1a>
 800b480:	6a21      	ldr	r1, [r4, #32]
 800b482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b484:	4643      	mov	r3, r8
 800b486:	463a      	mov	r2, r7
 800b488:	4628      	mov	r0, r5
 800b48a:	47b0      	blx	r6
 800b48c:	2800      	cmp	r0, #0
 800b48e:	dc06      	bgt.n	800b49e <__sflush_r+0xfe>
 800b490:	89a3      	ldrh	r3, [r4, #12]
 800b492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b496:	81a3      	strh	r3, [r4, #12]
 800b498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b49c:	e78e      	b.n	800b3bc <__sflush_r+0x1c>
 800b49e:	4407      	add	r7, r0
 800b4a0:	eba8 0800 	sub.w	r8, r8, r0
 800b4a4:	e7e9      	b.n	800b47a <__sflush_r+0xda>
 800b4a6:	bf00      	nop
 800b4a8:	20400001 	.word	0x20400001

0800b4ac <_fflush_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	690b      	ldr	r3, [r1, #16]
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	b913      	cbnz	r3, 800b4bc <_fflush_r+0x10>
 800b4b6:	2500      	movs	r5, #0
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	b118      	cbz	r0, 800b4c6 <_fflush_r+0x1a>
 800b4be:	6983      	ldr	r3, [r0, #24]
 800b4c0:	b90b      	cbnz	r3, 800b4c6 <_fflush_r+0x1a>
 800b4c2:	f000 f887 	bl	800b5d4 <__sinit>
 800b4c6:	4b14      	ldr	r3, [pc, #80]	; (800b518 <_fflush_r+0x6c>)
 800b4c8:	429c      	cmp	r4, r3
 800b4ca:	d11b      	bne.n	800b504 <_fflush_r+0x58>
 800b4cc:	686c      	ldr	r4, [r5, #4]
 800b4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0ef      	beq.n	800b4b6 <_fflush_r+0xa>
 800b4d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4d8:	07d0      	lsls	r0, r2, #31
 800b4da:	d404      	bmi.n	800b4e6 <_fflush_r+0x3a>
 800b4dc:	0599      	lsls	r1, r3, #22
 800b4de:	d402      	bmi.n	800b4e6 <_fflush_r+0x3a>
 800b4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4e2:	f000 f915 	bl	800b710 <__retarget_lock_acquire_recursive>
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	f7ff ff59 	bl	800b3a0 <__sflush_r>
 800b4ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4f0:	07da      	lsls	r2, r3, #31
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	d4e0      	bmi.n	800b4b8 <_fflush_r+0xc>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	059b      	lsls	r3, r3, #22
 800b4fa:	d4dd      	bmi.n	800b4b8 <_fflush_r+0xc>
 800b4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4fe:	f000 f908 	bl	800b712 <__retarget_lock_release_recursive>
 800b502:	e7d9      	b.n	800b4b8 <_fflush_r+0xc>
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <_fflush_r+0x70>)
 800b506:	429c      	cmp	r4, r3
 800b508:	d101      	bne.n	800b50e <_fflush_r+0x62>
 800b50a:	68ac      	ldr	r4, [r5, #8]
 800b50c:	e7df      	b.n	800b4ce <_fflush_r+0x22>
 800b50e:	4b04      	ldr	r3, [pc, #16]	; (800b520 <_fflush_r+0x74>)
 800b510:	429c      	cmp	r4, r3
 800b512:	bf08      	it	eq
 800b514:	68ec      	ldreq	r4, [r5, #12]
 800b516:	e7da      	b.n	800b4ce <_fflush_r+0x22>
 800b518:	0800ba98 	.word	0x0800ba98
 800b51c:	0800bab8 	.word	0x0800bab8
 800b520:	0800ba78 	.word	0x0800ba78

0800b524 <std>:
 800b524:	2300      	movs	r3, #0
 800b526:	b510      	push	{r4, lr}
 800b528:	4604      	mov	r4, r0
 800b52a:	e9c0 3300 	strd	r3, r3, [r0]
 800b52e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b532:	6083      	str	r3, [r0, #8]
 800b534:	8181      	strh	r1, [r0, #12]
 800b536:	6643      	str	r3, [r0, #100]	; 0x64
 800b538:	81c2      	strh	r2, [r0, #14]
 800b53a:	6183      	str	r3, [r0, #24]
 800b53c:	4619      	mov	r1, r3
 800b53e:	2208      	movs	r2, #8
 800b540:	305c      	adds	r0, #92	; 0x5c
 800b542:	f7ff fcff 	bl	800af44 <memset>
 800b546:	4b05      	ldr	r3, [pc, #20]	; (800b55c <std+0x38>)
 800b548:	6263      	str	r3, [r4, #36]	; 0x24
 800b54a:	4b05      	ldr	r3, [pc, #20]	; (800b560 <std+0x3c>)
 800b54c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b54e:	4b05      	ldr	r3, [pc, #20]	; (800b564 <std+0x40>)
 800b550:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b552:	4b05      	ldr	r3, [pc, #20]	; (800b568 <std+0x44>)
 800b554:	6224      	str	r4, [r4, #32]
 800b556:	6323      	str	r3, [r4, #48]	; 0x30
 800b558:	bd10      	pop	{r4, pc}
 800b55a:	bf00      	nop
 800b55c:	0800b7f9 	.word	0x0800b7f9
 800b560:	0800b81b 	.word	0x0800b81b
 800b564:	0800b853 	.word	0x0800b853
 800b568:	0800b877 	.word	0x0800b877

0800b56c <_cleanup_r>:
 800b56c:	4901      	ldr	r1, [pc, #4]	; (800b574 <_cleanup_r+0x8>)
 800b56e:	f000 b8af 	b.w	800b6d0 <_fwalk_reent>
 800b572:	bf00      	nop
 800b574:	0800b4ad 	.word	0x0800b4ad

0800b578 <__sfmoreglue>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	2268      	movs	r2, #104	; 0x68
 800b57c:	1e4d      	subs	r5, r1, #1
 800b57e:	4355      	muls	r5, r2
 800b580:	460e      	mov	r6, r1
 800b582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b586:	f7ff fd51 	bl	800b02c <_malloc_r>
 800b58a:	4604      	mov	r4, r0
 800b58c:	b140      	cbz	r0, 800b5a0 <__sfmoreglue+0x28>
 800b58e:	2100      	movs	r1, #0
 800b590:	e9c0 1600 	strd	r1, r6, [r0]
 800b594:	300c      	adds	r0, #12
 800b596:	60a0      	str	r0, [r4, #8]
 800b598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b59c:	f7ff fcd2 	bl	800af44 <memset>
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}

0800b5a4 <__sfp_lock_acquire>:
 800b5a4:	4801      	ldr	r0, [pc, #4]	; (800b5ac <__sfp_lock_acquire+0x8>)
 800b5a6:	f000 b8b3 	b.w	800b710 <__retarget_lock_acquire_recursive>
 800b5aa:	bf00      	nop
 800b5ac:	20014cc9 	.word	0x20014cc9

0800b5b0 <__sfp_lock_release>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	; (800b5b8 <__sfp_lock_release+0x8>)
 800b5b2:	f000 b8ae 	b.w	800b712 <__retarget_lock_release_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	20014cc9 	.word	0x20014cc9

0800b5bc <__sinit_lock_acquire>:
 800b5bc:	4801      	ldr	r0, [pc, #4]	; (800b5c4 <__sinit_lock_acquire+0x8>)
 800b5be:	f000 b8a7 	b.w	800b710 <__retarget_lock_acquire_recursive>
 800b5c2:	bf00      	nop
 800b5c4:	20014cca 	.word	0x20014cca

0800b5c8 <__sinit_lock_release>:
 800b5c8:	4801      	ldr	r0, [pc, #4]	; (800b5d0 <__sinit_lock_release+0x8>)
 800b5ca:	f000 b8a2 	b.w	800b712 <__retarget_lock_release_recursive>
 800b5ce:	bf00      	nop
 800b5d0:	20014cca 	.word	0x20014cca

0800b5d4 <__sinit>:
 800b5d4:	b510      	push	{r4, lr}
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	f7ff fff0 	bl	800b5bc <__sinit_lock_acquire>
 800b5dc:	69a3      	ldr	r3, [r4, #24]
 800b5de:	b11b      	cbz	r3, 800b5e8 <__sinit+0x14>
 800b5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5e4:	f7ff bff0 	b.w	800b5c8 <__sinit_lock_release>
 800b5e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b5ec:	6523      	str	r3, [r4, #80]	; 0x50
 800b5ee:	4b13      	ldr	r3, [pc, #76]	; (800b63c <__sinit+0x68>)
 800b5f0:	4a13      	ldr	r2, [pc, #76]	; (800b640 <__sinit+0x6c>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	bf04      	itt	eq
 800b5fa:	2301      	moveq	r3, #1
 800b5fc:	61a3      	streq	r3, [r4, #24]
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 f820 	bl	800b644 <__sfp>
 800b604:	6060      	str	r0, [r4, #4]
 800b606:	4620      	mov	r0, r4
 800b608:	f000 f81c 	bl	800b644 <__sfp>
 800b60c:	60a0      	str	r0, [r4, #8]
 800b60e:	4620      	mov	r0, r4
 800b610:	f000 f818 	bl	800b644 <__sfp>
 800b614:	2200      	movs	r2, #0
 800b616:	60e0      	str	r0, [r4, #12]
 800b618:	2104      	movs	r1, #4
 800b61a:	6860      	ldr	r0, [r4, #4]
 800b61c:	f7ff ff82 	bl	800b524 <std>
 800b620:	68a0      	ldr	r0, [r4, #8]
 800b622:	2201      	movs	r2, #1
 800b624:	2109      	movs	r1, #9
 800b626:	f7ff ff7d 	bl	800b524 <std>
 800b62a:	68e0      	ldr	r0, [r4, #12]
 800b62c:	2202      	movs	r2, #2
 800b62e:	2112      	movs	r1, #18
 800b630:	f7ff ff78 	bl	800b524 <std>
 800b634:	2301      	movs	r3, #1
 800b636:	61a3      	str	r3, [r4, #24]
 800b638:	e7d2      	b.n	800b5e0 <__sinit+0xc>
 800b63a:	bf00      	nop
 800b63c:	0800ba74 	.word	0x0800ba74
 800b640:	0800b56d 	.word	0x0800b56d

0800b644 <__sfp>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	4607      	mov	r7, r0
 800b648:	f7ff ffac 	bl	800b5a4 <__sfp_lock_acquire>
 800b64c:	4b1e      	ldr	r3, [pc, #120]	; (800b6c8 <__sfp+0x84>)
 800b64e:	681e      	ldr	r6, [r3, #0]
 800b650:	69b3      	ldr	r3, [r6, #24]
 800b652:	b913      	cbnz	r3, 800b65a <__sfp+0x16>
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff ffbd 	bl	800b5d4 <__sinit>
 800b65a:	3648      	adds	r6, #72	; 0x48
 800b65c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b660:	3b01      	subs	r3, #1
 800b662:	d503      	bpl.n	800b66c <__sfp+0x28>
 800b664:	6833      	ldr	r3, [r6, #0]
 800b666:	b30b      	cbz	r3, 800b6ac <__sfp+0x68>
 800b668:	6836      	ldr	r6, [r6, #0]
 800b66a:	e7f7      	b.n	800b65c <__sfp+0x18>
 800b66c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b670:	b9d5      	cbnz	r5, 800b6a8 <__sfp+0x64>
 800b672:	4b16      	ldr	r3, [pc, #88]	; (800b6cc <__sfp+0x88>)
 800b674:	60e3      	str	r3, [r4, #12]
 800b676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b67a:	6665      	str	r5, [r4, #100]	; 0x64
 800b67c:	f000 f847 	bl	800b70e <__retarget_lock_init_recursive>
 800b680:	f7ff ff96 	bl	800b5b0 <__sfp_lock_release>
 800b684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b68c:	6025      	str	r5, [r4, #0]
 800b68e:	61a5      	str	r5, [r4, #24]
 800b690:	2208      	movs	r2, #8
 800b692:	4629      	mov	r1, r5
 800b694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b698:	f7ff fc54 	bl	800af44 <memset>
 800b69c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a8:	3468      	adds	r4, #104	; 0x68
 800b6aa:	e7d9      	b.n	800b660 <__sfp+0x1c>
 800b6ac:	2104      	movs	r1, #4
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f7ff ff62 	bl	800b578 <__sfmoreglue>
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	6030      	str	r0, [r6, #0]
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d1d5      	bne.n	800b668 <__sfp+0x24>
 800b6bc:	f7ff ff78 	bl	800b5b0 <__sfp_lock_release>
 800b6c0:	230c      	movs	r3, #12
 800b6c2:	603b      	str	r3, [r7, #0]
 800b6c4:	e7ee      	b.n	800b6a4 <__sfp+0x60>
 800b6c6:	bf00      	nop
 800b6c8:	0800ba74 	.word	0x0800ba74
 800b6cc:	ffff0001 	.word	0xffff0001

0800b6d0 <_fwalk_reent>:
 800b6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	4688      	mov	r8, r1
 800b6d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b6dc:	2700      	movs	r7, #0
 800b6de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6e2:	f1b9 0901 	subs.w	r9, r9, #1
 800b6e6:	d505      	bpl.n	800b6f4 <_fwalk_reent+0x24>
 800b6e8:	6824      	ldr	r4, [r4, #0]
 800b6ea:	2c00      	cmp	r4, #0
 800b6ec:	d1f7      	bne.n	800b6de <_fwalk_reent+0xe>
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f4:	89ab      	ldrh	r3, [r5, #12]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d907      	bls.n	800b70a <_fwalk_reent+0x3a>
 800b6fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6fe:	3301      	adds	r3, #1
 800b700:	d003      	beq.n	800b70a <_fwalk_reent+0x3a>
 800b702:	4629      	mov	r1, r5
 800b704:	4630      	mov	r0, r6
 800b706:	47c0      	blx	r8
 800b708:	4307      	orrs	r7, r0
 800b70a:	3568      	adds	r5, #104	; 0x68
 800b70c:	e7e9      	b.n	800b6e2 <_fwalk_reent+0x12>

0800b70e <__retarget_lock_init_recursive>:
 800b70e:	4770      	bx	lr

0800b710 <__retarget_lock_acquire_recursive>:
 800b710:	4770      	bx	lr

0800b712 <__retarget_lock_release_recursive>:
 800b712:	4770      	bx	lr

0800b714 <__swhatbuf_r>:
 800b714:	b570      	push	{r4, r5, r6, lr}
 800b716:	460e      	mov	r6, r1
 800b718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71c:	2900      	cmp	r1, #0
 800b71e:	b096      	sub	sp, #88	; 0x58
 800b720:	4614      	mov	r4, r2
 800b722:	461d      	mov	r5, r3
 800b724:	da08      	bge.n	800b738 <__swhatbuf_r+0x24>
 800b726:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	602a      	str	r2, [r5, #0]
 800b72e:	061a      	lsls	r2, r3, #24
 800b730:	d410      	bmi.n	800b754 <__swhatbuf_r+0x40>
 800b732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b736:	e00e      	b.n	800b756 <__swhatbuf_r+0x42>
 800b738:	466a      	mov	r2, sp
 800b73a:	f000 f8b1 	bl	800b8a0 <_fstat_r>
 800b73e:	2800      	cmp	r0, #0
 800b740:	dbf1      	blt.n	800b726 <__swhatbuf_r+0x12>
 800b742:	9a01      	ldr	r2, [sp, #4]
 800b744:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b748:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b74c:	425a      	negs	r2, r3
 800b74e:	415a      	adcs	r2, r3
 800b750:	602a      	str	r2, [r5, #0]
 800b752:	e7ee      	b.n	800b732 <__swhatbuf_r+0x1e>
 800b754:	2340      	movs	r3, #64	; 0x40
 800b756:	2000      	movs	r0, #0
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	b016      	add	sp, #88	; 0x58
 800b75c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b760 <__smakebuf_r>:
 800b760:	898b      	ldrh	r3, [r1, #12]
 800b762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b764:	079d      	lsls	r5, r3, #30
 800b766:	4606      	mov	r6, r0
 800b768:	460c      	mov	r4, r1
 800b76a:	d507      	bpl.n	800b77c <__smakebuf_r+0x1c>
 800b76c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	6123      	str	r3, [r4, #16]
 800b774:	2301      	movs	r3, #1
 800b776:	6163      	str	r3, [r4, #20]
 800b778:	b002      	add	sp, #8
 800b77a:	bd70      	pop	{r4, r5, r6, pc}
 800b77c:	ab01      	add	r3, sp, #4
 800b77e:	466a      	mov	r2, sp
 800b780:	f7ff ffc8 	bl	800b714 <__swhatbuf_r>
 800b784:	9900      	ldr	r1, [sp, #0]
 800b786:	4605      	mov	r5, r0
 800b788:	4630      	mov	r0, r6
 800b78a:	f7ff fc4f 	bl	800b02c <_malloc_r>
 800b78e:	b948      	cbnz	r0, 800b7a4 <__smakebuf_r+0x44>
 800b790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b794:	059a      	lsls	r2, r3, #22
 800b796:	d4ef      	bmi.n	800b778 <__smakebuf_r+0x18>
 800b798:	f023 0303 	bic.w	r3, r3, #3
 800b79c:	f043 0302 	orr.w	r3, r3, #2
 800b7a0:	81a3      	strh	r3, [r4, #12]
 800b7a2:	e7e3      	b.n	800b76c <__smakebuf_r+0xc>
 800b7a4:	4b0d      	ldr	r3, [pc, #52]	; (800b7dc <__smakebuf_r+0x7c>)
 800b7a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	6020      	str	r0, [r4, #0]
 800b7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7b0:	81a3      	strh	r3, [r4, #12]
 800b7b2:	9b00      	ldr	r3, [sp, #0]
 800b7b4:	6163      	str	r3, [r4, #20]
 800b7b6:	9b01      	ldr	r3, [sp, #4]
 800b7b8:	6120      	str	r0, [r4, #16]
 800b7ba:	b15b      	cbz	r3, 800b7d4 <__smakebuf_r+0x74>
 800b7bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f000 f87f 	bl	800b8c4 <_isatty_r>
 800b7c6:	b128      	cbz	r0, 800b7d4 <__smakebuf_r+0x74>
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	f023 0303 	bic.w	r3, r3, #3
 800b7ce:	f043 0301 	orr.w	r3, r3, #1
 800b7d2:	81a3      	strh	r3, [r4, #12]
 800b7d4:	89a0      	ldrh	r0, [r4, #12]
 800b7d6:	4305      	orrs	r5, r0
 800b7d8:	81a5      	strh	r5, [r4, #12]
 800b7da:	e7cd      	b.n	800b778 <__smakebuf_r+0x18>
 800b7dc:	0800b56d 	.word	0x0800b56d

0800b7e0 <__malloc_lock>:
 800b7e0:	4801      	ldr	r0, [pc, #4]	; (800b7e8 <__malloc_lock+0x8>)
 800b7e2:	f7ff bf95 	b.w	800b710 <__retarget_lock_acquire_recursive>
 800b7e6:	bf00      	nop
 800b7e8:	20014cc8 	.word	0x20014cc8

0800b7ec <__malloc_unlock>:
 800b7ec:	4801      	ldr	r0, [pc, #4]	; (800b7f4 <__malloc_unlock+0x8>)
 800b7ee:	f7ff bf90 	b.w	800b712 <__retarget_lock_release_recursive>
 800b7f2:	bf00      	nop
 800b7f4:	20014cc8 	.word	0x20014cc8

0800b7f8 <__sread>:
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b800:	f000 f882 	bl	800b908 <_read_r>
 800b804:	2800      	cmp	r0, #0
 800b806:	bfab      	itete	ge
 800b808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b80a:	89a3      	ldrhlt	r3, [r4, #12]
 800b80c:	181b      	addge	r3, r3, r0
 800b80e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b812:	bfac      	ite	ge
 800b814:	6563      	strge	r3, [r4, #84]	; 0x54
 800b816:	81a3      	strhlt	r3, [r4, #12]
 800b818:	bd10      	pop	{r4, pc}

0800b81a <__swrite>:
 800b81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81e:	461f      	mov	r7, r3
 800b820:	898b      	ldrh	r3, [r1, #12]
 800b822:	05db      	lsls	r3, r3, #23
 800b824:	4605      	mov	r5, r0
 800b826:	460c      	mov	r4, r1
 800b828:	4616      	mov	r6, r2
 800b82a:	d505      	bpl.n	800b838 <__swrite+0x1e>
 800b82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b830:	2302      	movs	r3, #2
 800b832:	2200      	movs	r2, #0
 800b834:	f000 f856 	bl	800b8e4 <_lseek_r>
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	4632      	mov	r2, r6
 800b846:	463b      	mov	r3, r7
 800b848:	4628      	mov	r0, r5
 800b84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b84e:	f7ff b80d 	b.w	800a86c <_write_r>

0800b852 <__sseek>:
 800b852:	b510      	push	{r4, lr}
 800b854:	460c      	mov	r4, r1
 800b856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b85a:	f000 f843 	bl	800b8e4 <_lseek_r>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	bf15      	itete	ne
 800b864:	6560      	strne	r0, [r4, #84]	; 0x54
 800b866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b86a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b86e:	81a3      	strheq	r3, [r4, #12]
 800b870:	bf18      	it	ne
 800b872:	81a3      	strhne	r3, [r4, #12]
 800b874:	bd10      	pop	{r4, pc}

0800b876 <__sclose>:
 800b876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b87a:	f000 b801 	b.w	800b880 <_close_r>
	...

0800b880 <_close_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d06      	ldr	r5, [pc, #24]	; (800b89c <_close_r+0x1c>)
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	602b      	str	r3, [r5, #0]
 800b88c:	f7f5 fb7b 	bl	8000f86 <_close>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_close_r+0x1a>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b103      	cbz	r3, 800b89a <_close_r+0x1a>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	20014ccc 	.word	0x20014ccc

0800b8a0 <_fstat_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4d07      	ldr	r5, [pc, #28]	; (800b8c0 <_fstat_r+0x20>)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	f7f5 fb76 	bl	8000f9e <_fstat>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	d102      	bne.n	800b8bc <_fstat_r+0x1c>
 800b8b6:	682b      	ldr	r3, [r5, #0]
 800b8b8:	b103      	cbz	r3, 800b8bc <_fstat_r+0x1c>
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	bd38      	pop	{r3, r4, r5, pc}
 800b8be:	bf00      	nop
 800b8c0:	20014ccc 	.word	0x20014ccc

0800b8c4 <_isatty_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d06      	ldr	r5, [pc, #24]	; (800b8e0 <_isatty_r+0x1c>)
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	4608      	mov	r0, r1
 800b8ce:	602b      	str	r3, [r5, #0]
 800b8d0:	f7f5 fb75 	bl	8000fbe <_isatty>
 800b8d4:	1c43      	adds	r3, r0, #1
 800b8d6:	d102      	bne.n	800b8de <_isatty_r+0x1a>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	b103      	cbz	r3, 800b8de <_isatty_r+0x1a>
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	20014ccc 	.word	0x20014ccc

0800b8e4 <_lseek_r>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	4d07      	ldr	r5, [pc, #28]	; (800b904 <_lseek_r+0x20>)
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	4608      	mov	r0, r1
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	602a      	str	r2, [r5, #0]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	f7f5 fb6e 	bl	8000fd4 <_lseek>
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	d102      	bne.n	800b902 <_lseek_r+0x1e>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	b103      	cbz	r3, 800b902 <_lseek_r+0x1e>
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	20014ccc 	.word	0x20014ccc

0800b908 <_read_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d07      	ldr	r5, [pc, #28]	; (800b928 <_read_r+0x20>)
 800b90c:	4604      	mov	r4, r0
 800b90e:	4608      	mov	r0, r1
 800b910:	4611      	mov	r1, r2
 800b912:	2200      	movs	r2, #0
 800b914:	602a      	str	r2, [r5, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	f7f5 fb18 	bl	8000f4c <_read>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d102      	bne.n	800b926 <_read_r+0x1e>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	b103      	cbz	r3, 800b926 <_read_r+0x1e>
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	20014ccc 	.word	0x20014ccc

0800b92c <_sbrk>:
 800b92c:	4a04      	ldr	r2, [pc, #16]	; (800b940 <_sbrk+0x14>)
 800b92e:	6811      	ldr	r1, [r2, #0]
 800b930:	4603      	mov	r3, r0
 800b932:	b909      	cbnz	r1, 800b938 <_sbrk+0xc>
 800b934:	4903      	ldr	r1, [pc, #12]	; (800b944 <_sbrk+0x18>)
 800b936:	6011      	str	r1, [r2, #0]
 800b938:	6810      	ldr	r0, [r2, #0]
 800b93a:	4403      	add	r3, r0
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	4770      	bx	lr
 800b940:	20014cd0 	.word	0x20014cd0
 800b944:	20014cd8 	.word	0x20014cd8

0800b948 <_init>:
 800b948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94a:	bf00      	nop
 800b94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94e:	bc08      	pop	{r3}
 800b950:	469e      	mov	lr, r3
 800b952:	4770      	bx	lr

0800b954 <_fini>:
 800b954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b956:	bf00      	nop
 800b958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b95a:	bc08      	pop	{r3}
 800b95c:	469e      	mov	lr, r3
 800b95e:	4770      	bx	lr
