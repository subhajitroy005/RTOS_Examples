
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba8c  0800ba8c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba8c  0800ba8c  0001ba8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba94  0800ba94  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba94  0800ba94  0001ba94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba98  0800ba98  0001ba98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800ba9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014c3c  20000098  0800bb34  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014cd4  0800bb34  00024cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023337  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f3b  00000000  00000000  000433ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  00048340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bb0  00000000  00000000  0004a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce0c  00000000  00000000  0004bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024c08  00000000  00000000  00068adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a406f  00000000  00000000  0008d6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131753  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080b8  00000000  00000000  001317a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b958 	.word	0x0800b958

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	0800b958 	.word	0x0800b958

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001300c 	.word	0x2001300c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fd65 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f879 	bl	8000678 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000586:	f000 f8e1 	bl	800074c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9c1 	bl	8000910 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058e:	f000 f8fd 	bl	800078c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000592:	f000 f929 	bl	80007e8 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000596:	f000 f955 	bl	8000844 <MX_I2S3_Init>
  MX_SPI1_Init();
 800059a:	f000 f983 	bl	80008a4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800059e:	f00a fd6d 	bl	800b07c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  // DWT cycle counter enable
  DWT_CTRL |= (1<<0);
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <main+0xe4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <main+0xe4>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005ae:	f008 fdd1 	bl	8009154 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start(); // strat the segger trace
 80005b2:	f009 ff93 	bl	800a4dc <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task_green_handler, "Gr", 200, NULL , 2, &task_h_green_led);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	22c8      	movs	r2, #200	; 0xc8
 80005c4:	4926      	ldr	r1, [pc, #152]	; (8000660 <main+0xe8>)
 80005c6:	4827      	ldr	r0, [pc, #156]	; (8000664 <main+0xec>)
 80005c8:	f007 fbd8 	bl	8007d7c <xTaskCreate>
 80005cc:	61f8      	str	r0, [r7, #28]
    configASSERT(status == pdPASS); // Assert here if the task creation has an error
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00a      	beq.n	80005ea <main+0x72>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e6:	bf00      	nop
 80005e8:	e7fe      	b.n	80005e8 <main+0x70>

  status = xTaskCreate(task_blue_handler, "Bl", 200, NULL, 2, &task_h_blue_led);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	22c8      	movs	r2, #200	; 0xc8
 80005f6:	491c      	ldr	r1, [pc, #112]	; (8000668 <main+0xf0>)
 80005f8:	481c      	ldr	r0, [pc, #112]	; (800066c <main+0xf4>)
 80005fa:	f007 fbbf 	bl	8007d7c <xTaskCreate>
 80005fe:	61f8      	str	r0, [r7, #28]
    configASSERT(status == pdPASS);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d00a      	beq.n	800061c <main+0xa4>
        __asm volatile
 8000606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	617b      	str	r3, [r7, #20]
    }
 8000618:	bf00      	nop
 800061a:	e7fe      	b.n	800061a <main+0xa2>

  status = xTaskCreate(task_red_handler, "Rd", 200, NULL, 2, &task_h_red_led);
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2302      	movs	r3, #2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	4911      	ldr	r1, [pc, #68]	; (8000670 <main+0xf8>)
 800062c:	4811      	ldr	r0, [pc, #68]	; (8000674 <main+0xfc>)
 800062e:	f007 fba5 	bl	8007d7c <xTaskCreate>
 8000632:	61f8      	str	r0, [r7, #28]
    configASSERT(status == pdPASS);
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d00a      	beq.n	8000650 <main+0xd8>
        __asm volatile
 800063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063e:	f383 8811 	msr	BASEPRI, r3
 8000642:	f3bf 8f6f 	isb	sy
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	613b      	str	r3, [r7, #16]
    }
 800064c:	bf00      	nop
 800064e:	e7fe      	b.n	800064e <main+0xd6>

    vTaskStartScheduler();
 8000650:	f007 fd30 	bl	80080b4 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000654:	f00a fd38 	bl	800b0c8 <MX_USB_HOST_Process>
 8000658:	e7fc      	b.n	8000654 <main+0xdc>
 800065a:	bf00      	nop
 800065c:	e0001000 	.word	0xe0001000
 8000660:	0800b970 	.word	0x0800b970
 8000664:	08000ac5 	.word	0x08000ac5
 8000668:	0800b974 	.word	0x0800b974
 800066c:	08000b2d 	.word	0x08000b2d
 8000670:	0800b978 	.word	0x0800b978
 8000674:	08000af9 	.word	0x08000af9

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f00b f852 	bl	800b730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f6:	2307      	movs	r3, #7
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 f992 	bl	8003a28 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070a:	f000 fa3b 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fbf4 	bl	8003f18 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000736:	f000 fa25 	bl	8000b84 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000762:	2301      	movs	r3, #1
 8000764:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000766:	23c8      	movs	r3, #200	; 0xc8
 8000768:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800076a:	2305      	movs	r3, #5
 800076c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fe21 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000780:	f000 fa00 	bl	8000b84 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f002 fb49 	bl	8002e60 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f9d6 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000b4 	.word	0x200000b4
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2S2_Init+0x50>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_I2S2_Init+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2S2_Init+0x50>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2S2_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_I2S2_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_I2S2_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_I2S2_Init+0x50>)
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <MX_I2S2_Init+0x58>)
 8000810:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_I2S2_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_I2S2_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_I2S2_Init+0x50>)
 8000820:	2201      	movs	r2, #1
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_I2S2_Init+0x50>)
 8000826:	f002 fc5f 	bl	80030e8 <HAL_I2S_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 f9a8 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000108 	.word	0x20000108
 800083c:	40003800 	.word	0x40003800
 8000840:	00017700 	.word	0x00017700

08000844 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_I2S3_Init+0x54>)
 800084a:	4a14      	ldr	r2, [pc, #80]	; (800089c <MX_I2S3_Init+0x58>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2S3_Init+0x54>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_I2S3_Init+0x54>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_I2S3_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_I2S3_Init+0x54>)
 8000864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000868:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_I2S3_Init+0x54>)
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <MX_I2S3_Init+0x5c>)
 800086e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_I2S3_Init+0x54>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_I2S3_Init+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_I2S3_Init+0x54>)
 8000884:	f002 fc30 	bl	80030e8 <HAL_I2S_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800088e:	f000 f979 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000150 	.word	0x20000150
 800089c:	40003c00 	.word	0x40003c00
 80008a0:	00017700 	.word	0x00017700

080008a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_SPI1_Init+0x64>)
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_SPI1_Init+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI1_Init+0x64>)
 80008d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI1_Init+0x64>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_SPI1_Init+0x64>)
 80008f6:	f003 feb1 	bl	800465c <HAL_SPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000900:	f000 f940 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000198 	.word	0x20000198
 800090c:	40013000 	.word	0x40013000

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a60      	ldr	r2, [pc, #384]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b5e      	ldr	r3, [pc, #376]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	4b5a      	ldr	r3, [pc, #360]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a59      	ldr	r2, [pc, #356]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b57      	ldr	r3, [pc, #348]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b53      	ldr	r3, [pc, #332]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a52      	ldr	r2, [pc, #328]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b50      	ldr	r3, [pc, #320]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b4c      	ldr	r3, [pc, #304]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a4b      	ldr	r2, [pc, #300]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a44      	ldr	r2, [pc, #272]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a3d      	ldr	r2, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <MX_GPIO_Init+0x1a0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2108      	movs	r1, #8
 80009d2:	4838      	ldr	r0, [pc, #224]	; (8000ab4 <MX_GPIO_Init+0x1a4>)
 80009d4:	f000 fe06 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2101      	movs	r1, #1
 80009dc:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <MX_GPIO_Init+0x1a8>)
 80009de:	f000 fe01 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009e2:	2200      	movs	r2, #0
 80009e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009e8:	4834      	ldr	r0, [pc, #208]	; (8000abc <MX_GPIO_Init+0x1ac>)
 80009ea:	f000 fdfb 	bl	80015e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009ee:	2304      	movs	r3, #4
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	482c      	ldr	r0, [pc, #176]	; (8000ab4 <MX_GPIO_Init+0x1a4>)
 8000a02:	f000 fc6b 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a06:	2308      	movs	r3, #8
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0x1a4>)
 8000a1e:	f000 fc5d 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a22:	2332      	movs	r3, #50	; 0x32
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a26:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	481f      	ldr	r0, [pc, #124]	; (8000ab4 <MX_GPIO_Init+0x1a4>)
 8000a38:	f000 fc50 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4819      	ldr	r0, [pc, #100]	; (8000ab8 <MX_GPIO_Init+0x1a8>)
 8000a54:	f000 fc42 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a5c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <MX_GPIO_Init+0x1b0>)
 8000a6e:	f000 fc35 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a72:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a76:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_GPIO_Init+0x1ac>)
 8000a8c:	f000 fc26 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a90:	2320      	movs	r3, #32
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_GPIO_Init+0x1ac>)
 8000aa4:	f000 fc1a 	bl	80012dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <task_green_handler>:

/* USER CODE BEGIN 4 */
void task_green_handler(void* parm)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	vTaskDelay((TickType_t)1000); // blocking for sync
 8000acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad0:	f007 fab8 	bl	8008044 <vTaskDelay>
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("G");
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <task_green_handler+0x2c>)
 8000ad6:	f00a fa61 	bl	800af9c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <task_green_handler+0x30>)
 8000ae0:	f000 fd99 	bl	8001616 <HAL_GPIO_TogglePin>
		//vTaskDelay((TickType_t)1000);
		HAL_Delay(1000);
 8000ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae8:	f000 faf2 	bl	80010d0 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("G");
 8000aec:	e7f2      	b.n	8000ad4 <task_green_handler+0x10>
 8000aee:	bf00      	nop
 8000af0:	0800b97c 	.word	0x0800b97c
 8000af4:	40020c00 	.word	0x40020c00

08000af8 <task_red_handler>:
	}
}
void task_red_handler(void* parm)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	vTaskDelay((TickType_t)800);
 8000b00:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b04:	f007 fa9e 	bl	8008044 <vTaskDelay>
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("R");
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <task_red_handler+0x2c>)
 8000b0a:	f00a fa47 	bl	800af9c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <task_red_handler+0x30>)
 8000b14:	f000 fd7f 	bl	8001616 <HAL_GPIO_TogglePin>
		//vTaskDelay((TickType_t)800);
		HAL_Delay(800);
 8000b18:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b1c:	f000 fad8 	bl	80010d0 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("R");
 8000b20:	e7f2      	b.n	8000b08 <task_red_handler+0x10>
 8000b22:	bf00      	nop
 8000b24:	0800b980 	.word	0x0800b980
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <task_blue_handler>:
	}
}
void task_blue_handler(void* parm)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	vTaskDelay((TickType_t)400);
 8000b34:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b38:	f007 fa84 	bl	8008044 <vTaskDelay>
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("B");
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <task_blue_handler+0x2c>)
 8000b3e:	f00a fa2d 	bl	800af9c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <task_blue_handler+0x30>)
 8000b48:	f000 fd65 	bl	8001616 <HAL_GPIO_TogglePin>
		//vTaskDelay((TickType_t)400);
		HAL_Delay(400);
 8000b4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b50:	f000 fabe 	bl	80010d0 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("B");
 8000b54:	e7f2      	b.n	8000b3c <task_blue_handler+0x10>
 8000b56:	bf00      	nop
 8000b58:	0800b984 	.word	0x0800b984
 8000b5c:	40020c00 	.word	0x40020c00

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f000 fa8d 	bl	8001090 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40014000 	.word	0x40014000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <HAL_MspInit+0x4c>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000bce:	f007 ff0b 	bl	80089e8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_I2C_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12c      	bne.n	8000c5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c1e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	2312      	movs	r3, #18
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c30:	2304      	movs	r3, #4
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <HAL_I2C_MspInit+0x8c>)
 8000c3c:	f000 fb4e 	bl	80012dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400

08000c70 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	; 0x38
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a59      	ldr	r2, [pc, #356]	; (8000df4 <HAL_I2S_MspInit+0x184>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d15b      	bne.n	8000d4a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
 8000c96:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a57      	ldr	r2, [pc, #348]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b55      	ldr	r3, [pc, #340]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	623b      	str	r3, [r7, #32]
 8000cac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a50      	ldr	r2, [pc, #320]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a49      	ldr	r2, [pc, #292]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000cf6:	2306      	movs	r3, #6
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483e      	ldr	r0, [pc, #248]	; (8000dfc <HAL_I2S_MspInit+0x18c>)
 8000d02:	f000 faeb 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d06:	2308      	movs	r3, #8
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d16:	2305      	movs	r3, #5
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4836      	ldr	r0, [pc, #216]	; (8000dfc <HAL_I2S_MspInit+0x18c>)
 8000d22:	f000 fadb 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	482f      	ldr	r0, [pc, #188]	; (8000e00 <HAL_I2S_MspInit+0x190>)
 8000d44:	f000 faca 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d48:	e04f      	b.n	8000dea <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <HAL_I2S_MspInit+0x194>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d14a      	bne.n	8000dea <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a26      	ldr	r2, [pc, #152]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000da8:	2310      	movs	r3, #16
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db8:	2306      	movs	r3, #6
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4811      	ldr	r0, [pc, #68]	; (8000e08 <HAL_I2S_MspInit+0x198>)
 8000dc4:	f000 fa8a 	bl	80012dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dc8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <HAL_I2S_MspInit+0x18c>)
 8000de6:	f000 fa79 	bl	80012dc <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3738      	adds	r7, #56	; 0x38
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40003800 	.word	0x40003800
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40003c00 	.word	0x40003c00
 8000e08:	40020000 	.word	0x40020000

08000e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_SPI_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12b      	bne.n	8000e86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e66:	23e0      	movs	r3, #224	; 0xe0
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e76:	2305      	movs	r3, #5
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_SPI_MspInit+0x8c>)
 8000e82:	f000 fa2b 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40013000 	.word	0x40013000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <HAL_InitTick+0xd0>)
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <HAL_InitTick+0xd0>)
 8000eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eba:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_InitTick+0xd0>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec8:	f107 020c 	add.w	r2, r7, #12
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fa40 	bl	8004358 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ed8:	f003 fa2a 	bl	8004330 <HAL_RCC_GetPCLK2Freq>
 8000edc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee0:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <HAL_InitTick+0xd4>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_InitTick+0xd8>)
 8000eee:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_InitTick+0xdc>)
 8000ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_InitTick+0xd8>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <HAL_InitTick+0xd8>)
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_InitTick+0xd8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_InitTick+0xd8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_InitTick+0xd8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000f12:	4818      	ldr	r0, [pc, #96]	; (8000f74 <HAL_InitTick+0xd8>)
 8000f14:	f003 fc2b 	bl	800476e <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d11b      	bne.n	8000f5e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <HAL_InitTick+0xd8>)
 8000f28:	f003 fc7a 	bl	8004820 <HAL_TIM_Base_Start_IT>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d111      	bne.n	8000f5e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f3a:	2018      	movs	r0, #24
 8000f3c:	f000 f9c0 	bl	80012c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	d808      	bhi.n	8000f58 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000f46:	2200      	movs	r2, #0
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	2018      	movs	r0, #24
 8000f4c:	f000 f99c 	bl	8001288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_InitTick+0xe0>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e002      	b.n	8000f5e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3730      	adds	r7, #48	; 0x30
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	431bde83 	.word	0x431bde83
 8000f74:	200001f0 	.word	0x200001f0
 8000f78:	40014000 	.word	0x40014000
 8000f7c:	20000004 	.word	0x20000004

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000fb2:	f003 fc97 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001f0 	.word	0x200001f0

08000fc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <OTG_FS_IRQHandler+0x10>)
 8000fc6:	f000 fdab 	bl	8001b20 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200149bc 	.word	0x200149bc

08000fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ffe:	490e      	ldr	r1, [pc, #56]	; (8001038 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001000:	4a0e      	ldr	r2, [pc, #56]	; (800103c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001014:	4c0b      	ldr	r4, [pc, #44]	; (8001044 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001022:	f7ff ffd7 	bl	8000fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f00a fb31 	bl	800b68c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff faa5 	bl	8000578 <main>
  bx  lr    
 800102e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800103c:	0800ba9c 	.word	0x0800ba9c
  ldr r2, =_sbss
 8001040:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001044:	20014cd4 	.word	0x20014cd4

08001048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_Init+0x40>)
 8001056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_Init+0x40>)
 8001062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_Init+0x40>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 f8fc 	bl	8001272 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff ff0e 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001080:	f7ff fd86 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023c00 	.word	0x40023c00

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000238 	.word	0x20000238

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000238 	.word	0x20000238

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff4c 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129a:	f7ff ff61 	bl	8001160 <__NVIC_GetPriorityGrouping>
 800129e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	6978      	ldr	r0, [r7, #20]
 80012a6:	f7ff ffb1 	bl	800120c <NVIC_EncodePriority>
 80012aa:	4602      	mov	r2, r0
 80012ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff80 	bl	80011b8 <__NVIC_SetPriority>
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff54 	bl	800117c <__NVIC_EnableIRQ>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e159      	b.n	80015ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	f040 8148 	bne.w	80015a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d005      	beq.n	800132e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132a:	2b02      	cmp	r3, #2
 800132c:	d130      	bne.n	8001390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b03      	cmp	r3, #3
 800139a:	d017      	beq.n	80013cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d123      	bne.n	8001420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	69b9      	ldr	r1, [r7, #24]
 800141c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a2 	beq.w	80015a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <HAL_GPIO_Init+0x2e8>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a56      	ldr	r2, [pc, #344]	; (80015c4 <HAL_GPIO_Init+0x2e8>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <HAL_GPIO_Init+0x2e8>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147e:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <HAL_GPIO_Init+0x2ec>)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a49      	ldr	r2, [pc, #292]	; (80015cc <HAL_GPIO_Init+0x2f0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x202>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a48      	ldr	r2, [pc, #288]	; (80015d0 <HAL_GPIO_Init+0x2f4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x1fe>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a47      	ldr	r2, [pc, #284]	; (80015d4 <HAL_GPIO_Init+0x2f8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a46      	ldr	r2, [pc, #280]	; (80015d8 <HAL_GPIO_Init+0x2fc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x1f6>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a45      	ldr	r2, [pc, #276]	; (80015dc <HAL_GPIO_Init+0x300>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x1f2>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e008      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e004      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014de:	2300      	movs	r3, #0
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f002 0203 	and.w	r2, r2, #3
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	4093      	lsls	r3, r2
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f0:	4935      	ldr	r1, [pc, #212]	; (80015c8 <HAL_GPIO_Init+0x2ec>)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <HAL_GPIO_Init+0x304>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001522:	4a2f      	ldr	r2, [pc, #188]	; (80015e0 <HAL_GPIO_Init+0x304>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001528:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_GPIO_Init+0x304>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800154c:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <HAL_GPIO_Init+0x304>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <HAL_GPIO_Init+0x304>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001576:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <HAL_GPIO_Init+0x304>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_GPIO_Init+0x304>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a0:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_GPIO_Init+0x304>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	f67f aea2 	bls.w	80012f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40013800 	.word	0x40013800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001600:	e003      	b.n	800160a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	619a      	str	r2, [r3, #24]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	041a      	lsls	r2, r3, #16
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43d9      	mvns	r1, r3
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	400b      	ands	r3, r1
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800164a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164c:	b08f      	sub	sp, #60	; 0x3c
 800164e:	af0a      	add	r7, sp, #40	; 0x28
 8001650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e054      	b.n	8001706 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f009 fd5e 	bl	800b138 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2203      	movs	r2, #3
 8001680:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fb58 	bl	8004d50 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	687e      	ldr	r6, [r7, #4]
 80016a8:	466d      	mov	r5, sp
 80016aa:	f106 0410 	add.w	r4, r6, #16
 80016ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80016be:	1d33      	adds	r3, r6, #4
 80016c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c2:	6838      	ldr	r0, [r7, #0]
 80016c4:	f003 fad2 	bl	8004c6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fb4f 	bl	8004d72 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	687e      	ldr	r6, [r7, #4]
 80016dc:	466d      	mov	r5, sp
 80016de:	f106 0410 	add.w	r4, r6, #16
 80016e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f2:	1d33      	adds	r3, r6, #4
 80016f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f003 fcd8 	bl	80050ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800170e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800170e:	b590      	push	{r4, r7, lr}
 8001710:	b089      	sub	sp, #36	; 0x24
 8001712:	af04      	add	r7, sp, #16
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	4608      	mov	r0, r1
 8001718:	4611      	mov	r1, r2
 800171a:	461a      	mov	r2, r3
 800171c:	4603      	mov	r3, r0
 800171e:	70fb      	strb	r3, [r7, #3]
 8001720:	460b      	mov	r3, r1
 8001722:	70bb      	strb	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_HCD_HC_Init+0x28>
 8001732:	2302      	movs	r3, #2
 8001734:	e076      	b.n	8001824 <HAL_HCD_HC_Init+0x116>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	333d      	adds	r3, #61	; 0x3d
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	212c      	movs	r1, #44	; 0x2c
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	3338      	adds	r3, #56	; 0x38
 800175e:	787a      	ldrb	r2, [r7, #1]
 8001760:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	3340      	adds	r3, #64	; 0x40
 8001770:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001772:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	212c      	movs	r1, #44	; 0x2c
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	3339      	adds	r3, #57	; 0x39
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	333f      	adds	r3, #63	; 0x3f
 8001794:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001798:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	78ba      	ldrb	r2, [r7, #2]
 800179e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017a2:	b2d0      	uxtb	r0, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	333a      	adds	r3, #58	; 0x3a
 80017b0:	4602      	mov	r2, r0
 80017b2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da09      	bge.n	80017d0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	212c      	movs	r1, #44	; 0x2c
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	333b      	adds	r3, #59	; 0x3b
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e008      	b.n	80017e2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	333b      	adds	r3, #59	; 0x3b
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	333c      	adds	r3, #60	; 0x3c
 80017f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017f4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	787c      	ldrb	r4, [r7, #1]
 80017fc:	78ba      	ldrb	r2, [r7, #2]
 80017fe:	78f9      	ldrb	r1, [r7, #3]
 8001800:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4623      	mov	r3, r4
 8001812:	f003 fdd1 	bl	80053b8 <USB_HC_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}

0800182c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_HCD_HC_Halt+0x1e>
 8001846:	2302      	movs	r3, #2
 8001848:	e00f      	b.n	800186a <HAL_HCD_HC_Halt+0x3e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f004 f821 	bl	80058a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4603      	mov	r3, r0
 8001884:	70fb      	strb	r3, [r7, #3]
 8001886:	460b      	mov	r3, r1
 8001888:	70bb      	strb	r3, [r7, #2]
 800188a:	4613      	mov	r3, r2
 800188c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	333b      	adds	r3, #59	; 0x3b
 800189c:	78ba      	ldrb	r2, [r7, #2]
 800189e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	333f      	adds	r3, #63	; 0x3f
 80018ae:	787a      	ldrb	r2, [r7, #1]
 80018b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018b2:	7c3b      	ldrb	r3, [r7, #16]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d112      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3342      	adds	r3, #66	; 0x42
 80018c6:	2203      	movs	r2, #3
 80018c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	333d      	adds	r3, #61	; 0x3d
 80018d8:	7f3a      	ldrb	r2, [r7, #28]
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e008      	b.n	80018f0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	3342      	adds	r3, #66	; 0x42
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	f200 80c6 	bhi.w	8001a84 <HAL_HCD_HC_SubmitRequest+0x210>
 80018f8:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001911 	.word	0x08001911
 8001904:	08001a71 	.word	0x08001a71
 8001908:	08001975 	.word	0x08001975
 800190c:	080019f3 	.word	0x080019f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001910:	7c3b      	ldrb	r3, [r7, #16]
 8001912:	2b01      	cmp	r3, #1
 8001914:	f040 80b8 	bne.w	8001a88 <HAL_HCD_HC_SubmitRequest+0x214>
 8001918:	78bb      	ldrb	r3, [r7, #2]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 80b4 	bne.w	8001a88 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001920:	8b3b      	ldrh	r3, [r7, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d108      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	212c      	movs	r1, #44	; 0x2c
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4413      	add	r3, r2
 8001932:	3355      	adds	r3, #85	; 0x55
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	3355      	adds	r3, #85	; 0x55
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d109      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3342      	adds	r3, #66	; 0x42
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800195e:	e093      	b.n	8001a88 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3342      	adds	r3, #66	; 0x42
 800196e:	2202      	movs	r2, #2
 8001970:	701a      	strb	r2, [r3, #0]
      break;
 8001972:	e089      	b.n	8001a88 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001974:	78bb      	ldrb	r3, [r7, #2]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d11d      	bne.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3355      	adds	r3, #85	; 0x55
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3342      	adds	r3, #66	; 0x42
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019a0:	e073      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3342      	adds	r3, #66	; 0x42
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
      break;
 80019b4:	e069      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	212c      	movs	r1, #44	; 0x2c
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	3354      	adds	r3, #84	; 0x54
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3342      	adds	r3, #66	; 0x42
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
      break;
 80019dc:	e055      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3342      	adds	r3, #66	; 0x42
 80019ec:	2202      	movs	r2, #2
 80019ee:	701a      	strb	r2, [r3, #0]
      break;
 80019f0:	e04b      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019f2:	78bb      	ldrb	r3, [r7, #2]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d11d      	bne.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3355      	adds	r3, #85	; 0x55
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3342      	adds	r3, #66	; 0x42
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a1e:	e034      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3342      	adds	r3, #66	; 0x42
 8001a2e:	2202      	movs	r2, #2
 8001a30:	701a      	strb	r2, [r3, #0]
      break;
 8001a32:	e02a      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	3354      	adds	r3, #84	; 0x54
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	3342      	adds	r3, #66	; 0x42
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
      break;
 8001a5a:	e016      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3342      	adds	r3, #66	; 0x42
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	701a      	strb	r2, [r3, #0]
      break;
 8001a6e:	e00c      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3342      	adds	r3, #66	; 0x42
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
      break;
 8001a82:	e002      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a88:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	212c      	movs	r1, #44	; 0x2c
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	3344      	adds	r3, #68	; 0x44
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	8b3a      	ldrh	r2, [r7, #24]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	202c      	movs	r0, #44	; 0x2c
 8001aa4:	fb00 f303 	mul.w	r3, r0, r3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	334c      	adds	r3, #76	; 0x4c
 8001aac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3360      	adds	r3, #96	; 0x60
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	3350      	adds	r3, #80	; 0x50
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3339      	adds	r3, #57	; 0x39
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	3361      	adds	r3, #97	; 0x61
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	222c      	movs	r2, #44	; 0x2c
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	3338      	adds	r3, #56	; 0x38
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	18d1      	adds	r1, r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f003 fd74 	bl	80055fc <USB_HC_StartXfer>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop

08001b20 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fa75 	bl	8005026 <USB_GetMode>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	f040 80f6 	bne.w	8001d30 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fa59 	bl	8005000 <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80ec 	beq.w	8001d2e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fa50 	bl	8005000 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b6a:	d104      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fa40 	bl	8005000 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b8a:	d104      	bne.n	8001b96 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fa30 	bl	8005000 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001baa:	d104      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fa20 	bl	8005000 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d103      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fa12 	bl	8005000 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be6:	d11c      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bf0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c02:	2110      	movs	r1, #16
 8001c04:	6938      	ldr	r0, [r7, #16]
 8001c06:	f003 f901 	bl	8004e0c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c0a:	6938      	ldr	r0, [r7, #16]
 8001c0c:	f003 f932 	bl	8004e74 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fb08 	bl	800522c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f009 fb09 	bl	800b234 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 f9ea 	bl	8005000 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c36:	d102      	bne.n	8001c3e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f001 f89e 	bl	8002d7a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 f9dc 	bl	8005000 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d106      	bne.n	8001c60 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f009 fad2 	bl	800b1fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 f9cb 	bl	8005000 <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d101      	bne.n	8001c78 <HAL_HCD_IRQHandler+0x158>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_HCD_IRQHandler+0x15a>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d012      	beq.n	8001ca4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0210 	bic.w	r2, r2, #16
 8001c8c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 ffa1 	bl	8002bd6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0210 	orr.w	r2, r2, #16
 8001ca2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 f9a9 	bl	8005000 <USB_ReadInterrupts>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cb8:	d13a      	bne.n	8001d30 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fdde 	bl	8005880 <USB_HC_ReadInterrupt>
 8001cc4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e025      	b.n	8001d18 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d018      	beq.n	8001d12 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf6:	d106      	bne.n	8001d06 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8ab 	bl	8001e5a <HCD_HC_IN_IRQHandler>
 8001d04:	e005      	b.n	8001d12 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fbf9 	bl	8002504 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d3d4      	bcc.n	8001ccc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	e000      	b.n	8001d30 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d2e:	bf00      	nop
    }
  }
}
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_HCD_Start+0x16>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e013      	b.n	8001d74 <HAL_HCD_Start+0x3e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 faca 	bl	80052f4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 ffe2 	bl	8004d2e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_HCD_Stop+0x16>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e00d      	b.n	8001dae <HAL_HCD_Stop+0x32>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 feb8 	bl	8005b14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fa6c 	bl	80052a0 <USB_ResetPort>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3360      	adds	r3, #96	; 0x60
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	3350      	adds	r3, #80	; 0x50
 8001e14:	681b      	ldr	r3, [r3, #0]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fab0 	bl	8005394 <USB_GetCurrentFrame>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fa8b 	bl	8005366 <USB_GetHostSpeed>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d11a      	bne.n	8001ec0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	461a      	mov	r2, r3
 8001e98:	2304      	movs	r3, #4
 8001e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3361      	adds	r3, #97	; 0x61
 8001eaa:	2206      	movs	r2, #6
 8001eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fcf2 	bl	80058a2 <USB_HC_Halt>
 8001ebe:	e0af      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed6:	d11b      	bne.n	8001f10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3361      	adds	r3, #97	; 0x61
 8001efa:	2207      	movs	r2, #7
 8001efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 fcca 	bl	80058a2 <USB_HC_Halt>
 8001f0e:	e087      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d109      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2320      	movs	r3, #32
 8001f36:	6093      	str	r3, [r2, #8]
 8001f38:	e072      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d11a      	bne.n	8001f86 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2308      	movs	r3, #8
 8001f60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3361      	adds	r3, #97	; 0x61
 8001f70:	2205      	movs	r2, #5
 8001f72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fc8f 	bl	80058a2 <USB_HC_Halt>
 8001f84:	e04c      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9c:	d11b      	bne.n	8001fd6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3361      	adds	r3, #97	; 0x61
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fc67 	bl	80058a2 <USB_HC_Halt>
 8001fd4:	e024      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe8:	2b80      	cmp	r3, #128	; 0x80
 8001fea:	d119      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3361      	adds	r3, #97	; 0x61
 800200c:	2206      	movs	r2, #6
 800200e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fc41 	bl	80058a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002036:	d112      	bne.n	800205e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fc2d 	bl	80058a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800205c:	e24e      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 80df 	bne.w	8002234 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d019      	beq.n	80020b2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3348      	adds	r3, #72	; 0x48
 800208c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	0159      	lsls	r1, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	440b      	add	r3, r1
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020a0:	1ad2      	subs	r2, r2, r3
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	202c      	movs	r0, #44	; 0x2c
 80020a8:	fb00 f303 	mul.w	r3, r0, r3
 80020ac:	440b      	add	r3, r1
 80020ae:	3350      	adds	r3, #80	; 0x50
 80020b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3361      	adds	r3, #97	; 0x61
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	335c      	adds	r3, #92	; 0x5c
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	461a      	mov	r2, r3
 80020e4:	2301      	movs	r3, #1
 80020e6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	333f      	adds	r3, #63	; 0x3f
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	333f      	adds	r3, #63	; 0x3f
 800210a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800210c:	2b02      	cmp	r3, #2
 800210e:	d111      	bne.n	8002134 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f003 fbc1 	bl	80058a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	461a      	mov	r2, r3
 800212e:	2310      	movs	r3, #16
 8002130:	6093      	str	r3, [r2, #8]
 8002132:	e03a      	b.n	80021aa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	333f      	adds	r3, #63	; 0x3f
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d009      	beq.n	800215c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	333f      	adds	r3, #63	; 0x3f
 8002156:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002158:	2b01      	cmp	r3, #1
 800215a:	d126      	bne.n	80021aa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	0151      	lsls	r1, r2, #5
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	440a      	add	r2, r1
 8002172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800217a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3360      	adds	r3, #96	; 0x60
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	b2d9      	uxtb	r1, r3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	202c      	movs	r0, #44	; 0x2c
 8002198:	fb00 f303 	mul.w	r3, r0, r3
 800219c:	4413      	add	r3, r2
 800219e:	3360      	adds	r3, #96	; 0x60
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f009 f853 	bl	800b250 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d12b      	bne.n	800220a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3348      	adds	r3, #72	; 0x48
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	202c      	movs	r0, #44	; 0x2c
 80021c8:	fb00 f202 	mul.w	r2, r0, r2
 80021cc:	440a      	add	r2, r1
 80021ce:	3240      	adds	r2, #64	; 0x40
 80021d0:	8812      	ldrh	r2, [r2, #0]
 80021d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 818e 	beq.w	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3354      	adds	r3, #84	; 0x54
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	f083 0301 	eor.w	r3, r3, #1
 80021f4:	b2d8      	uxtb	r0, r3
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3354      	adds	r3, #84	; 0x54
 8002204:	4602      	mov	r2, r0
 8002206:	701a      	strb	r2, [r3, #0]
}
 8002208:	e178      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3354      	adds	r3, #84	; 0x54
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	f083 0301 	eor.w	r3, r3, #1
 800221e:	b2d8      	uxtb	r0, r3
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3354      	adds	r3, #84	; 0x54
 800222e:	4602      	mov	r2, r0
 8002230:	701a      	strb	r2, [r3, #0]
}
 8002232:	e163      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b02      	cmp	r3, #2
 8002248:	f040 80f6 	bne.w	8002438 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3361      	adds	r3, #97	; 0x61
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d109      	bne.n	8002274 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3360      	adds	r3, #96	; 0x60
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e0c9      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3361      	adds	r3, #97	; 0x61
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b05      	cmp	r3, #5
 8002286:	d109      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3360      	adds	r3, #96	; 0x60
 8002296:	2205      	movs	r2, #5
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e0b5      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3361      	adds	r3, #97	; 0x61
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	d009      	beq.n	80022c4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3361      	adds	r3, #97	; 0x61
 80022be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d150      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	335c      	adds	r3, #92	; 0x5c
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	202c      	movs	r0, #44	; 0x2c
 80022dc:	fb00 f303 	mul.w	r3, r0, r3
 80022e0:	440b      	add	r3, r1
 80022e2:	335c      	adds	r3, #92	; 0x5c
 80022e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	335c      	adds	r3, #92	; 0x5c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d912      	bls.n	8002320 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	335c      	adds	r3, #92	; 0x5c
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3360      	adds	r3, #96	; 0x60
 800231a:	2204      	movs	r2, #4
 800231c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800231e:	e073      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3360      	adds	r3, #96	; 0x60
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002348:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002350:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002364:	e050      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	3361      	adds	r3, #97	; 0x61
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d122      	bne.n	80023c0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	3360      	adds	r3, #96	; 0x60
 8002388:	2202      	movs	r2, #2
 800238a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e023      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3361      	adds	r3, #97	; 0x61
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b07      	cmp	r3, #7
 80023d2:	d119      	bne.n	8002408 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	335c      	adds	r3, #92	; 0x5c
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	202c      	movs	r0, #44	; 0x2c
 80023ec:	fb00 f303 	mul.w	r3, r0, r3
 80023f0:	440b      	add	r3, r1
 80023f2:	335c      	adds	r3, #92	; 0x5c
 80023f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3360      	adds	r3, #96	; 0x60
 8002404:	2204      	movs	r2, #4
 8002406:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	461a      	mov	r2, r3
 8002416:	2302      	movs	r3, #2
 8002418:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	b2d9      	uxtb	r1, r3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	202c      	movs	r0, #44	; 0x2c
 8002424:	fb00 f303 	mul.w	r3, r0, r3
 8002428:	4413      	add	r3, r2
 800242a:	3360      	adds	r3, #96	; 0x60
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f008 ff0d 	bl	800b250 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002436:	e061      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b10      	cmp	r3, #16
 800244c:	d156      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	333f      	adds	r3, #63	; 0x3f
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d111      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	335c      	adds	r3, #92	; 0x5c
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fa0f 	bl	80058a2 <USB_HC_Halt>
 8002484:	e031      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	333f      	adds	r3, #63	; 0x3f
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	333f      	adds	r3, #63	; 0x3f
 80024a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d11d      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	335c      	adds	r3, #92	; 0x5c
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d110      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	2203      	movs	r2, #3
 80024d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 f9dc 	bl	80058a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	2310      	movs	r3, #16
 80024fa:	6093      	str	r3, [r2, #8]
}
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11a      	bne.n	800256a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	461a      	mov	r2, r3
 8002542:	2304      	movs	r3, #4
 8002544:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3361      	adds	r3, #97	; 0x61
 8002554:	2206      	movs	r2, #6
 8002556:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f003 f99d 	bl	80058a2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002568:	e331      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b20      	cmp	r3, #32
 800257e:	d12e      	bne.n	80025de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	461a      	mov	r2, r3
 800258e:	2320      	movs	r3, #32
 8002590:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	333d      	adds	r3, #61	; 0x3d
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	f040 8313 	bne.w	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	333d      	adds	r3, #61	; 0x3d
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3360      	adds	r3, #96	; 0x60
 80025c8:	2202      	movs	r2, #2
 80025ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 f963 	bl	80058a2 <USB_HC_Halt>
}
 80025dc:	e2f7      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f4:	d112      	bne.n	800261c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002608:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f003 f944 	bl	80058a2 <USB_HC_Halt>
}
 800261a:	e2d8      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d140      	bne.n	80026b4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d111      	bne.n	800267e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	333d      	adds	r3, #61	; 0x3d
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	461a      	mov	r2, r3
 800267a:	2340      	movs	r3, #64	; 0x40
 800267c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	461a      	mov	r2, r3
 800268c:	2301      	movs	r3, #1
 800268e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3361      	adds	r3, #97	; 0x61
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 f8f8 	bl	80058a2 <USB_HC_Halt>
}
 80026b2:	e28c      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b40      	cmp	r3, #64	; 0x40
 80026c8:	d12c      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	3361      	adds	r3, #97	; 0x61
 80026d8:	2204      	movs	r2, #4
 80026da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	333d      	adds	r3, #61	; 0x3d
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	335c      	adds	r3, #92	; 0x5c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f003 f8c9 	bl	80058a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	461a      	mov	r2, r3
 800271e:	2340      	movs	r3, #64	; 0x40
 8002720:	6093      	str	r3, [r2, #8]
}
 8002722:	e254      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11a      	bne.n	8002770 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	461a      	mov	r2, r3
 8002748:	2308      	movs	r3, #8
 800274a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3361      	adds	r3, #97	; 0x61
 800275a:	2205      	movs	r2, #5
 800275c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f003 f89a 	bl	80058a2 <USB_HC_Halt>
}
 800276e:	e22e      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b10      	cmp	r3, #16
 8002784:	d140      	bne.n	8002808 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	335c      	adds	r3, #92	; 0x5c
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3361      	adds	r3, #97	; 0x61
 80027a6:	2203      	movs	r2, #3
 80027a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	333d      	adds	r3, #61	; 0x3d
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d112      	bne.n	80027e4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	333c      	adds	r3, #60	; 0x3c
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	333d      	adds	r3, #61	; 0x3d
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 f857 	bl	80058a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	461a      	mov	r2, r3
 8002802:	2310      	movs	r3, #16
 8002804:	6093      	str	r3, [r2, #8]
}
 8002806:	e1e2      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d164      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d111      	bne.n	800284a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3361      	adds	r3, #97	; 0x61
 8002834:	2206      	movs	r2, #6
 8002836:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f003 f82d 	bl	80058a2 <USB_HC_Halt>
 8002848:	e044      	b.n	80028d4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	335c      	adds	r3, #92	; 0x5c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	202c      	movs	r0, #44	; 0x2c
 8002862:	fb00 f303 	mul.w	r3, r0, r3
 8002866:	440b      	add	r3, r1
 8002868:	335c      	adds	r3, #92	; 0x5c
 800286a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	335c      	adds	r3, #92	; 0x5c
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d920      	bls.n	80028c2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	335c      	adds	r3, #92	; 0x5c
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3360      	adds	r3, #96	; 0x60
 80028a0:	2204      	movs	r2, #4
 80028a2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	b2d9      	uxtb	r1, r3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	202c      	movs	r0, #44	; 0x2c
 80028ae:	fb00 f303 	mul.w	r3, r0, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3360      	adds	r3, #96	; 0x60
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f008 fcc8 	bl	800b250 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028c0:	e008      	b.n	80028d4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3360      	adds	r3, #96	; 0x60
 80028d0:	2202      	movs	r2, #2
 80028d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	6093      	str	r3, [r2, #8]
}
 80028e6:	e172      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fe:	d11b      	bne.n	8002938 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	2208      	movs	r2, #8
 8002910:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f002 ffc0 	bl	80058a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	461a      	mov	r2, r3
 8002930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002934:	6093      	str	r3, [r2, #8]
}
 8002936:	e14a      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	f040 813f 	bne.w	8002bce <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3361      	adds	r3, #97	; 0x61
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d17d      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3360      	adds	r3, #96	; 0x60
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	333f      	adds	r3, #63	; 0x3f
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d00a      	beq.n	80029a0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	333f      	adds	r3, #63	; 0x3f
 8002998:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800299a:	2b03      	cmp	r3, #3
 800299c:	f040 8100 	bne.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d113      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3355      	adds	r3, #85	; 0x55
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2d8      	uxtb	r0, r3
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3355      	adds	r3, #85	; 0x55
 80029cc:	4602      	mov	r2, r0
 80029ce:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f040 80e3 	bne.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	334c      	adds	r3, #76	; 0x4c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80d8 	beq.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	334c      	adds	r3, #76	; 0x4c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	202c      	movs	r0, #44	; 0x2c
 8002a06:	fb00 f202 	mul.w	r2, r0, r2
 8002a0a:	440a      	add	r2, r1
 8002a0c:	3240      	adds	r2, #64	; 0x40
 8002a0e:	8812      	ldrh	r2, [r2, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	3b01      	subs	r3, #1
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	202c      	movs	r0, #44	; 0x2c
 8002a1a:	fb00 f202 	mul.w	r2, r0, r2
 8002a1e:	440a      	add	r2, r1
 8002a20:	3240      	adds	r2, #64	; 0x40
 8002a22:	8812      	ldrh	r2, [r2, #0]
 8002a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80b5 	beq.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3355      	adds	r3, #85	; 0x55
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	f083 0301 	eor.w	r3, r3, #1
 8002a4a:	b2d8      	uxtb	r0, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3355      	adds	r3, #85	; 0x55
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e09f      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3361      	adds	r3, #97	; 0x61
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d109      	bne.n	8002a88 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3360      	adds	r3, #96	; 0x60
 8002a82:	2202      	movs	r2, #2
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e08b      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d109      	bne.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3360      	adds	r3, #96	; 0x60
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e077      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3361      	adds	r3, #97	; 0x61
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d109      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3360      	adds	r3, #96	; 0x60
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e063      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d009      	beq.n	8002b00 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3361      	adds	r3, #97	; 0x61
 8002afa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d14f      	bne.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	202c      	movs	r0, #44	; 0x2c
 8002b18:	fb00 f303 	mul.w	r3, r0, r3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	335c      	adds	r3, #92	; 0x5c
 8002b20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	335c      	adds	r3, #92	; 0x5c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d912      	bls.n	8002b5c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	335c      	adds	r3, #92	; 0x5c
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3360      	adds	r3, #96	; 0x60
 8002b56:	2204      	movs	r2, #4
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e021      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3360      	adds	r3, #96	; 0x60
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b84:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b8c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	2302      	movs	r3, #2
 8002bb0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	b2d9      	uxtb	r1, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	202c      	movs	r0, #44	; 0x2c
 8002bbc:	fb00 f303 	mul.w	r3, r0, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3360      	adds	r3, #96	; 0x60
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f008 fb41 	bl	800b250 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bce:	bf00      	nop
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b08a      	sub	sp, #40	; 0x28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d004      	beq.n	8002c1c <HCD_RXQLVL_IRQHandler+0x46>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	f000 80a9 	beq.w	8002d6c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c1a:	e0aa      	b.n	8002d72 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80a6 	beq.w	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3344      	adds	r3, #68	; 0x44
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 809b 	beq.w	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3350      	adds	r3, #80	; 0x50
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	441a      	add	r2, r3
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	202c      	movs	r0, #44	; 0x2c
 8002c54:	fb00 f303 	mul.w	r3, r0, r3
 8002c58:	440b      	add	r3, r1
 8002c5a:	334c      	adds	r3, #76	; 0x4c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d87a      	bhi.n	8002d58 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	3344      	adds	r3, #68	; 0x44
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f002 f968 	bl	8004f50 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3344      	adds	r3, #68	; 0x44
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	441a      	add	r2, r3
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	202c      	movs	r0, #44	; 0x2c
 8002c9a:	fb00 f303 	mul.w	r3, r0, r3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3344      	adds	r3, #68	; 0x44
 8002ca2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3350      	adds	r3, #80	; 0x50
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	202c      	movs	r0, #44	; 0x2c
 8002cbe:	fb00 f303 	mul.w	r3, r0, r3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3350      	adds	r3, #80	; 0x50
 8002cc6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	0cdb      	lsrs	r3, r3, #19
 8002cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cdc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3340      	adds	r3, #64	; 0x40
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d13c      	bne.n	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d039      	beq.n	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d12:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d1a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3354      	adds	r3, #84	; 0x54
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3354      	adds	r3, #84	; 0x54
 8002d52:	4602      	mov	r2, r0
 8002d54:	701a      	strb	r2, [r3, #0]
      break;
 8002d56:	e00b      	b.n	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3360      	adds	r3, #96	; 0x60
 8002d66:	2204      	movs	r2, #4
 8002d68:	701a      	strb	r2, [r3, #0]
      break;
 8002d6a:	e001      	b.n	8002d70 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d6c:	bf00      	nop
 8002d6e:	e000      	b.n	8002d72 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d70:	bf00      	nop
  }
}
 8002d72:	bf00      	nop
 8002d74:	3728      	adds	r7, #40	; 0x28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002da6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d10b      	bne.n	8002dca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f008 fa2b 	bl	800b218 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d132      	bne.n	8002e3a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d126      	bne.n	8002e34 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d113      	bne.n	8002e16 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002df8:	d106      	bne.n	8002e08 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2102      	movs	r1, #2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 fa13 	bl	800522c <USB_InitFSLSPClkSel>
 8002e06:	e011      	b.n	8002e2c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fa0c 	bl	800522c <USB_InitFSLSPClkSel>
 8002e14:	e00a      	b.n	8002e2c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d106      	bne.n	8002e2c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e24:	461a      	mov	r2, r3
 8002e26:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e2a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f008 fa1d 	bl	800b26c <HAL_HCD_PortEnabled_Callback>
 8002e32:	e002      	b.n	8002e3a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f008 fa27 	bl	800b288 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d103      	bne.n	8002e4c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f043 0320 	orr.w	r3, r3, #32
 8002e4a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6013      	str	r3, [r2, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e12b      	b.n	80030ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd feaa 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2224      	movs	r2, #36	; 0x24
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f001 fa20 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8002ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a81      	ldr	r2, [pc, #516]	; (80030d4 <HAL_I2C_Init+0x274>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d807      	bhi.n	8002ee4 <HAL_I2C_Init+0x84>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a80      	ldr	r2, [pc, #512]	; (80030d8 <HAL_I2C_Init+0x278>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	bf94      	ite	ls
 8002edc:	2301      	movls	r3, #1
 8002ede:	2300      	movhi	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e006      	b.n	8002ef2 <HAL_I2C_Init+0x92>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a7d      	ldr	r2, [pc, #500]	; (80030dc <HAL_I2C_Init+0x27c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	bf94      	ite	ls
 8002eec:	2301      	movls	r3, #1
 8002eee:	2300      	movhi	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0e7      	b.n	80030ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a78      	ldr	r2, [pc, #480]	; (80030e0 <HAL_I2C_Init+0x280>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0c9b      	lsrs	r3, r3, #18
 8002f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a6a      	ldr	r2, [pc, #424]	; (80030d4 <HAL_I2C_Init+0x274>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d802      	bhi.n	8002f34 <HAL_I2C_Init+0xd4>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3301      	adds	r3, #1
 8002f32:	e009      	b.n	8002f48 <HAL_I2C_Init+0xe8>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	4a69      	ldr	r2, [pc, #420]	; (80030e4 <HAL_I2C_Init+0x284>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	3301      	adds	r3, #1
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	495c      	ldr	r1, [pc, #368]	; (80030d4 <HAL_I2C_Init+0x274>)
 8002f64:	428b      	cmp	r3, r1
 8002f66:	d819      	bhi.n	8002f9c <HAL_I2C_Init+0x13c>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e59      	subs	r1, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f76:	1c59      	adds	r1, r3, #1
 8002f78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_I2C_Init+0x138>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1e59      	subs	r1, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f96:	e051      	b.n	800303c <HAL_I2C_Init+0x1dc>
 8002f98:	2304      	movs	r3, #4
 8002f9a:	e04f      	b.n	800303c <HAL_I2C_Init+0x1dc>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d111      	bne.n	8002fc8 <HAL_I2C_Init+0x168>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1e58      	subs	r0, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	440b      	add	r3, r1
 8002fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	e012      	b.n	8002fee <HAL_I2C_Init+0x18e>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e58      	subs	r0, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	0099      	lsls	r1, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Init+0x196>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e022      	b.n	800303c <HAL_I2C_Init+0x1dc>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10e      	bne.n	800301c <HAL_I2C_Init+0x1bc>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1e58      	subs	r0, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6859      	ldr	r1, [r3, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	440b      	add	r3, r1
 800300c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003010:	3301      	adds	r3, #1
 8003012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301a:	e00f      	b.n	800303c <HAL_I2C_Init+0x1dc>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	0099      	lsls	r1, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	6809      	ldr	r1, [r1, #0]
 8003040:	4313      	orrs	r3, r2
 8003042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800306a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6911      	ldr	r1, [r2, #16]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68d2      	ldr	r2, [r2, #12]
 8003076:	4311      	orrs	r1, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	000186a0 	.word	0x000186a0
 80030d8:	001e847f 	.word	0x001e847f
 80030dc:	003d08ff 	.word	0x003d08ff
 80030e0:	431bde83 	.word	0x431bde83
 80030e4:	10624dd3 	.word	0x10624dd3

080030e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e128      	b.n	800334c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a90      	ldr	r2, [pc, #576]	; (8003354 <HAL_I2S_Init+0x26c>)
 8003112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7fd fdab 	bl	8000c70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003130:	f023 030f 	bic.w	r3, r3, #15
 8003134:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2202      	movs	r2, #2
 800313c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d060      	beq.n	8003208 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800314e:	2310      	movs	r3, #16
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e001      	b.n	8003158 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b20      	cmp	r3, #32
 800315e:	d802      	bhi.n	8003166 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003166:	2001      	movs	r0, #1
 8003168:	f001 fa18 	bl	800459c <HAL_RCCEx_GetPeriphCLKFreq>
 800316c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003176:	d125      	bne.n	80031c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d010      	beq.n	80031a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	fbb2 f2f3 	udiv	r2, r2, r3
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	3305      	adds	r3, #5
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e01f      	b.n	80031e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	3305      	adds	r3, #5
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e00e      	b.n	80031e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	3305      	adds	r3, #5
 80031e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4a5c      	ldr	r2, [pc, #368]	; (8003358 <HAL_I2S_Init+0x270>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	08db      	lsrs	r3, r3, #3
 80031ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	085b      	lsrs	r3, r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	e003      	b.n	8003210 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003208:	2302      	movs	r3, #2
 800320a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d902      	bls.n	800321c <HAL_I2S_Init+0x134>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2bff      	cmp	r3, #255	; 0xff
 800321a:	d907      	bls.n	800322c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e08f      	b.n	800334c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	ea42 0103 	orr.w	r1, r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	430a      	orrs	r2, r1
 800323e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800324a:	f023 030f 	bic.w	r3, r3, #15
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6851      	ldr	r1, [r2, #4]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6892      	ldr	r2, [r2, #8]
 8003256:	4311      	orrs	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68d2      	ldr	r2, [r2, #12]
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6992      	ldr	r2, [r2, #24]
 8003262:	430a      	orrs	r2, r1
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d161      	bne.n	800333c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a38      	ldr	r2, [pc, #224]	; (800335c <HAL_I2S_Init+0x274>)
 800327c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a37      	ldr	r2, [pc, #220]	; (8003360 <HAL_I2S_Init+0x278>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_I2S_Init+0x1a4>
 8003288:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_I2S_Init+0x27c>)
 800328a:	e001      	b.n	8003290 <HAL_I2S_Init+0x1a8>
 800328c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	4932      	ldr	r1, [pc, #200]	; (8003360 <HAL_I2S_Init+0x278>)
 8003298:	428a      	cmp	r2, r1
 800329a:	d101      	bne.n	80032a0 <HAL_I2S_Init+0x1b8>
 800329c:	4a31      	ldr	r2, [pc, #196]	; (8003364 <HAL_I2S_Init+0x27c>)
 800329e:	e001      	b.n	80032a4 <HAL_I2S_Init+0x1bc>
 80032a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032a8:	f023 030f 	bic.w	r3, r3, #15
 80032ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2b      	ldr	r2, [pc, #172]	; (8003360 <HAL_I2S_Init+0x278>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_I2S_Init+0x1d4>
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_I2S_Init+0x27c>)
 80032ba:	e001      	b.n	80032c0 <HAL_I2S_Init+0x1d8>
 80032bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c0:	2202      	movs	r2, #2
 80032c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <HAL_I2S_Init+0x278>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_I2S_Init+0x1ea>
 80032ce:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_I2S_Init+0x27c>)
 80032d0:	e001      	b.n	80032d6 <HAL_I2S_Init+0x1ee>
 80032d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e2:	d003      	beq.n	80032ec <HAL_I2S_Init+0x204>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d103      	bne.n	80032f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	e001      	b.n	80032f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003302:	4313      	orrs	r3, r2
 8003304:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800330c:	4313      	orrs	r3, r2
 800330e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003316:	4313      	orrs	r3, r2
 8003318:	b29a      	uxth	r2, r3
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	4313      	orrs	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003324:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_I2S_Init+0x278>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_I2S_Init+0x24c>
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_I2S_Init+0x27c>)
 8003332:	e001      	b.n	8003338 <HAL_I2S_Init+0x250>
 8003334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003338:	897a      	ldrh	r2, [r7, #10]
 800333a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	0800345f 	.word	0x0800345f
 8003358:	cccccccd 	.word	0xcccccccd
 800335c:	08003575 	.word	0x08003575
 8003360:	40003800 	.word	0x40003800
 8003364:	40003400 	.word	0x40003400

08003368 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c9a      	adds	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10e      	bne.n	80033f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ffb8 	bl	8003368 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	b292      	uxth	r2, r2
 8003414:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	1c9a      	adds	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10e      	bne.n	8003456 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003446:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff93 	bl	800337c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b04      	cmp	r3, #4
 8003478:	d13a      	bne.n	80034f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d109      	bne.n	8003498 <I2S_IRQHandler+0x3a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d102      	bne.n	8003498 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff ffb4 	bl	8003400 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d126      	bne.n	80034f0 <I2S_IRQHandler+0x92>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d11f      	bne.n	80034f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f043 0202 	orr.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ff50 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d136      	bne.n	800356a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d109      	bne.n	800351a <I2S_IRQHandler+0xbc>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d102      	bne.n	800351a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff45 	bl	80033a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b08      	cmp	r3, #8
 8003522:	d122      	bne.n	800356a <I2S_IRQHandler+0x10c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d11b      	bne.n	800356a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003540:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f043 0204 	orr.w	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff13 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a92      	ldr	r2, [pc, #584]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800358e:	4b92      	ldr	r3, [pc, #584]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003590:	e001      	b.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a8b      	ldr	r2, [pc, #556]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035ac:	4b8a      	ldr	r3, [pc, #552]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ae:	e001      	b.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c0:	d004      	beq.n	80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 8099 	bne.w	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d107      	bne.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f925 	bl	8003830 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9c8 	bl	8003990 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d13a      	bne.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d035      	beq.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6e      	ldr	r2, [pc, #440]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800361e:	4b6e      	ldr	r3, [pc, #440]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003620:	e001      	b.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4969      	ldr	r1, [pc, #420]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800362e:	428b      	cmp	r3, r1
 8003630:	d101      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003632:	4b69      	ldr	r3, [pc, #420]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003634:	e001      	b.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800363e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800364e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f043 0202 	orr.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fe88 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b08      	cmp	r3, #8
 8003688:	f040 80c3 	bne.w	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80bd 	beq.w	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a49      	ldr	r2, [pc, #292]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036b2:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b4:	e001      	b.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4944      	ldr	r1, [pc, #272]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036c2:	428b      	cmp	r3, r1
 80036c4:	d101      	bne.n	80036ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036c6:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036c8:	e001      	b.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f043 0204 	orr.w	r2, r3, #4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fe4a 	bl	8003390 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036fc:	e089      	b.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d107      	bne.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8be 	bl	8003894 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f8fd 	bl	800392c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d12f      	bne.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02a      	beq.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003754:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003762:	e001      	b.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4919      	ldr	r1, [pc, #100]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003770:	428b      	cmp	r3, r1
 8003772:	d101      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003776:	e001      	b.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003780:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f043 0202 	orr.w	r2, r3, #2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fdfa 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d136      	bne.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d031      	beq.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037bc:	e001      	b.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4902      	ldr	r1, [pc, #8]	; (80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ca:	428b      	cmp	r3, r1
 80037cc:	d106      	bne.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037ce:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d0:	e006      	b.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037d2:	bf00      	nop
 80037d4:	40003800 	.word	0x40003800
 80037d8:	40003400 	.word	0x40003400
 80037dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f043 0204 	orr.w	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fdc0 	bl	8003390 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003810:	e000      	b.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003812:	bf00      	nop
}
 8003814:	bf00      	nop
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c99      	adds	r1, r3, #2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6251      	str	r1, [r2, #36]	; 0x24
 8003842:	881a      	ldrh	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d113      	bne.n	800388a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003870:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ffc9 	bl	800381c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c99      	adds	r1, r3, #2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6251      	str	r1, [r2, #36]	; 0x24
 80038a6:	8819      	ldrh	r1, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <I2SEx_TxISR_I2SExt+0x90>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <I2SEx_TxISR_I2SExt+0x22>
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <I2SEx_TxISR_I2SExt+0x94>)
 80038b4:	e001      	b.n	80038ba <I2SEx_TxISR_I2SExt+0x26>
 80038b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ba:	460a      	mov	r2, r1
 80038bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d121      	bne.n	800391a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <I2SEx_TxISR_I2SExt+0x90>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <I2SEx_TxISR_I2SExt+0x50>
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <I2SEx_TxISR_I2SExt+0x94>)
 80038e2:	e001      	b.n	80038e8 <I2SEx_TxISR_I2SExt+0x54>
 80038e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	490d      	ldr	r1, [pc, #52]	; (8003924 <I2SEx_TxISR_I2SExt+0x90>)
 80038f0:	428b      	cmp	r3, r1
 80038f2:	d101      	bne.n	80038f8 <I2SEx_TxISR_I2SExt+0x64>
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <I2SEx_TxISR_I2SExt+0x94>)
 80038f6:	e001      	b.n	80038fc <I2SEx_TxISR_I2SExt+0x68>
 80038f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003900:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff81 	bl	800381c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40003800 	.word	0x40003800
 8003928:	40003400 	.word	0x40003400

0800392c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68d8      	ldr	r0, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	1c99      	adds	r1, r3, #2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003944:	b282      	uxth	r2, r0
 8003946:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d113      	bne.n	8003988 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff4a 	bl	800381c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a20      	ldr	r2, [pc, #128]	; (8003a20 <I2SEx_RxISR_I2SExt+0x90>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <I2SEx_RxISR_I2SExt+0x16>
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <I2SEx_RxISR_I2SExt+0x94>)
 80039a4:	e001      	b.n	80039aa <I2SEx_RxISR_I2SExt+0x1a>
 80039a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039aa:	68d8      	ldr	r0, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	1c99      	adds	r1, r3, #2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039b6:	b282      	uxth	r2, r0
 80039b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d121      	bne.n	8003a16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <I2SEx_RxISR_I2SExt+0x90>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <I2SEx_RxISR_I2SExt+0x50>
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <I2SEx_RxISR_I2SExt+0x94>)
 80039de:	e001      	b.n	80039e4 <I2SEx_RxISR_I2SExt+0x54>
 80039e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	490d      	ldr	r1, [pc, #52]	; (8003a20 <I2SEx_RxISR_I2SExt+0x90>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d101      	bne.n	80039f4 <I2SEx_RxISR_I2SExt+0x64>
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <I2SEx_RxISR_I2SExt+0x94>)
 80039f2:	e001      	b.n	80039f8 <I2SEx_RxISR_I2SExt+0x68>
 80039f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff03 	bl	800381c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40003800 	.word	0x40003800
 8003a24:	40003400 	.word	0x40003400

08003a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e267      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d075      	beq.n	8003b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a46:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d00c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a52:	4b85      	ldr	r3, [pc, #532]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d112      	bne.n	8003a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5e:	4b82      	ldr	r3, [pc, #520]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6a:	d10b      	bne.n	8003a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	4b7e      	ldr	r3, [pc, #504]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d05b      	beq.n	8003b30 <HAL_RCC_OscConfig+0x108>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d157      	bne.n	8003b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e242      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCC_OscConfig+0x74>
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e01d      	b.n	8003ad8 <HAL_RCC_OscConfig+0xb0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x98>
 8003aa6:	4b70      	ldr	r3, [pc, #448]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6f      	ldr	r2, [pc, #444]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b6d      	ldr	r3, [pc, #436]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6c      	ldr	r2, [pc, #432]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0xb0>
 8003ac0:	4b69      	ldr	r3, [pc, #420]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a68      	ldr	r2, [pc, #416]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b66      	ldr	r3, [pc, #408]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a65      	ldr	r2, [pc, #404]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d013      	beq.n	8003b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd faea 	bl	80010b8 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7fd fae6 	bl	80010b8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	; 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e207      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xc0>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fad6 	bl	80010b8 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fd fad2 	bl	80010b8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1f3      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	4b51      	ldr	r3, [pc, #324]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0xe8>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d063      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d11c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b44      	ldr	r3, [pc, #272]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d116      	bne.n	8003b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x152>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e1c7      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4937      	ldr	r1, [pc, #220]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	e03a      	b.n	8003c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b98:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCC_OscConfig+0x244>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fd fa8b 	bl	80010b8 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7fd fa87 	bl	80010b8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1a8      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4925      	ldr	r1, [pc, #148]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]
 8003bd8:	e015      	b.n	8003c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCC_OscConfig+0x244>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd fa6a 	bl	80010b8 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fd fa66 	bl	80010b8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e187      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d036      	beq.n	8003c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_RCC_OscConfig+0x248>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fd fa4a 	bl	80010b8 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fd fa46 	bl	80010b8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e167      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x200>
 8003c46:	e01b      	b.n	8003c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_OscConfig+0x248>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4e:	f7fd fa33 	bl	80010b8 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	e00e      	b.n	8003c74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fd fa2f 	bl	80010b8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d907      	bls.n	8003c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e150      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	42470000 	.word	0x42470000
 8003c70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	4b88      	ldr	r3, [pc, #544]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ea      	bne.n	8003c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8097 	beq.w	8003dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b81      	ldr	r3, [pc, #516]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10f      	bne.n	8003cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	4b7d      	ldr	r3, [pc, #500]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	4a7c      	ldr	r2, [pc, #496]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	; 0x40
 8003cae:	4b7a      	ldr	r3, [pc, #488]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbe:	4b77      	ldr	r3, [pc, #476]	; (8003e9c <HAL_RCC_OscConfig+0x474>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d118      	bne.n	8003cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cca:	4b74      	ldr	r3, [pc, #464]	; (8003e9c <HAL_RCC_OscConfig+0x474>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a73      	ldr	r2, [pc, #460]	; (8003e9c <HAL_RCC_OscConfig+0x474>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd6:	f7fd f9ef 	bl	80010b8 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7fd f9eb 	bl	80010b8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e10c      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <HAL_RCC_OscConfig+0x474>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2ea>
 8003d04:	4b64      	ldr	r3, [pc, #400]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	4a63      	ldr	r2, [pc, #396]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d10:	e01c      	b.n	8003d4c <HAL_RCC_OscConfig+0x324>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x30c>
 8003d1a:	4b5f      	ldr	r3, [pc, #380]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a5e      	ldr	r2, [pc, #376]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	; 0x70
 8003d26:	4b5c      	ldr	r3, [pc, #368]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a5b      	ldr	r2, [pc, #364]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0x324>
 8003d34:	4b58      	ldr	r3, [pc, #352]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a57      	ldr	r2, [pc, #348]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	4b55      	ldr	r3, [pc, #340]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a54      	ldr	r2, [pc, #336]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 0304 	bic.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fd f9b0 	bl	80010b8 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fd f9ac 	bl	80010b8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0cb      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d72:	4b49      	ldr	r3, [pc, #292]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ee      	beq.n	8003d5c <HAL_RCC_OscConfig+0x334>
 8003d7e:	e014      	b.n	8003daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d80:	f7fd f99a 	bl	80010b8 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fd f996 	bl	80010b8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0b5      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ee      	bne.n	8003d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db0:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	4a38      	ldr	r2, [pc, #224]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80a1 	beq.w	8003f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc6:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d05c      	beq.n	8003e8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d141      	bne.n	8003e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd f96a 	bl	80010b8 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd f966 	bl	80010b8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e087      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	491b      	ldr	r1, [pc, #108]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e36:	f7fd f93f 	bl	80010b8 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3e:	f7fd f93b 	bl	80010b8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e05c      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x416>
 8003e5c:	e054      	b.n	8003f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e64:	f7fd f928 	bl	80010b8 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fd f924 	bl	80010b8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e045      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_OscConfig+0x470>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x444>
 8003e8a:	e03d      	b.n	8003f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d107      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e038      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <HAL_RCC_OscConfig+0x4ec>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d028      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d121      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d11a      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d111      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	3b01      	subs	r3, #1
 8003eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40023800 	.word	0x40023800

08003f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0cc      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b68      	ldr	r3, [pc, #416]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d90c      	bls.n	8003f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b63      	ldr	r3, [pc, #396]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0b8      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f6c:	4b59      	ldr	r3, [pc, #356]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a58      	ldr	r2, [pc, #352]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f84:	4b53      	ldr	r3, [pc, #332]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a52      	ldr	r2, [pc, #328]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f90:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	494d      	ldr	r1, [pc, #308]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d044      	beq.n	8004038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb6:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d119      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e07f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd6:	4b3f      	ldr	r3, [pc, #252]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e06f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e067      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ff6:	4b37      	ldr	r3, [pc, #220]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 0203 	bic.w	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4934      	ldr	r1, [pc, #208]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004008:	f7fd f856 	bl	80010b8 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	e00a      	b.n	8004026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004010:	f7fd f852 	bl	80010b8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e04f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 020c 	and.w	r2, r3, #12
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	429a      	cmp	r2, r3
 8004036:	d1eb      	bne.n	8004010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d20c      	bcs.n	8004060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e032      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4916      	ldr	r1, [pc, #88]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	490e      	ldr	r1, [pc, #56]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800409e:	f000 f821 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 80040a2:	4602      	mov	r2, r0
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	490a      	ldr	r1, [pc, #40]	; (80040d8 <HAL_RCC_ClockConfig+0x1c0>)
 80040b0:	5ccb      	ldrb	r3, [r1, r3]
 80040b2:	fa22 f303 	lsr.w	r3, r2, r3
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc feec 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023c00 	.word	0x40023c00
 80040d4:	40023800 	.word	0x40023800
 80040d8:	0800ba50 	.word	0x0800ba50
 80040dc:	20000000 	.word	0x20000000
 80040e0:	20000004 	.word	0x20000004

080040e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e8:	b094      	sub	sp, #80	; 0x50
 80040ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	647b      	str	r3, [r7, #68]	; 0x44
 80040f0:	2300      	movs	r3, #0
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	2300      	movs	r3, #0
 80040f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040fc:	4b79      	ldr	r3, [pc, #484]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 030c 	and.w	r3, r3, #12
 8004104:	2b08      	cmp	r3, #8
 8004106:	d00d      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x40>
 8004108:	2b08      	cmp	r3, #8
 800410a:	f200 80e1 	bhi.w	80042d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x34>
 8004112:	2b04      	cmp	r3, #4
 8004114:	d003      	beq.n	800411e <HAL_RCC_GetSysClockFreq+0x3a>
 8004116:	e0db      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b73      	ldr	r3, [pc, #460]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800411c:	e0db      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800411e:	4b73      	ldr	r3, [pc, #460]	; (80042ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004122:	e0d8      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004124:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800412c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800412e:	4b6d      	ldr	r3, [pc, #436]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d063      	beq.n	8004202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4b6a      	ldr	r3, [pc, #424]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	2200      	movs	r2, #0
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38
 8004144:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	633b      	str	r3, [r7, #48]	; 0x30
 800414e:	2300      	movs	r3, #0
 8004150:	637b      	str	r3, [r7, #52]	; 0x34
 8004152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	f04f 0000 	mov.w	r0, #0
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	0159      	lsls	r1, r3, #5
 8004164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004168:	0150      	lsls	r0, r2, #5
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4621      	mov	r1, r4
 8004170:	1a51      	subs	r1, r2, r1
 8004172:	6139      	str	r1, [r7, #16]
 8004174:	4629      	mov	r1, r5
 8004176:	eb63 0301 	sbc.w	r3, r3, r1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004188:	4659      	mov	r1, fp
 800418a:	018b      	lsls	r3, r1, #6
 800418c:	4651      	mov	r1, sl
 800418e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004192:	4651      	mov	r1, sl
 8004194:	018a      	lsls	r2, r1, #6
 8004196:	4651      	mov	r1, sl
 8004198:	ebb2 0801 	subs.w	r8, r2, r1
 800419c:	4659      	mov	r1, fp
 800419e:	eb63 0901 	sbc.w	r9, r3, r1
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041b6:	4690      	mov	r8, r2
 80041b8:	4699      	mov	r9, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	eb18 0303 	adds.w	r3, r8, r3
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	462b      	mov	r3, r5
 80041c4:	eb49 0303 	adc.w	r3, r9, r3
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041d6:	4629      	mov	r1, r5
 80041d8:	024b      	lsls	r3, r1, #9
 80041da:	4621      	mov	r1, r4
 80041dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041e0:	4621      	mov	r1, r4
 80041e2:	024a      	lsls	r2, r1, #9
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ea:	2200      	movs	r2, #0
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041f4:	f7fc f83e 	bl	8000274 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4613      	mov	r3, r2
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004200:	e058      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004202:	4b38      	ldr	r3, [pc, #224]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	2200      	movs	r2, #0
 800420a:	4618      	mov	r0, r3
 800420c:	4611      	mov	r1, r2
 800420e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004212:	623b      	str	r3, [r7, #32]
 8004214:	2300      	movs	r3, #0
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800421c:	4642      	mov	r2, r8
 800421e:	464b      	mov	r3, r9
 8004220:	f04f 0000 	mov.w	r0, #0
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	0159      	lsls	r1, r3, #5
 800422a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800422e:	0150      	lsls	r0, r2, #5
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4641      	mov	r1, r8
 8004236:	ebb2 0a01 	subs.w	sl, r2, r1
 800423a:	4649      	mov	r1, r9
 800423c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800424c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004254:	ebb2 040a 	subs.w	r4, r2, sl
 8004258:	eb63 050b 	sbc.w	r5, r3, fp
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	00eb      	lsls	r3, r5, #3
 8004266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426a:	00e2      	lsls	r2, r4, #3
 800426c:	4614      	mov	r4, r2
 800426e:	461d      	mov	r5, r3
 8004270:	4643      	mov	r3, r8
 8004272:	18e3      	adds	r3, r4, r3
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	464b      	mov	r3, r9
 8004278:	eb45 0303 	adc.w	r3, r5, r3
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800428a:	4629      	mov	r1, r5
 800428c:	028b      	lsls	r3, r1, #10
 800428e:	4621      	mov	r1, r4
 8004290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004294:	4621      	mov	r1, r4
 8004296:	028a      	lsls	r2, r1, #10
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429e:	2200      	movs	r2, #0
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	61fa      	str	r2, [r7, #28]
 80042a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a8:	f7fb ffe4 	bl	8000274 <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4613      	mov	r3, r2
 80042b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	3301      	adds	r3, #1
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ce:	e002      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3750      	adds	r7, #80	; 0x50
 80042dc:	46bd      	mov	sp, r7
 80042de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	007a1200 	.word	0x007a1200

080042f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000000 	.word	0x20000000

08004308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800430c:	f7ff fff0 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0a9b      	lsrs	r3, r3, #10
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCC_GetPCLK1Freq+0x24>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	0800ba60 	.word	0x0800ba60

08004330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004334:	f7ff ffdc 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0b5b      	lsrs	r3, r3, #13
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023800 	.word	0x40023800
 8004354:	0800ba60 	.word	0x0800ba60

08004358 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	220f      	movs	r2, #15
 8004366:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCC_GetClockConfig+0x5c>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0203 	and.w	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_GetClockConfig+0x5c>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	08db      	lsrs	r3, r3, #3
 8004392:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <HAL_RCC_GetClockConfig+0x60>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0207 	and.w	r2, r3, #7
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	601a      	str	r2, [r3, #0]
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40023c00 	.word	0x40023c00

080043bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d038      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043e4:	4b68      	ldr	r3, [pc, #416]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ea:	f7fc fe65 	bl	80010b8 <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043f2:	f7fc fe61 	bl	80010b8 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e0bd      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004404:	4b61      	ldr	r3, [pc, #388]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	071b      	lsls	r3, r3, #28
 8004422:	495a      	ldr	r1, [pc, #360]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800442a:	4b57      	ldr	r3, [pc, #348]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004430:	f7fc fe42 	bl	80010b8 <HAL_GetTick>
 8004434:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004438:	f7fc fe3e 	bl	80010b8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e09a      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8083 	beq.w	800456a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	4b48      	ldr	r3, [pc, #288]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	4a47      	ldr	r2, [pc, #284]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004472:	6413      	str	r3, [r2, #64]	; 0x40
 8004474:	4b45      	ldr	r3, [pc, #276]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004480:	4b43      	ldr	r3, [pc, #268]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a42      	ldr	r2, [pc, #264]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800448c:	f7fc fe14 	bl	80010b8 <HAL_GetTick>
 8004490:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fc fe10 	bl	80010b8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e06c      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044a6:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044b2:	4b36      	ldr	r3, [pc, #216]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ba:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d02f      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d028      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d0:	4b2e      	ldr	r3, [pc, #184]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044da:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044e0:	4b2c      	ldr	r3, [pc, #176]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044e6:	4a29      	ldr	r2, [pc, #164]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d114      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fc fdde 	bl	80010b8 <HAL_GetTick>
 80044fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fc fdda 	bl	80010b8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e034      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	4b1d      	ldr	r3, [pc, #116]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ee      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800452e:	d10d      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004530:	4b16      	ldr	r3, [pc, #88]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004544:	4911      	ldr	r1, [pc, #68]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
 800454a:	e005      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a0e      	ldr	r2, [pc, #56]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004552:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004556:	6093      	str	r3, [r2, #8]
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004564:	4909      	ldr	r1, [pc, #36]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004566:	4313      	orrs	r3, r2
 8004568:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7d1a      	ldrb	r2, [r3, #20]
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800457c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	42470068 	.word	0x42470068
 800458c:	40023800 	.word	0x40023800
 8004590:	40007000 	.word	0x40007000
 8004594:	42470e40 	.word	0x42470e40
 8004598:	424711e0 	.word	0x424711e0

0800459c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d140      	bne.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d131      	bne.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045d0:	4b1f      	ldr	r3, [pc, #124]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045d2:	617b      	str	r3, [r7, #20]
          break;
 80045d4:	e031      	b.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045d6:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e2:	d109      	bne.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ee:	4a19      	ldr	r2, [pc, #100]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	e008      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004602:	4a15      	ldr	r2, [pc, #84]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800460c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004610:	099b      	lsrs	r3, r3, #6
 8004612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004624:	0f1b      	lsrs	r3, r3, #28
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	617b      	str	r3, [r7, #20]
          break;
 8004632:	e002      	b.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
          break;
 8004638:	bf00      	nop
        }
      }
      break;
 800463a:	bf00      	nop
    }
  }
  return frequency;
 800463c:	697b      	ldr	r3, [r7, #20]
}
 800463e:	4618      	mov	r0, r3
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40023800 	.word	0x40023800
 8004650:	00bb8000 	.word	0x00bb8000
 8004654:	007a1200 	.word	0x007a1200
 8004658:	00f42400 	.word	0x00f42400

0800465c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07b      	b.n	8004766 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	2b00      	cmp	r3, #0
 8004674:	d108      	bne.n	8004688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800467e:	d009      	beq.n	8004694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	61da      	str	r2, [r3, #28]
 8004686:	e005      	b.n	8004694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fc fbac 	bl	8000e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	ea42 0103 	orr.w	r1, r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	f003 0104 	and.w	r1, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f003 0210 	and.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e041      	b.n	8004804 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f839 	bl	800480c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f000 f9c9 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d001      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e044      	b.n	80048c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x6c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d013      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x6c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x6c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x6c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a17      	ldr	r2, [pc, #92]	; (80048dc <HAL_TIM_Base_Start_IT+0xbc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x6c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d111      	bne.n	80048b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b06      	cmp	r3, #6
 800489c:	d010      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ae:	e007      	b.n	80048c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40000800 	.word	0x40000800
 80048dc:	40000c00 	.word	0x40000c00
 80048e0:	40014000 	.word	0x40014000

080048e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0202 	mvn.w	r2, #2
 8004910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8ee 	bl	8004b08 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8e0 	bl	8004af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f8f1 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b04      	cmp	r3, #4
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0204 	mvn.w	r2, #4
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8c4 	bl	8004b08 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8b6 	bl	8004af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8c7 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0208 	mvn.w	r2, #8
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f89a 	bl	8004b08 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f88c 	bl	8004af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f89d 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0210 	mvn.w	r2, #16
 8004a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2208      	movs	r2, #8
 8004a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f870 	bl	8004b08 <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f862 	bl	8004af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f873 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0201 	mvn.w	r2, #1
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc f87c 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8e2 	bl	8004c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d107      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f838 	bl	8004b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d10e      	bne.n	8004aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d107      	bne.n	8004aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0220 	mvn.w	r2, #32
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8ac 	bl	8004c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a34      	ldr	r2, [pc, #208]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a31      	ldr	r2, [pc, #196]	; (8004c2c <TIM_Base_SetConfig+0xe8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a30      	ldr	r2, [pc, #192]	; (8004c30 <TIM_Base_SetConfig+0xec>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <TIM_Base_SetConfig+0xf0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01b      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d017      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <TIM_Base_SetConfig+0xe8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <TIM_Base_SetConfig+0xec>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00f      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a20      	ldr	r2, [pc, #128]	; (8004c34 <TIM_Base_SetConfig+0xf0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a1f      	ldr	r2, [pc, #124]	; (8004c38 <TIM_Base_SetConfig+0xf4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d007      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <TIM_Base_SetConfig+0xf8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <TIM_Base_SetConfig+0xfc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d108      	bne.n	8004be0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d103      	bne.n	8004c14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	615a      	str	r2, [r3, #20]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800

08004c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	f107 001c 	add.w	r0, r7, #28
 8004c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d122      	bne.n	8004cca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d105      	bne.n	8004cbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9c0 	bl	8005044 <USB_CoreReset>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	e01a      	b.n	8004d00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f9b4 	bl	8005044 <USB_CoreReset>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8004cf2:	e005      	b.n	8004d00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d10b      	bne.n	8004d1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f043 0206 	orr.w	r2, r3, #6
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d2a:	b004      	add	sp, #16
 8004d2c:	4770      	bx	lr

08004d2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f043 0201 	orr.w	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 0201 	bic.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d115      	bne.n	8004dc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004da0:	2001      	movs	r0, #1
 8004da2:	f7fc f995 	bl	80010d0 <HAL_Delay>
      ms++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f93a 	bl	8005026 <USB_GetMode>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d01e      	beq.n	8004df6 <USB_SetCurrentMode+0x84>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b31      	cmp	r3, #49	; 0x31
 8004dbc:	d9f0      	bls.n	8004da0 <USB_SetCurrentMode+0x2e>
 8004dbe:	e01a      	b.n	8004df6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d115      	bne.n	8004df2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	f7fc f97c 	bl	80010d0 <HAL_Delay>
      ms++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f921 	bl	8005026 <USB_GetMode>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <USB_SetCurrentMode+0x84>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b31      	cmp	r3, #49	; 0x31
 8004dee:	d9f0      	bls.n	8004dd2 <USB_SetCurrentMode+0x60>
 8004df0:	e001      	b.n	8004df6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e005      	b.n	8004e02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b32      	cmp	r3, #50	; 0x32
 8004dfa:	d101      	bne.n	8004e00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <USB_FlushTxFifo+0x64>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d901      	bls.n	8004e2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e01b      	b.n	8004e64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	daf2      	bge.n	8004e1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	019b      	lsls	r3, r3, #6
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a08      	ldr	r2, [pc, #32]	; (8004e70 <USB_FlushTxFifo+0x64>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e006      	b.n	8004e64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d0f0      	beq.n	8004e44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	00030d40 	.word	0x00030d40

08004e74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a11      	ldr	r2, [pc, #68]	; (8004ed0 <USB_FlushRxFifo+0x5c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e018      	b.n	8004ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	daf2      	bge.n	8004e80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a08      	ldr	r2, [pc, #32]	; (8004ed0 <USB_FlushRxFifo+0x5c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d901      	bls.n	8004eb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e006      	b.n	8004ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d0f0      	beq.n	8004ea4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	00030d40 	.word	0x00030d40

08004ed4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	71fb      	strb	r3, [r7, #7]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ef2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d123      	bne.n	8004f42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004efa:	88bb      	ldrh	r3, [r7, #4]
 8004efc:	3303      	adds	r3, #3
 8004efe:	089b      	lsrs	r3, r3, #2
 8004f00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f02:	2300      	movs	r3, #0
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e018      	b.n	8004f3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	031a      	lsls	r2, r3, #12
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f14:	461a      	mov	r2, r3
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	3301      	adds	r3, #1
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3e2      	bcc.n	8004f08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3724      	adds	r7, #36	; 0x24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b08b      	sub	sp, #44	; 0x2c
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	089b      	lsrs	r3, r3, #2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	e014      	b.n	8004fa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	3301      	adds	r3, #1
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	3301      	adds	r3, #1
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d3e6      	bcc.n	8004f7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fae:	8bfb      	ldrh	r3, [r7, #30]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01e      	beq.n	8004ff2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f107 0310 	add.w	r3, r7, #16
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	701a      	strb	r2, [r3, #0]
      i++;
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fe6:	8bfb      	ldrh	r3, [r7, #30]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fec:	8bfb      	ldrh	r3, [r7, #30]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1ea      	bne.n	8004fc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	372c      	adds	r7, #44	; 0x2c
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4013      	ands	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0301 	and.w	r3, r3, #1
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3301      	adds	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <USB_CoreReset+0x64>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e01b      	b.n	800509a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	daf2      	bge.n	8005050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f043 0201 	orr.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <USB_CoreReset+0x64>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e006      	b.n	800509a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b01      	cmp	r3, #1
 8005096:	d0f0      	beq.n	800507a <USB_CoreReset+0x36>

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	00030d40 	.word	0x00030d40

080050ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050ac:	b084      	sub	sp, #16
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050cc:	461a      	mov	r2, r3
 80050ce:	2300      	movs	r3, #0
 80050d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d018      	beq.n	8005134 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d10a      	bne.n	800511e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005116:	f043 0304 	orr.w	r3, r3, #4
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	e014      	b.n	8005148 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800512c:	f023 0304 	bic.w	r3, r3, #4
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e009      	b.n	8005148 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005142:	f023 0304 	bic.w	r3, r3, #4
 8005146:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005148:	2110      	movs	r1, #16
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fe5e 	bl	8004e0c <USB_FlushTxFifo>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fe8a 	bl	8004e74 <USB_FlushRxFifo>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	e015      	b.n	800519c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	461a      	mov	r2, r3
 800517e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005182:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005190:	461a      	mov	r2, r3
 8005192:	2300      	movs	r3, #0
 8005194:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3301      	adds	r3, #1
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d3e5      	bcc.n	8005170 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051b0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a13      	ldr	r2, [pc, #76]	; (8005218 <USB_HostInit+0x16c>)
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <USB_HostInit+0x170>)
 80051d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80051d4:	e009      	b.n	80051ea <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2280      	movs	r2, #128	; 0x80
 80051da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a10      	ldr	r2, [pc, #64]	; (8005220 <USB_HostInit+0x174>)
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a0f      	ldr	r2, [pc, #60]	; (8005224 <USB_HostInit+0x178>)
 80051e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f043 0210 	orr.w	r2, r3, #16
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699a      	ldr	r2, [r3, #24]
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <USB_HostInit+0x17c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005208:	7dfb      	ldrb	r3, [r7, #23]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005214:	b004      	add	sp, #16
 8005216:	4770      	bx	lr
 8005218:	01000200 	.word	0x01000200
 800521c:	00e00300 	.word	0x00e00300
 8005220:	00600080 	.word	0x00600080
 8005224:	004000e0 	.word	0x004000e0
 8005228:	a3200008 	.word	0xa3200008

0800522c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005264:	4313      	orrs	r3, r2
 8005266:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d107      	bne.n	800527e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005274:	461a      	mov	r2, r3
 8005276:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800527a:	6053      	str	r3, [r2, #4]
 800527c:	e009      	b.n	8005292 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d106      	bne.n	8005292 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800528a:	461a      	mov	r2, r3
 800528c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005290:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80052d0:	2064      	movs	r0, #100	; 0x64
 80052d2:	f7fb fefd 	bl	80010d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80052e4:	200a      	movs	r0, #10
 80052e6:	f7fb fef3 	bl	80010d0 <HAL_Delay>

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005318:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <USB_DriveVbus+0x44>
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d106      	bne.n	8005338 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005336:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800533e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005342:	d109      	bne.n	8005358 <USB_DriveVbus+0x64>
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005356:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	0c5b      	lsrs	r3, r3, #17
 8005384:	f003 0303 	and.w	r3, r3, #3
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	b29b      	uxth	r3, r3
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	4608      	mov	r0, r1
 80053c2:	4611      	mov	r1, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	70fb      	strb	r3, [r7, #3]
 80053ca:	460b      	mov	r3, r1
 80053cc:	70bb      	strb	r3, [r7, #2]
 80053ce:	4613      	mov	r3, r2
 80053d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e6:	461a      	mov	r2, r3
 80053e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80053ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d87e      	bhi.n	80054f4 <USB_HC_Init+0x13c>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <USB_HC_Init+0x44>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	0800540d 	.word	0x0800540d
 8005400:	080054b7 	.word	0x080054b7
 8005404:	0800540d 	.word	0x0800540d
 8005408:	08005479 	.word	0x08005479
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	461a      	mov	r2, r3
 800541a:	f240 439d 	movw	r3, #1181	; 0x49d
 800541e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005420:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005424:	2b00      	cmp	r3, #0
 8005426:	da10      	bge.n	800544a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	4413      	add	r3, r2
 8005430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	78fa      	ldrb	r2, [r7, #3]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	440a      	add	r2, r1
 800543e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005446:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005448:	e057      	b.n	80054fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d051      	beq.n	80054fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	440a      	add	r2, r1
 800546c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005470:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005474:	60d3      	str	r3, [r2, #12]
      break;
 8005476:	e040      	b.n	80054fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	461a      	mov	r2, r3
 8005486:	f240 639d 	movw	r3, #1693	; 0x69d
 800548a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800548c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005490:	2b00      	cmp	r3, #0
 8005492:	da34      	bge.n	80054fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80054b4:	e023      	b.n	80054fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c2:	461a      	mov	r2, r3
 80054c4:	f240 2325 	movw	r3, #549	; 0x225
 80054c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	da17      	bge.n	8005502 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80054f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80054f2:	e006      	b.n	8005502 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	77fb      	strb	r3, [r7, #31]
      break;
 80054f8:	e004      	b.n	8005504 <USB_HC_Init+0x14c>
      break;
 80054fa:	bf00      	nop
 80054fc:	e002      	b.n	8005504 <USB_HC_Init+0x14c>
      break;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <USB_HC_Init+0x14c>
      break;
 8005502:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	440a      	add	r2, r1
 800551a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551e:	f043 0302 	orr.w	r3, r3, #2
 8005522:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	2101      	movs	r1, #1
 8005534:	fa01 f303 	lsl.w	r3, r1, r3
 8005538:	6939      	ldr	r1, [r7, #16]
 800553a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800553e:	4313      	orrs	r3, r2
 8005540:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800554e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005552:	2b00      	cmp	r3, #0
 8005554:	da03      	bge.n	800555e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	e001      	b.n	8005562 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff feff 	bl	8005366 <USB_GetHostSpeed>
 8005568:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800556a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800556e:	2b02      	cmp	r3, #2
 8005570:	d106      	bne.n	8005580 <USB_HC_Init+0x1c8>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d003      	beq.n	8005580 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	e001      	b.n	8005584 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005584:	787b      	ldrb	r3, [r7, #1]
 8005586:	059b      	lsls	r3, r3, #22
 8005588:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800558c:	78bb      	ldrb	r3, [r7, #2]
 800558e:	02db      	lsls	r3, r3, #11
 8005590:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005594:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005596:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800559a:	049b      	lsls	r3, r3, #18
 800559c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80055a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	0159      	lsls	r1, r3, #5
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	440b      	add	r3, r1
 80055b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055c0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80055c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d003      	beq.n	80055d2 <USB_HC_Init+0x21a>
 80055ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d10f      	bne.n	80055f2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80055f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08c      	sub	sp, #48	; 0x30
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	4613      	mov	r3, r2
 8005608:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005618:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005622:	2b00      	cmp	r3, #0
 8005624:	d02d      	beq.n	8005682 <USB_HC_StartXfer+0x86>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	791b      	ldrb	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d129      	bne.n	8005682 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d117      	bne.n	8005664 <USB_HC_StartXfer+0x68>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	79db      	ldrb	r3, [r3, #7]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <USB_HC_StartXfer+0x48>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	79db      	ldrb	r3, [r3, #7]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d10f      	bne.n	8005664 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	4413      	add	r3, r2
 800564c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	6a3a      	ldr	r2, [r7, #32]
 8005658:	440a      	add	r2, r1
 800565a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <USB_HC_StartXfer+0x86>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	795b      	ldrb	r3, [r3, #5]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d107      	bne.n	8005682 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	4619      	mov	r1, r3
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fa0f 	bl	8005a9c <USB_DoPing>
      return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e0f8      	b.n	8005874 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d018      	beq.n	80056bc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	8912      	ldrh	r2, [r2, #8]
 8005692:	4413      	add	r3, r2
 8005694:	3b01      	subs	r3, #1
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	8912      	ldrh	r2, [r2, #8]
 800569a:	fbb3 f3f2 	udiv	r3, r3, r2
 800569e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80056a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056a2:	8b7b      	ldrh	r3, [r7, #26]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d90b      	bls.n	80056c0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80056a8:	8b7b      	ldrh	r3, [r7, #26]
 80056aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	8912      	ldrh	r2, [r2, #8]
 80056b2:	fb03 f202 	mul.w	r2, r3, r2
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	611a      	str	r2, [r3, #16]
 80056ba:	e001      	b.n	80056c0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80056bc:	2301      	movs	r3, #1
 80056be:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	78db      	ldrb	r3, [r3, #3]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	8912      	ldrh	r2, [r2, #8]
 80056ce:	fb03 f202 	mul.w	r2, r3, r2
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	611a      	str	r2, [r3, #16]
 80056d6:	e003      	b.n	80056e0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ea:	04d9      	lsls	r1, r3, #19
 80056ec:	4b63      	ldr	r3, [pc, #396]	; (800587c <USB_HC_StartXfer+0x280>)
 80056ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	7a9b      	ldrb	r3, [r3, #10]
 80056f6:	075b      	lsls	r3, r3, #29
 80056f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056fc:	69f9      	ldr	r1, [r7, #28]
 80056fe:	0148      	lsls	r0, r1, #5
 8005700:	6a39      	ldr	r1, [r7, #32]
 8005702:	4401      	add	r1, r0
 8005704:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005708:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800570a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	68d9      	ldr	r1, [r3, #12]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005722:	460a      	mov	r2, r1
 8005724:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	bf0c      	ite	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	2300      	movne	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	4413      	add	r3, r2
 8005746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	6a3a      	ldr	r2, [r7, #32]
 8005752:	440a      	add	r2, r1
 8005754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005758:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800575c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	7e7b      	ldrb	r3, [r7, #25]
 800576e:	075b      	lsls	r3, r3, #29
 8005770:	69f9      	ldr	r1, [r7, #28]
 8005772:	0148      	lsls	r0, r1, #5
 8005774:	6a39      	ldr	r1, [r7, #32]
 8005776:	4401      	add	r1, r0
 8005778:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005796:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	78db      	ldrb	r3, [r3, #3]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	e003      	b.n	80057b2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057b0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057b8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	461a      	mov	r2, r3
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e04e      	b.n	8005874 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	78db      	ldrb	r3, [r3, #3]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d149      	bne.n	8005872 <USB_HC_StartXfer+0x276>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d045      	beq.n	8005872 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	79db      	ldrb	r3, [r3, #7]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d830      	bhi.n	8005850 <USB_HC_StartXfer+0x254>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <USB_HC_StartXfer+0x1f8>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005805 	.word	0x08005805
 80057f8:	08005829 	.word	0x08005829
 80057fc:	08005805 	.word	0x08005805
 8005800:	08005829 	.word	0x08005829
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	3303      	adds	r3, #3
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800580e:	8afa      	ldrh	r2, [r7, #22]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	b29b      	uxth	r3, r3
 8005816:	429a      	cmp	r2, r3
 8005818:	d91c      	bls.n	8005854 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f043 0220 	orr.w	r2, r3, #32
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	619a      	str	r2, [r3, #24]
        }
        break;
 8005826:	e015      	b.n	8005854 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	3303      	adds	r3, #3
 800582e:	089b      	lsrs	r3, r3, #2
 8005830:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005832:	8afa      	ldrh	r2, [r7, #22]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	b29b      	uxth	r3, r3
 800583e:	429a      	cmp	r2, r3
 8005840:	d90a      	bls.n	8005858 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	619a      	str	r2, [r3, #24]
        }
        break;
 800584e:	e003      	b.n	8005858 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005850:	bf00      	nop
 8005852:	e002      	b.n	800585a <USB_HC_StartXfer+0x25e>
        break;
 8005854:	bf00      	nop
 8005856:	e000      	b.n	800585a <USB_HC_StartXfer+0x25e>
        break;
 8005858:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	68d9      	ldr	r1, [r3, #12]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	785a      	ldrb	r2, [r3, #1]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	b29b      	uxth	r3, r3
 8005868:	2000      	movs	r0, #0
 800586a:	9000      	str	r0, [sp, #0]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff fb31 	bl	8004ed4 <USB_WritePacket>
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3728      	adds	r7, #40	; 0x28
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	1ff80000 	.word	0x1ff80000

08005880 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	b29b      	uxth	r3, r3
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b089      	sub	sp, #36	; 0x24
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	460b      	mov	r3, r1
 80058ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	0c9b      	lsrs	r3, r3, #18
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	0fdb      	lsrs	r3, r3, #31
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	d104      	bne.n	80058fc <USB_HC_Halt+0x5a>
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	e0c8      	b.n	8005a8e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <USB_HC_Halt+0x66>
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d163      	bne.n	80059d0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	440a      	add	r2, r1
 800591e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005926:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 80ab 	bne.w	8005a8c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d133      	bne.n	80059aa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	440a      	add	r2, r1
 8005958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800595c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005960:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	440a      	add	r2, r1
 8005978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005980:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800598e:	d81d      	bhi.n	80059cc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a6:	d0ec      	beq.n	8005982 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059a8:	e070      	b.n	8005a8c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059ca:	e05f      	b.n	8005a8c <USB_HC_Halt+0x1ea>
            break;
 80059cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059ce:	e05d      	b.n	8005a8c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d133      	bne.n	8005a68 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a3e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3301      	adds	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a4c:	d81d      	bhi.n	8005a8a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a64:	d0ec      	beq.n	8005a40 <USB_HC_Halt+0x19e>
 8005a66:	e011      	b.n	8005a8c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e000      	b.n	8005a8c <USB_HC_Halt+0x1ea>
          break;
 8005a8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3724      	adds	r7, #36	; 0x24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	04da      	lsls	r2, r3, #19
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <USB_DoPing+0x74>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005acc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ae4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	461a      	mov	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	1ff80000 	.word	0x1ff80000

08005b14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff f911 	bl	8004d50 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b2e:	2110      	movs	r1, #16
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff f96b 	bl	8004e0c <USB_FlushTxFifo>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff f997 	bl	8004e74 <USB_FlushRxFifo>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e01f      	b.n	8005b96 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b0f      	cmp	r3, #15
 8005b9a:	d9dc      	bls.n	8005b56 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	e034      	b.n	8005c0c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bc8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005be8:	d80c      	bhi.n	8005c04 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c00:	d0ec      	beq.n	8005bdc <USB_StopHost+0xc8>
 8005c02:	e000      	b.n	8005c06 <USB_StopHost+0xf2>
        break;
 8005c04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b0f      	cmp	r3, #15
 8005c10:	d9c7      	bls.n	8005ba2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff f880 	bl	8004d2e <USB_EnableGlobalInt>

  return ret;
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b089      	sub	sp, #36	; 0x24
 8005c3c:	af04      	add	r7, sp, #16
 8005c3e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005c40:	2301      	movs	r3, #1
 8005c42:	2202      	movs	r2, #2
 8005c44:	2102      	movs	r1, #2
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fc66 	bl	8006518 <USBH_FindInterface>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2bff      	cmp	r3, #255	; 0xff
 8005c54:	d002      	beq.n	8005c5c <USBH_CDC_InterfaceInit+0x24>
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d901      	bls.n	8005c60 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e13d      	b.n	8005edc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fc3b 	bl	80064e0 <USBH_SelectInterface>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005c6e:	7bbb      	ldrb	r3, [r7, #14]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005c74:	2302      	movs	r3, #2
 8005c76:	e131      	b.n	8005edc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005c7e:	2050      	movs	r0, #80	; 0x50
 8005c80:	f005 fd28 	bl	800b6d4 <malloc>
 8005c84:	4603      	mov	r3, r0
 8005c86:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e11f      	b.n	8005edc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005c9c:	2250      	movs	r2, #80	; 0x50
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	68b8      	ldr	r0, [r7, #8]
 8005ca2:	f005 fd45 	bl	800b730 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	211a      	movs	r1, #26
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	b25b      	sxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	da15      	bge.n	8005cea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	211a      	movs	r1, #26
 8005cc4:	fb01 f303 	mul.w	r3, r1, r3
 8005cc8:	4413      	add	r3, r2
 8005cca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	211a      	movs	r1, #26
 8005cda:	fb01 f303 	mul.w	r3, r1, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ce4:	881a      	ldrh	r2, [r3, #0]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 ff2c 	bl	8007b4e <USBH_AllocPipe>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	7819      	ldrb	r1, [r3, #0]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	7858      	ldrb	r0, [r3, #1]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	8952      	ldrh	r2, [r2, #10]
 8005d16:	9202      	str	r2, [sp, #8]
 8005d18:	2203      	movs	r2, #3
 8005d1a:	9201      	str	r2, [sp, #4]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4623      	mov	r3, r4
 8005d20:	4602      	mov	r2, r0
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f001 fee4 	bl	8007af0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f005 fc27 	bl	800b584 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d36:	2300      	movs	r3, #0
 8005d38:	2200      	movs	r2, #0
 8005d3a:	210a      	movs	r1, #10
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fbeb 	bl	8006518 <USBH_FindInterface>
 8005d42:	4603      	mov	r3, r0
 8005d44:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2bff      	cmp	r3, #255	; 0xff
 8005d4a:	d002      	beq.n	8005d52 <USBH_CDC_InterfaceInit+0x11a>
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d901      	bls.n	8005d56 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d52:	2302      	movs	r3, #2
 8005d54:	e0c2      	b.n	8005edc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	211a      	movs	r1, #26
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	b25b      	sxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da16      	bge.n	8005d9c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	211a      	movs	r1, #26
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d7e:	781a      	ldrb	r2, [r3, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	211a      	movs	r1, #26
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	835a      	strh	r2, [r3, #26]
 8005d9a:	e015      	b.n	8005dc8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	211a      	movs	r1, #26
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	4413      	add	r3, r2
 8005da8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	211a      	movs	r1, #26
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dc2:	881a      	ldrh	r2, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	211a      	movs	r1, #26
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b25b      	sxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	da16      	bge.n	8005e0e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	211a      	movs	r1, #26
 8005de6:	fb01 f303 	mul.w	r3, r1, r3
 8005dea:	4413      	add	r3, r2
 8005dec:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	211a      	movs	r1, #26
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e06:	881a      	ldrh	r2, [r3, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	835a      	strh	r2, [r3, #26]
 8005e0c:	e015      	b.n	8005e3a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	211a      	movs	r1, #26
 8005e14:	fb01 f303 	mul.w	r3, r1, r3
 8005e18:	4413      	add	r3, r2
 8005e1a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e1e:	781a      	ldrb	r2, [r3, #0]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	211a      	movs	r1, #26
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e34:	881a      	ldrh	r2, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	7b9b      	ldrb	r3, [r3, #14]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 fe84 	bl	8007b4e <USBH_AllocPipe>
 8005e46:	4603      	mov	r3, r0
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	7bdb      	ldrb	r3, [r3, #15]
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f001 fe7a 	bl	8007b4e <USBH_AllocPipe>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	7b59      	ldrb	r1, [r3, #13]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	7b98      	ldrb	r0, [r3, #14]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	8b12      	ldrh	r2, [r2, #24]
 8005e7a:	9202      	str	r2, [sp, #8]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	9201      	str	r2, [sp, #4]
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	4623      	mov	r3, r4
 8005e84:	4602      	mov	r2, r0
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 fe32 	bl	8007af0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	7b19      	ldrb	r1, [r3, #12]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	7bd8      	ldrb	r0, [r3, #15]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	8b52      	ldrh	r2, [r2, #26]
 8005ea4:	9202      	str	r2, [sp, #8]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	9201      	str	r2, [sp, #4]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	4623      	mov	r3, r4
 8005eae:	4602      	mov	r2, r0
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fe1d 	bl	8007af0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	7b5b      	ldrb	r3, [r3, #13]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f005 fb5c 	bl	800b584 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	7b1b      	ldrb	r3, [r3, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f005 fb55 	bl	800b584 <USBH_LL_SetToggle>

  return USBH_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd90      	pop	{r4, r7, pc}

08005ee4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00e      	beq.n	8005f1c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 fe12 	bl	8007b2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fe3d 	bl	8007b90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	7b1b      	ldrb	r3, [r3, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00e      	beq.n	8005f42 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	7b1b      	ldrb	r3, [r3, #12]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f001 fdff 	bl	8007b2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	7b1b      	ldrb	r3, [r3, #12]
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fe2a 	bl	8007b90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	7b5b      	ldrb	r3, [r3, #13]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	7b5b      	ldrb	r3, [r3, #13]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 fdec 	bl	8007b2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	7b5b      	ldrb	r3, [r3, #13]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 fe17 	bl	8007b90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00b      	beq.n	8005f8c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f005 fbb1 	bl	800b6e4 <free>
    phost->pActiveClass->pData = 0U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f88:	2200      	movs	r2, #0
 8005f8a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3340      	adds	r3, #64	; 0x40
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8b1 	bl	8006116 <GetLineCoding>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d105      	bne.n	8005fca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d877      	bhi.n	80060e8 <USBH_CDC_Process+0x114>
 8005ff8:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <USBH_CDC_Process+0x2c>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	08006015 	.word	0x08006015
 8006004:	0800601b 	.word	0x0800601b
 8006008:	0800604b 	.word	0x0800604b
 800600c:	080060bf 	.word	0x080060bf
 8006010:	080060cd 	.word	0x080060cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	73fb      	strb	r3, [r7, #15]
      break;
 8006018:	e06d      	b.n	80060f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f897 	bl	8006154 <SetLineCoding>
 8006026:	4603      	mov	r3, r0
 8006028:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d104      	bne.n	800603a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006038:	e058      	b.n	80060ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d055      	beq.n	80060ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2204      	movs	r2, #4
 8006044:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006048:	e050      	b.n	80060ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	3340      	adds	r3, #64	; 0x40
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f860 	bl	8006116 <GetLineCoding>
 8006056:	4603      	mov	r3, r0
 8006058:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d126      	bne.n	80060ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006072:	791b      	ldrb	r3, [r3, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d13b      	bne.n	80060f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006082:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006084:	429a      	cmp	r2, r3
 8006086:	d133      	bne.n	80060f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006092:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006094:	429a      	cmp	r2, r3
 8006096:	d12b      	bne.n	80060f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d124      	bne.n	80060f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f958 	bl	800635c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80060ac:	e020      	b.n	80060f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d01d      	beq.n	80060f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2204      	movs	r2, #4
 80060b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060bc:	e018      	b.n	80060f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f867 	bl	8006192 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8da 	bl	800627e <CDC_ProcessReception>
      break;
 80060ca:	e014      	b.n	80060f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80060cc:	2100      	movs	r1, #0
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 ffef 	bl	80070b2 <USBH_ClrFeature>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80060e6:	e005      	b.n	80060f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80060e8:	bf00      	nop
 80060ea:	e004      	b.n	80060f6 <USBH_CDC_Process+0x122>
      break;
 80060ec:	bf00      	nop
 80060ee:	e002      	b.n	80060f6 <USBH_CDC_Process+0x122>
      break;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <USBH_CDC_Process+0x122>
      break;
 80060f4:	bf00      	nop

  }

  return status;
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	22a1      	movs	r2, #161	; 0xa1
 8006124:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2221      	movs	r2, #33	; 0x21
 800612a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2207      	movs	r2, #7
 800613c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2207      	movs	r2, #7
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fa81 	bl	800764c <USBH_CtlReq>
 800614a:	4603      	mov	r3, r0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2221      	movs	r2, #33	; 0x21
 8006162:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2207      	movs	r2, #7
 800617a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2207      	movs	r2, #7
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 fa62 	bl	800764c <USBH_CtlReq>
 8006188:	4603      	mov	r3, r0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af02      	add	r7, sp, #8
 8006198:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d002      	beq.n	80061b8 <CDC_ProcessTransmission+0x26>
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d023      	beq.n	80061fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80061b6:	e05e      	b.n	8006276 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	8b12      	ldrh	r2, [r2, #24]
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d90b      	bls.n	80061dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	69d9      	ldr	r1, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8b1a      	ldrh	r2, [r3, #24]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	7b5b      	ldrb	r3, [r3, #13]
 80061d0:	2001      	movs	r0, #1
 80061d2:	9000      	str	r0, [sp, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 fc48 	bl	8007a6a <USBH_BulkSendData>
 80061da:	e00b      	b.n	80061f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	7b5b      	ldrb	r3, [r3, #13]
 80061ea:	2001      	movs	r0, #1
 80061ec:	9000      	str	r0, [sp, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fc3b 	bl	8007a6a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061fc:	e03b      	b.n	8006276 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	7b5b      	ldrb	r3, [r3, #13]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f005 f993 	bl	800b530 <USBH_LL_GetURBState>
 800620a:	4603      	mov	r3, r0
 800620c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d128      	bne.n	8006266 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	8b12      	ldrh	r2, [r2, #24]
 800621c:	4293      	cmp	r3, r2
 800621e:	d90e      	bls.n	800623e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	8b12      	ldrh	r2, [r2, #24]
 8006228:	1a9a      	subs	r2, r3, r2
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	8b12      	ldrh	r2, [r2, #24]
 8006236:	441a      	add	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	61da      	str	r2, [r3, #28]
 800623c:	e002      	b.n	8006244 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d004      	beq.n	8006256 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006254:	e00e      	b.n	8006274 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f868 	bl	8006334 <USBH_CDC_TransmitCallback>
      break;
 8006264:	e006      	b.n	8006274 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006266:	7afb      	ldrb	r3, [r7, #11]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d103      	bne.n	8006274 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006274:	bf00      	nop
  }
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b086      	sub	sp, #24
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006290:	2300      	movs	r3, #0
 8006292:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800629a:	2b03      	cmp	r3, #3
 800629c:	d002      	beq.n	80062a4 <CDC_ProcessReception+0x26>
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d00e      	beq.n	80062c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80062a2:	e043      	b.n	800632c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	6a19      	ldr	r1, [r3, #32]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	8b5a      	ldrh	r2, [r3, #26]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	7b1b      	ldrb	r3, [r3, #12]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 fbff 	bl	8007ab4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2204      	movs	r2, #4
 80062ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062be:	e035      	b.n	800632c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	7b1b      	ldrb	r3, [r3, #12]
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f005 f932 	bl	800b530 <USBH_LL_GetURBState>
 80062cc:	4603      	mov	r3, r0
 80062ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80062d0:	7cfb      	ldrb	r3, [r7, #19]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d129      	bne.n	800632a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	7b1b      	ldrb	r3, [r3, #12]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f005 f895 	bl	800b40c <USBH_LL_GetLastXferSize>
 80062e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d016      	beq.n	800631c <CDC_ProcessReception+0x9e>
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	8b5b      	ldrh	r3, [r3, #26]
 80062f2:	461a      	mov	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d910      	bls.n	800631c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad2      	subs	r2, r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	6a1a      	ldr	r2, [r3, #32]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	441a      	add	r2, r3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2203      	movs	r2, #3
 8006316:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800631a:	e006      	b.n	800632a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f80f 	bl	8006348 <USBH_CDC_ReceiveCallback>
      break;
 800632a:	bf00      	nop
  }
}
 800632c:	bf00      	nop
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006384:	2302      	movs	r3, #2
 8006386:	e029      	b.n	80063dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	79fa      	ldrb	r2, [r7, #7]
 800638c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f81f 	bl	80063e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f004 ff65 	bl	800b2a4 <USBH_LL_Init>

  return USBH_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	e009      	b.n	800640a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	33e0      	adds	r3, #224	; 0xe0
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	2200      	movs	r2, #0
 8006402:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b0f      	cmp	r3, #15
 800640e:	d9f2      	bls.n	80063f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e009      	b.n	800642a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006430:	d3f1      	bcc.n	8006416 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2240      	movs	r2, #64	; 0x40
 8006456:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d016      	beq.n	80064ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10e      	bne.n	80064c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064b0:	1c59      	adds	r1, r3, #1
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	33de      	adds	r3, #222	; 0xde
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
 80064c6:	e004      	b.n	80064d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80064c8:	2302      	movs	r3, #2
 80064ca:	73fb      	strb	r3, [r7, #15]
 80064cc:	e001      	b.n	80064d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80064ce:	2302      	movs	r3, #2
 80064d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80064f6:	78fa      	ldrb	r2, [r7, #3]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d204      	bcs.n	8006506 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006504:	e001      	b.n	800650a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006506:	2302      	movs	r3, #2
 8006508:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4603      	mov	r3, r0
 8006528:	70fb      	strb	r3, [r7, #3]
 800652a:	460b      	mov	r3, r1
 800652c:	70bb      	strb	r3, [r7, #2]
 800652e:	4613      	mov	r3, r2
 8006530:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006540:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006542:	e025      	b.n	8006590 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	221a      	movs	r2, #26
 8006548:	fb02 f303 	mul.w	r3, r2, r3
 800654c:	3308      	adds	r3, #8
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	3302      	adds	r3, #2
 8006554:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	795b      	ldrb	r3, [r3, #5]
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	429a      	cmp	r2, r3
 800655e:	d002      	beq.n	8006566 <USBH_FindInterface+0x4e>
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	2bff      	cmp	r3, #255	; 0xff
 8006564:	d111      	bne.n	800658a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800656a:	78ba      	ldrb	r2, [r7, #2]
 800656c:	429a      	cmp	r2, r3
 800656e:	d002      	beq.n	8006576 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006570:	78bb      	ldrb	r3, [r7, #2]
 8006572:	2bff      	cmp	r3, #255	; 0xff
 8006574:	d109      	bne.n	800658a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800657a:	787a      	ldrb	r2, [r7, #1]
 800657c:	429a      	cmp	r2, r3
 800657e:	d002      	beq.n	8006586 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006580:	787b      	ldrb	r3, [r7, #1]
 8006582:	2bff      	cmp	r3, #255	; 0xff
 8006584:	d101      	bne.n	800658a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	e006      	b.n	8006598 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	3301      	adds	r3, #1
 800658e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d9d6      	bls.n	8006544 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006596:	23ff      	movs	r3, #255	; 0xff
}
 8006598:	4618      	mov	r0, r3
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f004 feb5 	bl	800b31c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80065b2:	2101      	movs	r1, #1
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f004 ffce 	bl	800b556 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af04      	add	r7, sp, #16
 80065ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80065cc:	2302      	movs	r3, #2
 80065ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d102      	bne.n	80065e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2203      	movs	r2, #3
 80065e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b0b      	cmp	r3, #11
 80065ee:	f200 81be 	bhi.w	800696e <USBH_Process+0x3aa>
 80065f2:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <USBH_Process+0x34>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	08006629 	.word	0x08006629
 80065fc:	0800665b 	.word	0x0800665b
 8006600:	080066c3 	.word	0x080066c3
 8006604:	08006909 	.word	0x08006909
 8006608:	0800696f 	.word	0x0800696f
 800660c:	08006767 	.word	0x08006767
 8006610:	080068af 	.word	0x080068af
 8006614:	0800679d 	.word	0x0800679d
 8006618:	080067bd 	.word	0x080067bd
 800661c:	080067dd 	.word	0x080067dd
 8006620:	08006821 	.word	0x08006821
 8006624:	080068f1 	.word	0x080068f1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 819e 	beq.w	8006972 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800663c:	20c8      	movs	r0, #200	; 0xc8
 800663e:	f004 ffd1 	bl	800b5e4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f004 fec7 	bl	800b3d6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006658:	e18b      	b.n	8006972 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006660:	2b01      	cmp	r3, #1
 8006662:	d107      	bne.n	8006674 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006672:	e18d      	b.n	8006990 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800667a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800667e:	d914      	bls.n	80066aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006686:	3301      	adds	r3, #1
 8006688:	b2da      	uxtb	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006696:	2b03      	cmp	r3, #3
 8006698:	d903      	bls.n	80066a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	220d      	movs	r2, #13
 800669e:	701a      	strb	r2, [r3, #0]
      break;
 80066a0:	e176      	b.n	8006990 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	701a      	strb	r2, [r3, #0]
      break;
 80066a8:	e172      	b.n	8006990 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066b0:	f103 020a 	add.w	r2, r3, #10
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80066ba:	200a      	movs	r0, #10
 80066bc:	f004 ff92 	bl	800b5e4 <USBH_Delay>
      break;
 80066c0:	e166      	b.n	8006990 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066d2:	2104      	movs	r1, #4
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80066d8:	2064      	movs	r0, #100	; 0x64
 80066da:	f004 ff83 	bl	800b5e4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f004 fe52 	bl	800b388 <USBH_LL_GetSpeed>
 80066e4:	4603      	mov	r3, r0
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2205      	movs	r2, #5
 80066f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80066f4:	2100      	movs	r1, #0
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f001 fa29 	bl	8007b4e <USBH_AllocPipe>
 80066fc:	4603      	mov	r3, r0
 80066fe:	461a      	mov	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 fa21 	bl	8007b4e <USBH_AllocPipe>
 800670c:	4603      	mov	r3, r0
 800670e:	461a      	mov	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7919      	ldrb	r1, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006728:	b292      	uxth	r2, r2
 800672a:	9202      	str	r2, [sp, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	9201      	str	r2, [sp, #4]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	4603      	mov	r3, r0
 8006734:	2280      	movs	r2, #128	; 0x80
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 f9da 	bl	8007af0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	7959      	ldrb	r1, [r3, #5]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006750:	b292      	uxth	r2, r2
 8006752:	9202      	str	r2, [sp, #8]
 8006754:	2200      	movs	r2, #0
 8006756:	9201      	str	r2, [sp, #4]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4603      	mov	r3, r0
 800675c:	2200      	movs	r2, #0
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 f9c6 	bl	8007af0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006764:	e114      	b.n	8006990 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f918 	bl	800699c <USBH_HandleEnum>
 800676c:	4603      	mov	r3, r0
 800676e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	f040 80fe 	bne.w	8006976 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006788:	2b01      	cmp	r3, #1
 800678a:	d103      	bne.n	8006794 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2208      	movs	r2, #8
 8006790:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006792:	e0f0      	b.n	8006976 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2207      	movs	r2, #7
 8006798:	701a      	strb	r2, [r3, #0]
      break;
 800679a:	e0ec      	b.n	8006976 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80e9 	beq.w	800697a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067ae:	2101      	movs	r1, #1
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2208      	movs	r2, #8
 80067b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80067ba:	e0de      	b.n	800697a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fc2c 	bl	8007024 <USBH_SetCfg>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f040 80d5 	bne.w	800697e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2209      	movs	r2, #9
 80067d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067da:	e0d0      	b.n	800697e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d016      	beq.n	8006818 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80067ea:	2101      	movs	r1, #1
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fc3c 	bl	800706a <USBH_SetFeature>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	220a      	movs	r2, #10
 8006802:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006804:	e0bd      	b.n	8006982 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b03      	cmp	r3, #3
 800680c:	f040 80b9 	bne.w	8006982 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	220a      	movs	r2, #10
 8006814:	701a      	strb	r2, [r3, #0]
      break;
 8006816:	e0b4      	b.n	8006982 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	220a      	movs	r2, #10
 800681c:	701a      	strb	r2, [r3, #0]
      break;
 800681e:	e0b0      	b.n	8006982 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 80ad 	beq.w	8006986 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]
 8006838:	e016      	b.n	8006868 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800683a:	7bfa      	ldrb	r2, [r7, #15]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	32de      	adds	r2, #222	; 0xde
 8006840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006844:	791a      	ldrb	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800684c:	429a      	cmp	r2, r3
 800684e:	d108      	bne.n	8006862 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006850:	7bfa      	ldrb	r2, [r7, #15]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	32de      	adds	r2, #222	; 0xde
 8006856:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006860:	e005      	b.n	800686e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	3301      	adds	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0e5      	beq.n	800683a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d016      	beq.n	80068a6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d109      	bne.n	800689e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2206      	movs	r2, #6
 800688e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006896:	2103      	movs	r1, #3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800689c:	e073      	b.n	8006986 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	220d      	movs	r2, #13
 80068a2:	701a      	strb	r2, [r3, #0]
      break;
 80068a4:	e06f      	b.n	8006986 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	220d      	movs	r2, #13
 80068aa:	701a      	strb	r2, [r3, #0]
      break;
 80068ac:	e06b      	b.n	8006986 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d017      	beq.n	80068e8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
 80068c4:	4603      	mov	r3, r0
 80068c6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	220b      	movs	r2, #11
 80068d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068d6:	e058      	b.n	800698a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d154      	bne.n	800698a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	220d      	movs	r2, #13
 80068e4:	701a      	strb	r2, [r3, #0]
      break;
 80068e6:	e050      	b.n	800698a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	220d      	movs	r2, #13
 80068ec:	701a      	strb	r2, [r3, #0]
      break;
 80068ee:	e04c      	b.n	800698a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d049      	beq.n	800698e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
      }
      break;
 8006906:	e042      	b.n	800698e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff fd67 	bl	80063e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d009      	beq.n	8006934 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006944:	2105      	movs	r1, #5
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b01      	cmp	r3, #1
 8006954:	d107      	bne.n	8006966 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff fe20 	bl	80065a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006964:	e014      	b.n	8006990 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f004 fcd8 	bl	800b31c <USBH_LL_Start>
      break;
 800696c:	e010      	b.n	8006990 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800696e:	bf00      	nop
 8006970:	e00e      	b.n	8006990 <USBH_Process+0x3cc>
      break;
 8006972:	bf00      	nop
 8006974:	e00c      	b.n	8006990 <USBH_Process+0x3cc>
      break;
 8006976:	bf00      	nop
 8006978:	e00a      	b.n	8006990 <USBH_Process+0x3cc>
    break;
 800697a:	bf00      	nop
 800697c:	e008      	b.n	8006990 <USBH_Process+0x3cc>
      break;
 800697e:	bf00      	nop
 8006980:	e006      	b.n	8006990 <USBH_Process+0x3cc>
      break;
 8006982:	bf00      	nop
 8006984:	e004      	b.n	8006990 <USBH_Process+0x3cc>
      break;
 8006986:	bf00      	nop
 8006988:	e002      	b.n	8006990 <USBH_Process+0x3cc>
      break;
 800698a:	bf00      	nop
 800698c:	e000      	b.n	8006990 <USBH_Process+0x3cc>
      break;
 800698e:	bf00      	nop
  }
  return USBH_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop

0800699c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af04      	add	r7, sp, #16
 80069a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	785b      	ldrb	r3, [r3, #1]
 80069b0:	2b07      	cmp	r3, #7
 80069b2:	f200 81c1 	bhi.w	8006d38 <USBH_HandleEnum+0x39c>
 80069b6:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <USBH_HandleEnum+0x20>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069dd 	.word	0x080069dd
 80069c0:	08006a9b 	.word	0x08006a9b
 80069c4:	08006b05 	.word	0x08006b05
 80069c8:	08006b93 	.word	0x08006b93
 80069cc:	08006bfd 	.word	0x08006bfd
 80069d0:	08006c6d 	.word	0x08006c6d
 80069d4:	08006cb3 	.word	0x08006cb3
 80069d8:	08006cf9 	.word	0x08006cf9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80069dc:	2108      	movs	r1, #8
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa50 	bl	8006e84 <USBH_Get_DevDesc>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d130      	bne.n	8006a50 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7919      	ldrb	r1, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a12:	b292      	uxth	r2, r2
 8006a14:	9202      	str	r2, [sp, #8]
 8006a16:	2200      	movs	r2, #0
 8006a18:	9201      	str	r2, [sp, #4]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2280      	movs	r2, #128	; 0x80
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f865 	bl	8007af0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	7959      	ldrb	r1, [r3, #5]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a3a:	b292      	uxth	r2, r2
 8006a3c:	9202      	str	r2, [sp, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	9201      	str	r2, [sp, #4]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	4603      	mov	r3, r0
 8006a46:	2200      	movs	r2, #0
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 f851 	bl	8007af0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a4e:	e175      	b.n	8006d3c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	f040 8172 	bne.w	8006d3c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a5e:	3301      	adds	r3, #1
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d903      	bls.n	8006a7a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	220d      	movs	r2, #13
 8006a76:	701a      	strb	r2, [r3, #0]
      break;
 8006a78:	e160      	b.n	8006d3c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	795b      	ldrb	r3, [r3, #5]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 f885 	bl	8007b90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f87f 	bl	8007b90 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	701a      	strb	r2, [r3, #0]
      break;
 8006a98:	e150      	b.n	8006d3c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006a9a:	2112      	movs	r1, #18
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9f1 	bl	8006e84 <USBH_Get_DevDesc>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d103      	bne.n	8006ab4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ab2:	e145      	b.n	8006d40 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	f040 8142 	bne.w	8006d40 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d903      	bls.n	8006ade <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	220d      	movs	r2, #13
 8006ada:	701a      	strb	r2, [r3, #0]
      break;
 8006adc:	e130      	b.n	8006d40 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	795b      	ldrb	r3, [r3, #5]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f853 	bl	8007b90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	791b      	ldrb	r3, [r3, #4]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 f84d 	bl	8007b90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
      break;
 8006b02:	e11d      	b.n	8006d40 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006b04:	2101      	movs	r1, #1
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa68 	bl	8006fdc <USBH_SetAddress>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d132      	bne.n	8006b7c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006b16:	2002      	movs	r0, #2
 8006b18:	f004 fd64 	bl	800b5e4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2203      	movs	r2, #3
 8006b28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7919      	ldrb	r1, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b3e:	b292      	uxth	r2, r2
 8006b40:	9202      	str	r2, [sp, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	9201      	str	r2, [sp, #4]
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2280      	movs	r2, #128	; 0x80
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 ffcf 	bl	8007af0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7959      	ldrb	r1, [r3, #5]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b66:	b292      	uxth	r2, r2
 8006b68:	9202      	str	r2, [sp, #8]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	9201      	str	r2, [sp, #4]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	4603      	mov	r3, r0
 8006b72:	2200      	movs	r2, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 ffbb 	bl	8007af0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b7a:	e0e3      	b.n	8006d44 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	f040 80e0 	bne.w	8006d44 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	220d      	movs	r2, #13
 8006b88:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	705a      	strb	r2, [r3, #1]
      break;
 8006b90:	e0d8      	b.n	8006d44 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006b92:	2109      	movs	r1, #9
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f99d 	bl	8006ed4 <USBH_Get_CfgDesc>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006baa:	e0cd      	b.n	8006d48 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	f040 80ca 	bne.w	8006d48 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bba:	3301      	adds	r3, #1
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d903      	bls.n	8006bd6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	220d      	movs	r2, #13
 8006bd2:	701a      	strb	r2, [r3, #0]
      break;
 8006bd4:	e0b8      	b.n	8006d48 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	795b      	ldrb	r3, [r3, #5]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 ffd7 	bl	8007b90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	791b      	ldrb	r3, [r3, #4]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 ffd1 	bl	8007b90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]
      break;
 8006bfa:	e0a5      	b.n	8006d48 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f965 	bl	8006ed4 <USBH_Get_CfgDesc>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2205      	movs	r2, #5
 8006c18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c1a:	e097      	b.n	8006d4c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	f040 8094 	bne.w	8006d4c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d903      	bls.n	8006c46 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	220d      	movs	r2, #13
 8006c42:	701a      	strb	r2, [r3, #0]
      break;
 8006c44:	e082      	b.n	8006d4c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	795b      	ldrb	r3, [r3, #5]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 ff9f 	bl	8007b90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	791b      	ldrb	r3, [r3, #4]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 ff99 	bl	8007b90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
      break;
 8006c6a:	e06f      	b.n	8006d4c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d019      	beq.n	8006caa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c82:	23ff      	movs	r3, #255	; 0xff
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f949 	bl	8006f1c <USBH_Get_StringDesc>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2206      	movs	r2, #6
 8006c98:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c9a:	e059      	b.n	8006d50 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d156      	bne.n	8006d50 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2206      	movs	r2, #6
 8006ca6:	705a      	strb	r2, [r3, #1]
      break;
 8006ca8:	e052      	b.n	8006d50 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2206      	movs	r2, #6
 8006cae:	705a      	strb	r2, [r3, #1]
      break;
 8006cb0:	e04e      	b.n	8006d50 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d019      	beq.n	8006cf0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006cc8:	23ff      	movs	r3, #255	; 0xff
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f926 	bl	8006f1c <USBH_Get_StringDesc>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d103      	bne.n	8006ce2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2207      	movs	r2, #7
 8006cde:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ce0:	e038      	b.n	8006d54 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d135      	bne.n	8006d54 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2207      	movs	r2, #7
 8006cec:	705a      	strb	r2, [r3, #1]
      break;
 8006cee:	e031      	b.n	8006d54 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2207      	movs	r2, #7
 8006cf4:	705a      	strb	r2, [r3, #1]
      break;
 8006cf6:	e02d      	b.n	8006d54 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d017      	beq.n	8006d32 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d0e:	23ff      	movs	r3, #255	; 0xff
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f903 	bl	8006f1c <USBH_Get_StringDesc>
 8006d16:	4603      	mov	r3, r0
 8006d18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006d24:	e018      	b.n	8006d58 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d115      	bne.n	8006d58 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d30:	e012      	b.n	8006d58 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]
      break;
 8006d36:	e00f      	b.n	8006d58 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006d38:	bf00      	nop
 8006d3a:	e00e      	b.n	8006d5a <USBH_HandleEnum+0x3be>
      break;
 8006d3c:	bf00      	nop
 8006d3e:	e00c      	b.n	8006d5a <USBH_HandleEnum+0x3be>
      break;
 8006d40:	bf00      	nop
 8006d42:	e00a      	b.n	8006d5a <USBH_HandleEnum+0x3be>
      break;
 8006d44:	bf00      	nop
 8006d46:	e008      	b.n	8006d5a <USBH_HandleEnum+0x3be>
      break;
 8006d48:	bf00      	nop
 8006d4a:	e006      	b.n	8006d5a <USBH_HandleEnum+0x3be>
      break;
 8006d4c:	bf00      	nop
 8006d4e:	e004      	b.n	8006d5a <USBH_HandleEnum+0x3be>
      break;
 8006d50:	bf00      	nop
 8006d52:	e002      	b.n	8006d5a <USBH_HandleEnum+0x3be>
      break;
 8006d54:	bf00      	nop
 8006d56:	e000      	b.n	8006d5a <USBH_HandleEnum+0x3be>
      break;
 8006d58:	bf00      	nop
  }
  return Status;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f804 	bl	8006da6 <USBH_HandleSof>
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b0b      	cmp	r3, #11
 8006db6:	d10a      	bne.n	8006dce <USBH_HandleSof+0x28>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
  }
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006de6:	bf00      	nop
}
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006e02:	bf00      	nop
}
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f004 fa78 	bl	800b352 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	791b      	ldrb	r3, [r3, #4]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fe91 	bl	8007b90 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	795b      	ldrb	r3, [r3, #5]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fe8b 	bl	8007b90 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f864 	bl	8006f72 <USBH_GetDescriptor>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ec0:	78fa      	ldrb	r2, [r7, #3]
 8006ec2:	b292      	uxth	r2, r2
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f000 f918 	bl	80070fa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	331c      	adds	r3, #28
 8006ee4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f83d 	bl	8006f72 <USBH_GetDescriptor>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d107      	bne.n	8006f12 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006f02:	887b      	ldrh	r3, [r7, #2]
 8006f04:	461a      	mov	r2, r3
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f987 	bl	800721c <USBH_ParseCfgDesc>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	607a      	str	r2, [r7, #4]
 8006f26:	461a      	mov	r2, r3
 8006f28:	460b      	mov	r3, r1
 8006f2a:	72fb      	strb	r3, [r7, #11]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006f30:	7afb      	ldrb	r3, [r7, #11]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f38:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006f40:	893b      	ldrh	r3, [r7, #8]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	460b      	mov	r3, r1
 8006f46:	2100      	movs	r1, #0
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 f812 	bl	8006f72 <USBH_GetDescriptor>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d107      	bne.n	8006f68 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f5e:	893a      	ldrh	r2, [r7, #8]
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fb24 	bl	80075b0 <USBH_ParseStringDesc>
  }

  return status;
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	607b      	str	r3, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	72fb      	strb	r3, [r7, #11]
 8006f80:	4613      	mov	r3, r2
 8006f82:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	789b      	ldrb	r3, [r3, #2]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d11c      	bne.n	8006fc6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006f8c:	7afb      	ldrb	r3, [r7, #11]
 8006f8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2206      	movs	r2, #6
 8006f9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	893a      	ldrh	r2, [r7, #8]
 8006fa2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006fa4:	893b      	ldrh	r3, [r7, #8]
 8006fa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fae:	d104      	bne.n	8006fba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f240 4209 	movw	r2, #1033	; 0x409
 8006fb6:	829a      	strh	r2, [r3, #20]
 8006fb8:	e002      	b.n	8006fc0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8b3a      	ldrh	r2, [r7, #24]
 8006fc4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006fc6:	8b3b      	ldrh	r3, [r7, #24]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fb3d 	bl	800764c <USBH_CtlReq>
 8006fd2:	4603      	mov	r3, r0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	789b      	ldrb	r3, [r3, #2]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10f      	bne.n	8007010 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007010:	2200      	movs	r2, #0
 8007012:	2100      	movs	r1, #0
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fb19 	bl	800764c <USBH_CtlReq>
 800701a:	4603      	mov	r3, r0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	789b      	ldrb	r3, [r3, #2]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d10e      	bne.n	8007056 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2209      	movs	r2, #9
 8007042:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	887a      	ldrh	r2, [r7, #2]
 8007048:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007056:	2200      	movs	r2, #0
 8007058:	2100      	movs	r1, #0
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 faf6 	bl	800764c <USBH_CtlReq>
 8007060:	4603      	mov	r3, r0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	460b      	mov	r3, r1
 8007074:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	789b      	ldrb	r3, [r3, #2]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d10f      	bne.n	800709e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2203      	movs	r2, #3
 8007088:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	b29a      	uxth	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fad2 	bl	800764c <USBH_CtlReq>
 80070a8:	4603      	mov	r3, r0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	460b      	mov	r3, r1
 80070bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	789b      	ldrb	r3, [r3, #2]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d10f      	bne.n	80070e6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2202      	movs	r2, #2
 80070ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 faae 	bl	800764c <USBH_CtlReq>
 80070f0:	4603      	mov	r3, r0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	4613      	mov	r3, r2
 8007106:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	785a      	ldrb	r2, [r3, #1]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3302      	adds	r3, #2
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	b29a      	uxth	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	3303      	adds	r3, #3
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	b29b      	uxth	r3, r3
 800712c:	4313      	orrs	r3, r2
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	791a      	ldrb	r2, [r3, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	795a      	ldrb	r2, [r3, #5]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	799a      	ldrb	r2, [r3, #6]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	79da      	ldrb	r2, [r3, #7]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	79db      	ldrb	r3, [r3, #7]
 8007158:	2b20      	cmp	r3, #32
 800715a:	dc11      	bgt.n	8007180 <USBH_ParseDevDesc+0x86>
 800715c:	2b08      	cmp	r3, #8
 800715e:	db16      	blt.n	800718e <USBH_ParseDevDesc+0x94>
 8007160:	3b08      	subs	r3, #8
 8007162:	2201      	movs	r2, #1
 8007164:	fa02 f303 	lsl.w	r3, r2, r3
 8007168:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800716c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007170:	2b00      	cmp	r3, #0
 8007172:	bf14      	ite	ne
 8007174:	2301      	movne	r3, #1
 8007176:	2300      	moveq	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d102      	bne.n	8007184 <USBH_ParseDevDesc+0x8a>
 800717e:	e006      	b.n	800718e <USBH_ParseDevDesc+0x94>
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d104      	bne.n	800718e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	79da      	ldrb	r2, [r3, #7]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	71da      	strb	r2, [r3, #7]
      break;
 800718c:	e003      	b.n	8007196 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2240      	movs	r2, #64	; 0x40
 8007192:	71da      	strb	r2, [r3, #7]
      break;
 8007194:	bf00      	nop
  }

  if (length > 8U)
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	2b08      	cmp	r3, #8
 800719a:	d939      	bls.n	8007210 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3308      	adds	r3, #8
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	3309      	adds	r3, #9
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	4313      	orrs	r3, r2
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	330a      	adds	r3, #10
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	b29a      	uxth	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	330b      	adds	r3, #11
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4313      	orrs	r3, r2
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	330c      	adds	r3, #12
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	330d      	adds	r3, #13
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	4313      	orrs	r3, r2
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	7b9a      	ldrb	r2, [r3, #14]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	7bda      	ldrb	r2, [r3, #15]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	7c1a      	ldrb	r2, [r3, #16]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	7c5a      	ldrb	r2, [r3, #17]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	745a      	strb	r2, [r3, #17]
  }
}
 8007210:	bf00      	nop
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08c      	sub	sp, #48	; 0x30
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4613      	mov	r3, r2
 8007228:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007230:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	785a      	ldrb	r2, [r3, #1]
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3302      	adds	r3, #2
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	b29a      	uxth	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	3303      	adds	r3, #3
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	021b      	lsls	r3, r3, #8
 800726e:	b29b      	uxth	r3, r3
 8007270:	4313      	orrs	r3, r2
 8007272:	b29b      	uxth	r3, r3
 8007274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007278:	bf28      	it	cs
 800727a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800727e:	b29a      	uxth	r2, r3
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	791a      	ldrb	r2, [r3, #4]
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	795a      	ldrb	r2, [r3, #5]
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	799a      	ldrb	r2, [r3, #6]
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	79da      	ldrb	r2, [r3, #7]
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	7a1a      	ldrb	r2, [r3, #8]
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b09      	cmp	r3, #9
 80072b2:	d002      	beq.n	80072ba <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	2209      	movs	r2, #9
 80072b8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	2b09      	cmp	r3, #9
 80072be:	f240 809d 	bls.w	80073fc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80072c2:	2309      	movs	r3, #9
 80072c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80072ca:	e081      	b.n	80073d0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80072cc:	f107 0316 	add.w	r3, r7, #22
 80072d0:	4619      	mov	r1, r3
 80072d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072d4:	f000 f99f 	bl	8007616 <USBH_GetNextDesc>
 80072d8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d176      	bne.n	80073d0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b09      	cmp	r3, #9
 80072e8:	d002      	beq.n	80072f0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	2209      	movs	r2, #9
 80072ee:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80072f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f4:	221a      	movs	r2, #26
 80072f6:	fb02 f303 	mul.w	r3, r2, r3
 80072fa:	3308      	adds	r3, #8
 80072fc:	6a3a      	ldr	r2, [r7, #32]
 80072fe:	4413      	add	r3, r2
 8007300:	3302      	adds	r3, #2
 8007302:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007306:	69f8      	ldr	r0, [r7, #28]
 8007308:	f000 f87e 	bl	8007408 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007316:	e043      	b.n	80073a0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007318:	f107 0316 	add.w	r3, r7, #22
 800731c:	4619      	mov	r1, r3
 800731e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007320:	f000 f979 	bl	8007616 <USBH_GetNextDesc>
 8007324:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	785b      	ldrb	r3, [r3, #1]
 800732a:	2b05      	cmp	r3, #5
 800732c:	d138      	bne.n	80073a0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	795b      	ldrb	r3, [r3, #5]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d10f      	bne.n	8007356 <USBH_ParseCfgDesc+0x13a>
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	799b      	ldrb	r3, [r3, #6]
 800733a:	2b02      	cmp	r3, #2
 800733c:	d10b      	bne.n	8007356 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	79db      	ldrb	r3, [r3, #7]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10f      	bne.n	8007366 <USBH_ParseCfgDesc+0x14a>
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b09      	cmp	r3, #9
 800734c:	d00b      	beq.n	8007366 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	2209      	movs	r2, #9
 8007352:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007354:	e007      	b.n	8007366 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b07      	cmp	r3, #7
 800735c:	d004      	beq.n	8007368 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	2207      	movs	r2, #7
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e000      	b.n	8007368 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007366:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800736c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007370:	3201      	adds	r2, #1
 8007372:	00d2      	lsls	r2, r2, #3
 8007374:	211a      	movs	r1, #26
 8007376:	fb01 f303 	mul.w	r3, r1, r3
 800737a:	4413      	add	r3, r2
 800737c:	3308      	adds	r3, #8
 800737e:	6a3a      	ldr	r2, [r7, #32]
 8007380:	4413      	add	r3, r2
 8007382:	3304      	adds	r3, #4
 8007384:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007388:	69b9      	ldr	r1, [r7, #24]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f86b 	bl	8007466 <USBH_ParseEPDesc>
 8007390:	4603      	mov	r3, r0
 8007392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007396:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800739a:	3301      	adds	r3, #1
 800739c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	791b      	ldrb	r3, [r3, #4]
 80073a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d204      	bcs.n	80073b6 <USBH_ParseCfgDesc+0x19a>
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	885a      	ldrh	r2, [r3, #2]
 80073b0:	8afb      	ldrh	r3, [r7, #22]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d8b0      	bhi.n	8007318 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	791b      	ldrb	r3, [r3, #4]
 80073ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80073be:	429a      	cmp	r2, r3
 80073c0:	d201      	bcs.n	80073c6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e01c      	b.n	8007400 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80073c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ca:	3301      	adds	r3, #1
 80073cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80073d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d805      	bhi.n	80073e4 <USBH_ParseCfgDesc+0x1c8>
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	885a      	ldrh	r2, [r3, #2]
 80073dc:	8afb      	ldrh	r3, [r7, #22]
 80073de:	429a      	cmp	r2, r3
 80073e0:	f63f af74 	bhi.w	80072cc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	791b      	ldrb	r3, [r3, #4]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	bf28      	it	cs
 80073ec:	2302      	movcs	r3, #2
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d201      	bcs.n	80073fc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e001      	b.n	8007400 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80073fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007400:	4618      	mov	r0, r3
 8007402:	3730      	adds	r7, #48	; 0x30
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	785a      	ldrb	r2, [r3, #1]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	789a      	ldrb	r2, [r3, #2]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	78da      	ldrb	r2, [r3, #3]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	791a      	ldrb	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	795a      	ldrb	r2, [r3, #5]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	799a      	ldrb	r2, [r3, #6]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	79da      	ldrb	r2, [r3, #7]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	7a1a      	ldrb	r2, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	721a      	strb	r2, [r3, #8]
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007466:	b480      	push	{r7}
 8007468:	b087      	sub	sp, #28
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	785a      	ldrb	r2, [r3, #1]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	789a      	ldrb	r2, [r3, #2]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	78da      	ldrb	r2, [r3, #3]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3304      	adds	r3, #4
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3305      	adds	r3, #5
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	799a      	ldrb	r2, [r3, #6]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	889b      	ldrh	r3, [r3, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80074c2:	2303      	movs	r3, #3
 80074c4:	75fb      	strb	r3, [r7, #23]
 80074c6:	e033      	b.n	8007530 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	889b      	ldrh	r3, [r3, #4]
 80074cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	889b      	ldrh	r3, [r3, #4]
 80074de:	b21a      	sxth	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3304      	adds	r3, #4
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	b299      	uxth	r1, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3305      	adds	r3, #5
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	430b      	orrs	r3, r1
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d110      	bne.n	8007522 <USBH_ParseEPDesc+0xbc>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b299      	uxth	r1, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3305      	adds	r3, #5
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	b29b      	uxth	r3, r3
 8007514:	430b      	orrs	r3, r1
 8007516:	b29b      	uxth	r3, r3
 8007518:	b21b      	sxth	r3, r3
 800751a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800751e:	b21b      	sxth	r3, r3
 8007520:	e001      	b.n	8007526 <USBH_ParseEPDesc+0xc0>
 8007522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007526:	4313      	orrs	r3, r2
 8007528:	b21b      	sxth	r3, r3
 800752a:	b29a      	uxth	r2, r3
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007536:	2b00      	cmp	r3, #0
 8007538:	d116      	bne.n	8007568 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	78db      	ldrb	r3, [r3, #3]
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b01      	cmp	r3, #1
 8007544:	d005      	beq.n	8007552 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	78db      	ldrb	r3, [r3, #3]
 800754a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800754e:	2b03      	cmp	r3, #3
 8007550:	d127      	bne.n	80075a2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	799b      	ldrb	r3, [r3, #6]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <USBH_ParseEPDesc+0xfc>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	799b      	ldrb	r3, [r3, #6]
 800755e:	2b10      	cmp	r3, #16
 8007560:	d91f      	bls.n	80075a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007562:	2303      	movs	r3, #3
 8007564:	75fb      	strb	r3, [r7, #23]
 8007566:	e01c      	b.n	80075a2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	2b01      	cmp	r3, #1
 8007572:	d10a      	bne.n	800758a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	799b      	ldrb	r3, [r3, #6]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <USBH_ParseEPDesc+0x11e>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	799b      	ldrb	r3, [r3, #6]
 8007580:	2b10      	cmp	r3, #16
 8007582:	d90e      	bls.n	80075a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007584:	2303      	movs	r3, #3
 8007586:	75fb      	strb	r3, [r7, #23]
 8007588:	e00b      	b.n	80075a2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	78db      	ldrb	r3, [r3, #3]
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	2b03      	cmp	r3, #3
 8007594:	d105      	bne.n	80075a2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	799b      	ldrb	r3, [r3, #6]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800759e:	2303      	movs	r3, #3
 80075a0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3301      	adds	r3, #1
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d120      	bne.n	800760a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	1e9a      	subs	r2, r3, #2
 80075ce:	88fb      	ldrh	r3, [r7, #6]
 80075d0:	4293      	cmp	r3, r2
 80075d2:	bf28      	it	cs
 80075d4:	4613      	movcs	r3, r2
 80075d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3302      	adds	r3, #2
 80075dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80075de:	2300      	movs	r3, #0
 80075e0:	82fb      	strh	r3, [r7, #22]
 80075e2:	e00b      	b.n	80075fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80075e4:	8afb      	ldrh	r3, [r7, #22]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	781a      	ldrb	r2, [r3, #0]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80075f6:	8afb      	ldrh	r3, [r7, #22]
 80075f8:	3302      	adds	r3, #2
 80075fa:	82fb      	strh	r3, [r7, #22]
 80075fc:	8afa      	ldrh	r2, [r7, #22]
 80075fe:	8abb      	ldrh	r3, [r7, #20]
 8007600:	429a      	cmp	r2, r3
 8007602:	d3ef      	bcc.n	80075e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
  }
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	881a      	ldrh	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	4413      	add	r3, r2
 800762c:	b29a      	uxth	r2, r3
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4413      	add	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800763e:	68fb      	ldr	r3, [r7, #12]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800765a:	2301      	movs	r3, #1
 800765c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	789b      	ldrb	r3, [r3, #2]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d002      	beq.n	800766c <USBH_CtlReq+0x20>
 8007666:	2b02      	cmp	r3, #2
 8007668:	d00f      	beq.n	800768a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800766a:	e027      	b.n	80076bc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	88fa      	ldrh	r2, [r7, #6]
 8007676:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2202      	movs	r2, #2
 8007682:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007684:	2301      	movs	r3, #1
 8007686:	75fb      	strb	r3, [r7, #23]
      break;
 8007688:	e018      	b.n	80076bc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f81c 	bl	80076c8 <USBH_HandleControl>
 8007690:	4603      	mov	r3, r0
 8007692:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <USBH_CtlReq+0x54>
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	2b03      	cmp	r3, #3
 800769e:	d106      	bne.n	80076ae <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	761a      	strb	r2, [r3, #24]
      break;
 80076ac:	e005      	b.n	80076ba <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d102      	bne.n	80076ba <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	709a      	strb	r2, [r3, #2]
      break;
 80076ba:	bf00      	nop
  }
  return status;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80076d0:	2301      	movs	r3, #1
 80076d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7e1b      	ldrb	r3, [r3, #24]
 80076dc:	3b01      	subs	r3, #1
 80076de:	2b0a      	cmp	r3, #10
 80076e0:	f200 8156 	bhi.w	8007990 <USBH_HandleControl+0x2c8>
 80076e4:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <USBH_HandleControl+0x24>)
 80076e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ea:	bf00      	nop
 80076ec:	08007719 	.word	0x08007719
 80076f0:	08007733 	.word	0x08007733
 80076f4:	0800779d 	.word	0x0800779d
 80076f8:	080077c3 	.word	0x080077c3
 80076fc:	080077fb 	.word	0x080077fb
 8007700:	08007825 	.word	0x08007825
 8007704:	08007877 	.word	0x08007877
 8007708:	08007899 	.word	0x08007899
 800770c:	080078d5 	.word	0x080078d5
 8007710:	080078fb 	.word	0x080078fb
 8007714:	08007939 	.word	0x08007939
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f103 0110 	add.w	r1, r3, #16
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	461a      	mov	r2, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f943 	bl	80079b0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	761a      	strb	r2, [r3, #24]
      break;
 8007730:	e139      	b.n	80079a6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	795b      	ldrb	r3, [r3, #5]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f003 fef9 	bl	800b530 <USBH_LL_GetURBState>
 800773e:	4603      	mov	r3, r0
 8007740:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d11e      	bne.n	8007786 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7c1b      	ldrb	r3, [r3, #16]
 800774c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007750:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	8adb      	ldrh	r3, [r3, #22]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800775a:	7b7b      	ldrb	r3, [r7, #13]
 800775c:	2b80      	cmp	r3, #128	; 0x80
 800775e:	d103      	bne.n	8007768 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2203      	movs	r2, #3
 8007764:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007766:	e115      	b.n	8007994 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2205      	movs	r2, #5
 800776c:	761a      	strb	r2, [r3, #24]
      break;
 800776e:	e111      	b.n	8007994 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007770:	7b7b      	ldrb	r3, [r7, #13]
 8007772:	2b80      	cmp	r3, #128	; 0x80
 8007774:	d103      	bne.n	800777e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2209      	movs	r2, #9
 800777a:	761a      	strb	r2, [r3, #24]
      break;
 800777c:	e10a      	b.n	8007994 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2207      	movs	r2, #7
 8007782:	761a      	strb	r2, [r3, #24]
      break;
 8007784:	e106      	b.n	8007994 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b04      	cmp	r3, #4
 800778a:	d003      	beq.n	8007794 <USBH_HandleControl+0xcc>
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	2b02      	cmp	r3, #2
 8007790:	f040 8100 	bne.w	8007994 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	220b      	movs	r2, #11
 8007798:	761a      	strb	r2, [r3, #24]
      break;
 800779a:	e0fb      	b.n	8007994 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6899      	ldr	r1, [r3, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	899a      	ldrh	r2, [r3, #12]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	791b      	ldrb	r3, [r3, #4]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f93a 	bl	8007a2e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2204      	movs	r2, #4
 80077be:	761a      	strb	r2, [r3, #24]
      break;
 80077c0:	e0f1      	b.n	80079a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	791b      	ldrb	r3, [r3, #4]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f003 feb1 	bl	800b530 <USBH_LL_GetURBState>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d102      	bne.n	80077de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2209      	movs	r2, #9
 80077dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b05      	cmp	r3, #5
 80077e2:	d102      	bne.n	80077ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80077e4:	2303      	movs	r3, #3
 80077e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077e8:	e0d6      	b.n	8007998 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	f040 80d3 	bne.w	8007998 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	220b      	movs	r2, #11
 80077f6:	761a      	strb	r2, [r3, #24]
      break;
 80077f8:	e0ce      	b.n	8007998 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6899      	ldr	r1, [r3, #8]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	899a      	ldrh	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	795b      	ldrb	r3, [r3, #5]
 8007806:	2001      	movs	r0, #1
 8007808:	9000      	str	r0, [sp, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f8ea 	bl	80079e4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2206      	movs	r2, #6
 8007820:	761a      	strb	r2, [r3, #24]
      break;
 8007822:	e0c0      	b.n	80079a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	795b      	ldrb	r3, [r3, #5]
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f003 fe80 	bl	800b530 <USBH_LL_GetURBState>
 8007830:	4603      	mov	r3, r0
 8007832:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d103      	bne.n	8007842 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2207      	movs	r2, #7
 800783e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007840:	e0ac      	b.n	800799c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b05      	cmp	r3, #5
 8007846:	d105      	bne.n	8007854 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	220c      	movs	r2, #12
 800784c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800784e:	2303      	movs	r3, #3
 8007850:	73fb      	strb	r3, [r7, #15]
      break;
 8007852:	e0a3      	b.n	800799c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d103      	bne.n	8007862 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2205      	movs	r2, #5
 800785e:	761a      	strb	r2, [r3, #24]
      break;
 8007860:	e09c      	b.n	800799c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b04      	cmp	r3, #4
 8007866:	f040 8099 	bne.w	800799c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	220b      	movs	r2, #11
 800786e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007870:	2302      	movs	r3, #2
 8007872:	73fb      	strb	r3, [r7, #15]
      break;
 8007874:	e092      	b.n	800799c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	791b      	ldrb	r3, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	2100      	movs	r1, #0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f8d5 	bl	8007a2e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800788a:	b29a      	uxth	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2208      	movs	r2, #8
 8007894:	761a      	strb	r2, [r3, #24]

      break;
 8007896:	e086      	b.n	80079a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	791b      	ldrb	r3, [r3, #4]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f003 fe46 	bl	800b530 <USBH_LL_GetURBState>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d105      	bne.n	80078ba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	220d      	movs	r2, #13
 80078b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078b8:	e072      	b.n	80079a0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d103      	bne.n	80078c8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	220b      	movs	r2, #11
 80078c4:	761a      	strb	r2, [r3, #24]
      break;
 80078c6:	e06b      	b.n	80079a0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b05      	cmp	r3, #5
 80078cc:	d168      	bne.n	80079a0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80078ce:	2303      	movs	r3, #3
 80078d0:	73fb      	strb	r3, [r7, #15]
      break;
 80078d2:	e065      	b.n	80079a0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	795b      	ldrb	r3, [r3, #5]
 80078d8:	2201      	movs	r2, #1
 80078da:	9200      	str	r2, [sp, #0]
 80078dc:	2200      	movs	r2, #0
 80078de:	2100      	movs	r1, #0
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f87f 	bl	80079e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	220a      	movs	r2, #10
 80078f6:	761a      	strb	r2, [r3, #24]
      break;
 80078f8:	e055      	b.n	80079a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	795b      	ldrb	r3, [r3, #5]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f003 fe15 	bl	800b530 <USBH_LL_GetURBState>
 8007906:	4603      	mov	r3, r0
 8007908:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d105      	bne.n	800791c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	220d      	movs	r2, #13
 8007918:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800791a:	e043      	b.n	80079a4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d103      	bne.n	800792a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2209      	movs	r2, #9
 8007926:	761a      	strb	r2, [r3, #24]
      break;
 8007928:	e03c      	b.n	80079a4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	2b04      	cmp	r3, #4
 800792e:	d139      	bne.n	80079a4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	220b      	movs	r2, #11
 8007934:	761a      	strb	r2, [r3, #24]
      break;
 8007936:	e035      	b.n	80079a4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	7e5b      	ldrb	r3, [r3, #25]
 800793c:	3301      	adds	r3, #1
 800793e:	b2da      	uxtb	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	765a      	strb	r2, [r3, #25]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7e5b      	ldrb	r3, [r3, #25]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d806      	bhi.n	800795a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007958:	e025      	b.n	80079a6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007960:	2106      	movs	r1, #6
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	795b      	ldrb	r3, [r3, #5]
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f90c 	bl	8007b90 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	791b      	ldrb	r3, [r3, #4]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f906 	bl	8007b90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800798a:	2302      	movs	r3, #2
 800798c:	73fb      	strb	r3, [r7, #15]
      break;
 800798e:	e00a      	b.n	80079a6 <USBH_HandleControl+0x2de>

    default:
      break;
 8007990:	bf00      	nop
 8007992:	e008      	b.n	80079a6 <USBH_HandleControl+0x2de>
      break;
 8007994:	bf00      	nop
 8007996:	e006      	b.n	80079a6 <USBH_HandleControl+0x2de>
      break;
 8007998:	bf00      	nop
 800799a:	e004      	b.n	80079a6 <USBH_HandleControl+0x2de>
      break;
 800799c:	bf00      	nop
 800799e:	e002      	b.n	80079a6 <USBH_HandleControl+0x2de>
      break;
 80079a0:	bf00      	nop
 80079a2:	e000      	b.n	80079a6 <USBH_HandleControl+0x2de>
      break;
 80079a4:	bf00      	nop
  }

  return status;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af04      	add	r7, sp, #16
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	4613      	mov	r3, r2
 80079bc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079be:	79f9      	ldrb	r1, [r7, #7]
 80079c0:	2300      	movs	r3, #0
 80079c2:	9303      	str	r3, [sp, #12]
 80079c4:	2308      	movs	r3, #8
 80079c6:	9302      	str	r3, [sp, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	2300      	movs	r3, #0
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	2300      	movs	r3, #0
 80079d2:	2200      	movs	r2, #0
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f003 fd7a 	bl	800b4ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af04      	add	r7, sp, #16
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4611      	mov	r1, r2
 80079f0:	461a      	mov	r2, r3
 80079f2:	460b      	mov	r3, r1
 80079f4:	80fb      	strh	r3, [r7, #6]
 80079f6:	4613      	mov	r3, r2
 80079f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a08:	7979      	ldrb	r1, [r7, #5]
 8007a0a:	7e3b      	ldrb	r3, [r7, #24]
 8007a0c:	9303      	str	r3, [sp, #12]
 8007a0e:	88fb      	ldrh	r3, [r7, #6]
 8007a10:	9302      	str	r3, [sp, #8]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	2301      	movs	r3, #1
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f003 fd55 	bl	800b4ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b088      	sub	sp, #32
 8007a32:	af04      	add	r7, sp, #16
 8007a34:	60f8      	str	r0, [r7, #12]
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	4611      	mov	r1, r2
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	80fb      	strh	r3, [r7, #6]
 8007a40:	4613      	mov	r3, r2
 8007a42:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a44:	7979      	ldrb	r1, [r7, #5]
 8007a46:	2300      	movs	r3, #0
 8007a48:	9303      	str	r3, [sp, #12]
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	9302      	str	r3, [sp, #8]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	2301      	movs	r3, #1
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	2300      	movs	r3, #0
 8007a58:	2201      	movs	r2, #1
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f003 fd37 	bl	800b4ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a60:	2300      	movs	r3, #0

}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b088      	sub	sp, #32
 8007a6e:	af04      	add	r7, sp, #16
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	4611      	mov	r1, r2
 8007a76:	461a      	mov	r2, r3
 8007a78:	460b      	mov	r3, r1
 8007a7a:	80fb      	strh	r3, [r7, #6]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a8e:	7979      	ldrb	r1, [r7, #5]
 8007a90:	7e3b      	ldrb	r3, [r7, #24]
 8007a92:	9303      	str	r3, [sp, #12]
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	9302      	str	r3, [sp, #8]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f003 fd12 	bl	800b4ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af04      	add	r7, sp, #16
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4611      	mov	r1, r2
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	80fb      	strh	r3, [r7, #6]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007aca:	7979      	ldrb	r1, [r7, #5]
 8007acc:	2300      	movs	r3, #0
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	9302      	str	r3, [sp, #8]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	2301      	movs	r3, #1
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2201      	movs	r2, #1
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f003 fcf4 	bl	800b4ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af04      	add	r7, sp, #16
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	4608      	mov	r0, r1
 8007afa:	4611      	mov	r1, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	70fb      	strb	r3, [r7, #3]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70bb      	strb	r3, [r7, #2]
 8007b06:	4613      	mov	r3, r2
 8007b08:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b0a:	7878      	ldrb	r0, [r7, #1]
 8007b0c:	78ba      	ldrb	r2, [r7, #2]
 8007b0e:	78f9      	ldrb	r1, [r7, #3]
 8007b10:	8b3b      	ldrh	r3, [r7, #24]
 8007b12:	9302      	str	r3, [sp, #8]
 8007b14:	7d3b      	ldrb	r3, [r7, #20]
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	7c3b      	ldrb	r3, [r7, #16]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f003 fc87 	bl	800b432 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f003 fca6 	bl	800b490 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f836 	bl	8007bcc <USBH_GetFreePipe>
 8007b60:	4603      	mov	r3, r0
 8007b62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b64:	89fb      	ldrh	r3, [r7, #14]
 8007b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00a      	beq.n	8007b84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007b6e:	78fa      	ldrb	r2, [r7, #3]
 8007b70:	89fb      	ldrh	r3, [r7, #14]
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	33e0      	adds	r3, #224	; 0xe0
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007b84:	89fb      	ldrh	r3, [r7, #14]
 8007b86:	b2db      	uxtb	r3, r3
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	2b0f      	cmp	r3, #15
 8007ba0:	d80d      	bhi.n	8007bbe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	33e0      	adds	r3, #224	; 0xe0
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	33e0      	adds	r3, #224	; 0xe0
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]
 8007bdc:	e00f      	b.n	8007bfe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	33e0      	adds	r3, #224	; 0xe0
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d102      	bne.n	8007bf8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	e007      	b.n	8007c08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	73fb      	strb	r3, [r7, #15]
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	2b0f      	cmp	r3, #15
 8007c02:	d9ec      	bls.n	8007bde <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f103 0208 	add.w	r2, r3, #8
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c2c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f103 0208 	add.w	r2, r3, #8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f103 0208 	add.w	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ccc:	d103      	bne.n	8007cd6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e00c      	b.n	8007cf0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e002      	b.n	8007ce4 <vListInsert+0x2e>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d2f6      	bcs.n	8007cde <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	601a      	str	r2, [r3, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6892      	ldr	r2, [r2, #8]
 8007d3e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6852      	ldr	r2, [r2, #4]
 8007d48:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d103      	bne.n	8007d5c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	1e5a      	subs	r2, r3, #1
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08c      	sub	sp, #48	; 0x30
 8007d80:	af04      	add	r7, sp, #16
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 ffd3 	bl	8008d3c <pvPortMalloc>
 8007d96:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00e      	beq.n	8007dbc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d9e:	2058      	movs	r0, #88	; 0x58
 8007da0:	f000 ffcc 	bl	8008d3c <pvPortMalloc>
 8007da4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	631a      	str	r2, [r3, #48]	; 0x30
 8007db2:	e005      	b.n	8007dc0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007db4:	6978      	ldr	r0, [r7, #20]
 8007db6:	f001 f8a1 	bl	8008efc <vPortFree>
 8007dba:	e001      	b.n	8007dc0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d013      	beq.n	8007dee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9303      	str	r3, [sp, #12]
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	9302      	str	r3, [sp, #8]
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f80e 	bl	8007dfe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007de2:	69f8      	ldr	r0, [r7, #28]
 8007de4:	f000 f8a2 	bl	8007f2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007de8:	2301      	movs	r3, #1
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e002      	b.n	8007df4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007df2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007df4:	69bb      	ldr	r3, [r7, #24]
    }
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b088      	sub	sp, #32
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	461a      	mov	r2, r3
 8007e16:	21a5      	movs	r1, #165	; 0xa5
 8007e18:	f003 fc8a 	bl	800b730 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e26:	3b01      	subs	r3, #1
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	f023 0307 	bic.w	r3, r3, #7
 8007e34:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <prvInitialiseNewTask+0x58>
        __asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	617b      	str	r3, [r7, #20]
    }
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01f      	beq.n	8007e9c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	e012      	b.n	8007e88 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	4413      	add	r3, r2
 8007e68:	7819      	ldrb	r1, [r3, #0]
 8007e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3334      	adds	r3, #52	; 0x34
 8007e72:	460a      	mov	r2, r1
 8007e74:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d006      	beq.n	8007e90 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	3301      	adds	r3, #1
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d9e9      	bls.n	8007e62 <prvInitialiseNewTask+0x64>
 8007e8e:	e000      	b.n	8007e92 <prvInitialiseNewTask+0x94>
            {
                break;
 8007e90:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e9a:	e003      	b.n	8007ea4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d901      	bls.n	8007eae <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007eaa:	2304      	movs	r3, #4
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eb8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff fec5 	bl	8007c54 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	3318      	adds	r3, #24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fec0 	bl	8007c54 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	f1c3 0205 	rsb	r2, r3, #5
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	3350      	adds	r3, #80	; 0x50
 8007eee:	2204      	movs	r2, #4
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f003 fc1c 	bl	800b730 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	3354      	adds	r3, #84	; 0x54
 8007efc:	2201      	movs	r2, #1
 8007efe:	2100      	movs	r1, #0
 8007f00:	4618      	mov	r0, r3
 8007f02:	f003 fc15 	bl	800b730 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	68f9      	ldr	r1, [r7, #12]
 8007f0a:	69b8      	ldr	r0, [r7, #24]
 8007f0c:	f000 fc3e 	bl	800878c <pxPortInitialiseStack>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007f22:	bf00      	nop
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007f2c:	b5b0      	push	{r4, r5, r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007f34:	f000 fdd6 	bl	8008ae4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007f38:	4b3b      	ldr	r3, [pc, #236]	; (8008028 <prvAddNewTaskToReadyList+0xfc>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	4a3a      	ldr	r2, [pc, #232]	; (8008028 <prvAddNewTaskToReadyList+0xfc>)
 8007f40:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007f42:	4b3a      	ldr	r3, [pc, #232]	; (800802c <prvAddNewTaskToReadyList+0x100>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007f4a:	4a38      	ldr	r2, [pc, #224]	; (800802c <prvAddNewTaskToReadyList+0x100>)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f50:	4b35      	ldr	r3, [pc, #212]	; (8008028 <prvAddNewTaskToReadyList+0xfc>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d110      	bne.n	8007f7a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007f58:	f000 fb06 	bl	8008568 <prvInitialiseTaskLists>
 8007f5c:	e00d      	b.n	8007f7a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007f5e:	4b34      	ldr	r3, [pc, #208]	; (8008030 <prvAddNewTaskToReadyList+0x104>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f66:	4b31      	ldr	r3, [pc, #196]	; (800802c <prvAddNewTaskToReadyList+0x100>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d802      	bhi.n	8007f7a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007f74:	4a2d      	ldr	r2, [pc, #180]	; (800802c <prvAddNewTaskToReadyList+0x100>)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007f7a:	4b2e      	ldr	r3, [pc, #184]	; (8008034 <prvAddNewTaskToReadyList+0x108>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	4a2c      	ldr	r2, [pc, #176]	; (8008034 <prvAddNewTaskToReadyList+0x108>)
 8007f82:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f84:	4b2b      	ldr	r3, [pc, #172]	; (8008034 <prvAddNewTaskToReadyList+0x108>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d016      	beq.n	8007fc0 <prvAddNewTaskToReadyList+0x94>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f002 fdff 	bl	800ab98 <SEGGER_SYSVIEW_OnTaskCreate>
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007faa:	461d      	mov	r5, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461c      	mov	r4, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb6:	1ae3      	subs	r3, r4, r3
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	462b      	mov	r3, r5
 8007fbc:	f001 f96c 	bl	8009298 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f002 fe6c 	bl	800aca0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	2201      	movs	r2, #1
 8007fce:	409a      	lsls	r2, r3
 8007fd0:	4b19      	ldr	r3, [pc, #100]	; (8008038 <prvAddNewTaskToReadyList+0x10c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	4a18      	ldr	r2, [pc, #96]	; (8008038 <prvAddNewTaskToReadyList+0x10c>)
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4a15      	ldr	r2, [pc, #84]	; (800803c <prvAddNewTaskToReadyList+0x110>)
 8007fe8:	441a      	add	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	f7ff fe3c 	bl	8007c6e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007ff6:	f000 fda5 	bl	8008b44 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <prvAddNewTaskToReadyList+0x104>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008002:	4b0a      	ldr	r3, [pc, #40]	; (800802c <prvAddNewTaskToReadyList+0x100>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	429a      	cmp	r2, r3
 800800e:	d207      	bcs.n	8008020 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8008010:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <prvAddNewTaskToReadyList+0x114>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bdb0      	pop	{r4, r5, r7, pc}
 8008028:	20000314 	.word	0x20000314
 800802c:	2000023c 	.word	0x2000023c
 8008030:	20000320 	.word	0x20000320
 8008034:	20000330 	.word	0x20000330
 8008038:	2000031c 	.word	0x2000031c
 800803c:	20000240 	.word	0x20000240
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d01b      	beq.n	800808e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8008056:	4b15      	ldr	r3, [pc, #84]	; (80080ac <vTaskDelay+0x68>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <vTaskDelay+0x30>
        __asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	60bb      	str	r3, [r7, #8]
    }
 8008070:	bf00      	nop
 8008072:	e7fe      	b.n	8008072 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8008074:	f000 f87a 	bl	800816c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	2023      	movs	r0, #35	; 0x23
 800807c:	f002 f998 	bl	800a3b0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008080:	2100      	movs	r1, #0
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fb0a 	bl	800869c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8008088:	f000 f87e 	bl	8008188 <xTaskResumeAll>
 800808c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d107      	bne.n	80080a4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8008094:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <vTaskDelay+0x6c>)
 8008096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80080a4:	bf00      	nop
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	2000033c 	.word	0x2000033c
 80080b0:	e000ed04 	.word	0xe000ed04

080080b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80080ba:	4b24      	ldr	r3, [pc, #144]	; (800814c <vTaskStartScheduler+0x98>)
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	2300      	movs	r3, #0
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	2300      	movs	r3, #0
 80080c4:	2282      	movs	r2, #130	; 0x82
 80080c6:	4922      	ldr	r1, [pc, #136]	; (8008150 <vTaskStartScheduler+0x9c>)
 80080c8:	4822      	ldr	r0, [pc, #136]	; (8008154 <vTaskStartScheduler+0xa0>)
 80080ca:	f7ff fe57 	bl	8007d7c <xTaskCreate>
 80080ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d124      	bne.n	8008120 <vTaskStartScheduler+0x6c>
        __asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60bb      	str	r3, [r7, #8]
    }
 80080e8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80080ea:	4b1b      	ldr	r3, [pc, #108]	; (8008158 <vTaskStartScheduler+0xa4>)
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80080f2:	4b1a      	ldr	r3, [pc, #104]	; (800815c <vTaskStartScheduler+0xa8>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080f8:	4b19      	ldr	r3, [pc, #100]	; (8008160 <vTaskStartScheduler+0xac>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80080fe:	4b19      	ldr	r3, [pc, #100]	; (8008164 <vTaskStartScheduler+0xb0>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b12      	ldr	r3, [pc, #72]	; (800814c <vTaskStartScheduler+0x98>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d102      	bne.n	8008110 <vTaskStartScheduler+0x5c>
 800810a:	f002 fd29 	bl	800ab60 <SEGGER_SYSVIEW_OnIdle>
 800810e:	e004      	b.n	800811a <vTaskStartScheduler+0x66>
 8008110:	4b14      	ldr	r3, [pc, #80]	; (8008164 <vTaskStartScheduler+0xb0>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4618      	mov	r0, r3
 8008116:	f002 fd81 	bl	800ac1c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800811a:	f000 fbc3 	bl	80088a4 <xPortStartScheduler>
 800811e:	e00e      	b.n	800813e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008126:	d10a      	bne.n	800813e <vTaskStartScheduler+0x8a>
        __asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	607b      	str	r3, [r7, #4]
    }
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800813e:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <vTaskStartScheduler+0xb4>)
 8008140:	681b      	ldr	r3, [r3, #0]
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20000338 	.word	0x20000338
 8008150:	0800b98c 	.word	0x0800b98c
 8008154:	08008539 	.word	0x08008539
 8008158:	20000334 	.word	0x20000334
 800815c:	20000320 	.word	0x20000320
 8008160:	20000318 	.word	0x20000318
 8008164:	2000023c 	.word	0x2000023c
 8008168:	2000002c 	.word	0x2000002c

0800816c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <vTaskSuspendAll+0x18>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	4a03      	ldr	r2, [pc, #12]	; (8008184 <vTaskSuspendAll+0x18>)
 8008178:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800817a:	bf00      	nop
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	2000033c 	.word	0x2000033c

08008188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8008192:	2300      	movs	r3, #0
 8008194:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8008196:	4b43      	ldr	r3, [pc, #268]	; (80082a4 <xTaskResumeAll+0x11c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	603b      	str	r3, [r7, #0]
    }
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80081b4:	f000 fc96 	bl	8008ae4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80081b8:	4b3a      	ldr	r3, [pc, #232]	; (80082a4 <xTaskResumeAll+0x11c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3b01      	subs	r3, #1
 80081be:	4a39      	ldr	r2, [pc, #228]	; (80082a4 <xTaskResumeAll+0x11c>)
 80081c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081c2:	4b38      	ldr	r3, [pc, #224]	; (80082a4 <xTaskResumeAll+0x11c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d165      	bne.n	8008296 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081ca:	4b37      	ldr	r3, [pc, #220]	; (80082a8 <xTaskResumeAll+0x120>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d061      	beq.n	8008296 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081d2:	e032      	b.n	800823a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d4:	4b35      	ldr	r3, [pc, #212]	; (80082ac <xTaskResumeAll+0x124>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3318      	adds	r3, #24
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff fda1 	bl	8007d28 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3304      	adds	r3, #4
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fd9c 	bl	8007d28 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f002 fd54 	bl	800aca0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	2201      	movs	r2, #1
 80081fe:	409a      	lsls	r2, r3
 8008200:	4b2b      	ldr	r3, [pc, #172]	; (80082b0 <xTaskResumeAll+0x128>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4313      	orrs	r3, r2
 8008206:	4a2a      	ldr	r2, [pc, #168]	; (80082b0 <xTaskResumeAll+0x128>)
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4a27      	ldr	r2, [pc, #156]	; (80082b4 <xTaskResumeAll+0x12c>)
 8008218:	441a      	add	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3304      	adds	r3, #4
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f7ff fd24 	bl	8007c6e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822a:	4b23      	ldr	r3, [pc, #140]	; (80082b8 <xTaskResumeAll+0x130>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	429a      	cmp	r2, r3
 8008232:	d302      	bcc.n	800823a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8008234:	4b21      	ldr	r3, [pc, #132]	; (80082bc <xTaskResumeAll+0x134>)
 8008236:	2201      	movs	r2, #1
 8008238:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800823a:	4b1c      	ldr	r3, [pc, #112]	; (80082ac <xTaskResumeAll+0x124>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1c8      	bne.n	80081d4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8008248:	f000 fa0c 	bl	8008664 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800824c:	4b1c      	ldr	r3, [pc, #112]	; (80082c0 <xTaskResumeAll+0x138>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d010      	beq.n	800827a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8008258:	f000 f848 	bl	80082ec <xTaskIncrementTick>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8008262:	4b16      	ldr	r3, [pc, #88]	; (80082bc <xTaskResumeAll+0x134>)
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3b01      	subs	r3, #1
 800826c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1f1      	bne.n	8008258 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8008274:	4b12      	ldr	r3, [pc, #72]	; (80082c0 <xTaskResumeAll+0x138>)
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800827a:	4b10      	ldr	r3, [pc, #64]	; (80082bc <xTaskResumeAll+0x134>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8008282:	2301      	movs	r3, #1
 8008284:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8008286:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <xTaskResumeAll+0x13c>)
 8008288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008296:	f000 fc55 	bl	8008b44 <vPortExitCritical>

    return xAlreadyYielded;
 800829a:	68bb      	ldr	r3, [r7, #8]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	2000033c 	.word	0x2000033c
 80082a8:	20000314 	.word	0x20000314
 80082ac:	200002d4 	.word	0x200002d4
 80082b0:	2000031c 	.word	0x2000031c
 80082b4:	20000240 	.word	0x20000240
 80082b8:	2000023c 	.word	0x2000023c
 80082bc:	20000328 	.word	0x20000328
 80082c0:	20000324 	.word	0x20000324
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082ce:	f000 fcf5 	bl	8008cbc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80082d2:	2300      	movs	r3, #0
 80082d4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80082d6:	4b04      	ldr	r3, [pc, #16]	; (80082e8 <xTaskGetTickCountFromISR+0x20>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80082dc:	683b      	ldr	r3, [r7, #0]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20000318 	.word	0x20000318

080082ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f6:	4b50      	ldr	r3, [pc, #320]	; (8008438 <xTaskIncrementTick+0x14c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f040 8092 	bne.w	8008424 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008300:	4b4e      	ldr	r3, [pc, #312]	; (800843c <xTaskIncrementTick+0x150>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008308:	4a4c      	ldr	r2, [pc, #304]	; (800843c <xTaskIncrementTick+0x150>)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d120      	bne.n	8008356 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8008314:	4b4a      	ldr	r3, [pc, #296]	; (8008440 <xTaskIncrementTick+0x154>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <xTaskIncrementTick+0x48>
        __asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	603b      	str	r3, [r7, #0]
    }
 8008330:	bf00      	nop
 8008332:	e7fe      	b.n	8008332 <xTaskIncrementTick+0x46>
 8008334:	4b42      	ldr	r3, [pc, #264]	; (8008440 <xTaskIncrementTick+0x154>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	4b42      	ldr	r3, [pc, #264]	; (8008444 <xTaskIncrementTick+0x158>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a40      	ldr	r2, [pc, #256]	; (8008440 <xTaskIncrementTick+0x154>)
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	4a40      	ldr	r2, [pc, #256]	; (8008444 <xTaskIncrementTick+0x158>)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	4b3f      	ldr	r3, [pc, #252]	; (8008448 <xTaskIncrementTick+0x15c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3301      	adds	r3, #1
 800834e:	4a3e      	ldr	r2, [pc, #248]	; (8008448 <xTaskIncrementTick+0x15c>)
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	f000 f987 	bl	8008664 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008356:	4b3d      	ldr	r3, [pc, #244]	; (800844c <xTaskIncrementTick+0x160>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	429a      	cmp	r2, r3
 800835e:	d34c      	bcc.n	80083fa <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008360:	4b37      	ldr	r3, [pc, #220]	; (8008440 <xTaskIncrementTick+0x154>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d104      	bne.n	8008374 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800836a:	4b38      	ldr	r3, [pc, #224]	; (800844c <xTaskIncrementTick+0x160>)
 800836c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008370:	601a      	str	r2, [r3, #0]
                    break;
 8008372:	e042      	b.n	80083fa <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008374:	4b32      	ldr	r3, [pc, #200]	; (8008440 <xTaskIncrementTick+0x154>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	d203      	bcs.n	8008394 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800838c:	4a2f      	ldr	r2, [pc, #188]	; (800844c <xTaskIncrementTick+0x160>)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008392:	e032      	b.n	80083fa <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	3304      	adds	r3, #4
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff fcc5 	bl	8007d28 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d004      	beq.n	80083b0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	3318      	adds	r3, #24
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7ff fcbc 	bl	8007d28 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f002 fc74 	bl	800aca0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	2201      	movs	r2, #1
 80083be:	409a      	lsls	r2, r3
 80083c0:	4b23      	ldr	r3, [pc, #140]	; (8008450 <xTaskIncrementTick+0x164>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	4a22      	ldr	r2, [pc, #136]	; (8008450 <xTaskIncrementTick+0x164>)
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4a1f      	ldr	r2, [pc, #124]	; (8008454 <xTaskIncrementTick+0x168>)
 80083d8:	441a      	add	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	3304      	adds	r3, #4
 80083de:	4619      	mov	r1, r3
 80083e0:	4610      	mov	r0, r2
 80083e2:	f7ff fc44 	bl	8007c6e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ea:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <xTaskIncrementTick+0x16c>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d3b5      	bcc.n	8008360 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083f8:	e7b2      	b.n	8008360 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083fa:	4b17      	ldr	r3, [pc, #92]	; (8008458 <xTaskIncrementTick+0x16c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008400:	4914      	ldr	r1, [pc, #80]	; (8008454 <xTaskIncrementTick+0x168>)
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d901      	bls.n	8008416 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8008412:	2301      	movs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8008416:	4b11      	ldr	r3, [pc, #68]	; (800845c <xTaskIncrementTick+0x170>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800841e:	2301      	movs	r3, #1
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	e004      	b.n	800842e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008424:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <xTaskIncrementTick+0x174>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	4a0d      	ldr	r2, [pc, #52]	; (8008460 <xTaskIncrementTick+0x174>)
 800842c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800842e:	697b      	ldr	r3, [r7, #20]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	2000033c 	.word	0x2000033c
 800843c:	20000318 	.word	0x20000318
 8008440:	200002cc 	.word	0x200002cc
 8008444:	200002d0 	.word	0x200002d0
 8008448:	2000032c 	.word	0x2000032c
 800844c:	20000334 	.word	0x20000334
 8008450:	2000031c 	.word	0x2000031c
 8008454:	20000240 	.word	0x20000240
 8008458:	2000023c 	.word	0x2000023c
 800845c:	20000328 	.word	0x20000328
 8008460:	20000324 	.word	0x20000324

08008464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800846a:	4b2d      	ldr	r3, [pc, #180]	; (8008520 <vTaskSwitchContext+0xbc>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008472:	4b2c      	ldr	r3, [pc, #176]	; (8008524 <vTaskSwitchContext+0xc0>)
 8008474:	2201      	movs	r2, #1
 8008476:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8008478:	e04d      	b.n	8008516 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800847a:	4b2a      	ldr	r3, [pc, #168]	; (8008524 <vTaskSwitchContext+0xc0>)
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008480:	4b29      	ldr	r3, [pc, #164]	; (8008528 <vTaskSwitchContext+0xc4>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	fab3 f383 	clz	r3, r3
 800848c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	f1c3 031f 	rsb	r3, r3, #31
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	4925      	ldr	r1, [pc, #148]	; (800852c <vTaskSwitchContext+0xc8>)
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4613      	mov	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	440b      	add	r3, r1
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10a      	bne.n	80084c0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	607b      	str	r3, [r7, #4]
    }
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <vTaskSwitchContext+0x5a>
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4a18      	ldr	r2, [pc, #96]	; (800852c <vTaskSwitchContext+0xc8>)
 80084cc:	4413      	add	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3308      	adds	r3, #8
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d104      	bne.n	80084f0 <vTaskSwitchContext+0x8c>
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	605a      	str	r2, [r3, #4]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	4a0e      	ldr	r2, [pc, #56]	; (8008530 <vTaskSwitchContext+0xcc>)
 80084f8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80084fa:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <vTaskSwitchContext+0xcc>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <vTaskSwitchContext+0xd0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d102      	bne.n	800850c <vTaskSwitchContext+0xa8>
 8008506:	f002 fb2b 	bl	800ab60 <SEGGER_SYSVIEW_OnIdle>
}
 800850a:	e004      	b.n	8008516 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800850c:	4b08      	ldr	r3, [pc, #32]	; (8008530 <vTaskSwitchContext+0xcc>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f002 fb83 	bl	800ac1c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8008516:	bf00      	nop
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	2000033c 	.word	0x2000033c
 8008524:	20000328 	.word	0x20000328
 8008528:	2000031c 	.word	0x2000031c
 800852c:	20000240 	.word	0x20000240
 8008530:	2000023c 	.word	0x2000023c
 8008534:	20000338 	.word	0x20000338

08008538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008540:	f000 f852 	bl	80085e8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008544:	4b06      	ldr	r3, [pc, #24]	; (8008560 <prvIdleTask+0x28>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d9f9      	bls.n	8008540 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <prvIdleTask+0x2c>)
 800854e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800855c:	e7f0      	b.n	8008540 <prvIdleTask+0x8>
 800855e:	bf00      	nop
 8008560:	20000240 	.word	0x20000240
 8008564:	e000ed04 	.word	0xe000ed04

08008568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
 8008572:	e00c      	b.n	800858e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4a12      	ldr	r2, [pc, #72]	; (80085c8 <prvInitialiseTaskLists+0x60>)
 8008580:	4413      	add	r3, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff fb46 	bl	8007c14 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3301      	adds	r3, #1
 800858c:	607b      	str	r3, [r7, #4]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b04      	cmp	r3, #4
 8008592:	d9ef      	bls.n	8008574 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008594:	480d      	ldr	r0, [pc, #52]	; (80085cc <prvInitialiseTaskLists+0x64>)
 8008596:	f7ff fb3d 	bl	8007c14 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800859a:	480d      	ldr	r0, [pc, #52]	; (80085d0 <prvInitialiseTaskLists+0x68>)
 800859c:	f7ff fb3a 	bl	8007c14 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80085a0:	480c      	ldr	r0, [pc, #48]	; (80085d4 <prvInitialiseTaskLists+0x6c>)
 80085a2:	f7ff fb37 	bl	8007c14 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80085a6:	480c      	ldr	r0, [pc, #48]	; (80085d8 <prvInitialiseTaskLists+0x70>)
 80085a8:	f7ff fb34 	bl	8007c14 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80085ac:	480b      	ldr	r0, [pc, #44]	; (80085dc <prvInitialiseTaskLists+0x74>)
 80085ae:	f7ff fb31 	bl	8007c14 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80085b2:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <prvInitialiseTaskLists+0x78>)
 80085b4:	4a05      	ldr	r2, [pc, #20]	; (80085cc <prvInitialiseTaskLists+0x64>)
 80085b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <prvInitialiseTaskLists+0x7c>)
 80085ba:	4a05      	ldr	r2, [pc, #20]	; (80085d0 <prvInitialiseTaskLists+0x68>)
 80085bc:	601a      	str	r2, [r3, #0]
}
 80085be:	bf00      	nop
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000240 	.word	0x20000240
 80085cc:	200002a4 	.word	0x200002a4
 80085d0:	200002b8 	.word	0x200002b8
 80085d4:	200002d4 	.word	0x200002d4
 80085d8:	200002e8 	.word	0x200002e8
 80085dc:	20000300 	.word	0x20000300
 80085e0:	200002cc 	.word	0x200002cc
 80085e4:	200002d0 	.word	0x200002d0

080085e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085ee:	e019      	b.n	8008624 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80085f0:	f000 fa78 	bl	8008ae4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085f4:	4b10      	ldr	r3, [pc, #64]	; (8008638 <prvCheckTasksWaitingTermination+0x50>)
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff fb91 	bl	8007d28 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8008606:	4b0d      	ldr	r3, [pc, #52]	; (800863c <prvCheckTasksWaitingTermination+0x54>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3b01      	subs	r3, #1
 800860c:	4a0b      	ldr	r2, [pc, #44]	; (800863c <prvCheckTasksWaitingTermination+0x54>)
 800860e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8008610:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <prvCheckTasksWaitingTermination+0x58>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3b01      	subs	r3, #1
 8008616:	4a0a      	ldr	r2, [pc, #40]	; (8008640 <prvCheckTasksWaitingTermination+0x58>)
 8008618:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800861a:	f000 fa93 	bl	8008b44 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f810 	bl	8008644 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008624:	4b06      	ldr	r3, [pc, #24]	; (8008640 <prvCheckTasksWaitingTermination+0x58>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e1      	bne.n	80085f0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800862c:	bf00      	nop
 800862e:	bf00      	nop
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	200002e8 	.word	0x200002e8
 800863c:	20000314 	.word	0x20000314
 8008640:	200002fc 	.word	0x200002fc

08008644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fc53 	bl	8008efc <vPortFree>
                vPortFree( pxTCB );
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fc50 	bl	8008efc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008668:	4b0a      	ldr	r3, [pc, #40]	; (8008694 <prvResetNextTaskUnblockTime+0x30>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d104      	bne.n	800867c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <prvResetNextTaskUnblockTime+0x34>)
 8008674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008678:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800867a:	e005      	b.n	8008688 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800867c:	4b05      	ldr	r3, [pc, #20]	; (8008694 <prvResetNextTaskUnblockTime+0x30>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a04      	ldr	r2, [pc, #16]	; (8008698 <prvResetNextTaskUnblockTime+0x34>)
 8008686:	6013      	str	r3, [r2, #0]
}
 8008688:	bf00      	nop
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	200002cc 	.word	0x200002cc
 8008698:	20000334 	.word	0x20000334

0800869c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80086a6:	4b32      	ldr	r3, [pc, #200]	; (8008770 <prvAddCurrentTaskToDelayedList+0xd4>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086ac:	4b31      	ldr	r3, [pc, #196]	; (8008774 <prvAddCurrentTaskToDelayedList+0xd8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3304      	adds	r3, #4
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff fb38 	bl	8007d28 <uxListRemove>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80086be:	4b2d      	ldr	r3, [pc, #180]	; (8008774 <prvAddCurrentTaskToDelayedList+0xd8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	2201      	movs	r2, #1
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	43da      	mvns	r2, r3
 80086cc:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <prvAddCurrentTaskToDelayedList+0xdc>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4013      	ands	r3, r2
 80086d2:	4a29      	ldr	r2, [pc, #164]	; (8008778 <prvAddCurrentTaskToDelayedList+0xdc>)
 80086d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086dc:	d110      	bne.n	8008700 <prvAddCurrentTaskToDelayedList+0x64>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00d      	beq.n	8008700 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80086e4:	4b23      	ldr	r3, [pc, #140]	; (8008774 <prvAddCurrentTaskToDelayedList+0xd8>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	211b      	movs	r1, #27
 80086ea:	4618      	mov	r0, r3
 80086ec:	f002 fb1a 	bl	800ad24 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086f0:	4b20      	ldr	r3, [pc, #128]	; (8008774 <prvAddCurrentTaskToDelayedList+0xd8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4619      	mov	r1, r3
 80086f8:	4820      	ldr	r0, [pc, #128]	; (800877c <prvAddCurrentTaskToDelayedList+0xe0>)
 80086fa:	f7ff fab8 	bl	8007c6e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80086fe:	e032      	b.n	8008766 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4413      	add	r3, r2
 8008706:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008708:	4b1a      	ldr	r3, [pc, #104]	; (8008774 <prvAddCurrentTaskToDelayedList+0xd8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	429a      	cmp	r2, r3
 8008716:	d20f      	bcs.n	8008738 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8008718:	4b16      	ldr	r3, [pc, #88]	; (8008774 <prvAddCurrentTaskToDelayedList+0xd8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2104      	movs	r1, #4
 800871e:	4618      	mov	r0, r3
 8008720:	f002 fb00 	bl	800ad24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008724:	4b16      	ldr	r3, [pc, #88]	; (8008780 <prvAddCurrentTaskToDelayedList+0xe4>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	4b12      	ldr	r3, [pc, #72]	; (8008774 <prvAddCurrentTaskToDelayedList+0xd8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3304      	adds	r3, #4
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f7ff fac0 	bl	8007cb6 <vListInsert>
}
 8008736:	e016      	b.n	8008766 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8008738:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <prvAddCurrentTaskToDelayedList+0xd8>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2104      	movs	r1, #4
 800873e:	4618      	mov	r0, r3
 8008740:	f002 faf0 	bl	800ad24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008744:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <prvAddCurrentTaskToDelayedList+0xd8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3304      	adds	r3, #4
 800874e:	4619      	mov	r1, r3
 8008750:	4610      	mov	r0, r2
 8008752:	f7ff fab0 	bl	8007cb6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <prvAddCurrentTaskToDelayedList+0xec>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	429a      	cmp	r2, r3
 800875e:	d202      	bcs.n	8008766 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8008760:	4a09      	ldr	r2, [pc, #36]	; (8008788 <prvAddCurrentTaskToDelayedList+0xec>)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6013      	str	r3, [r2, #0]
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000318 	.word	0x20000318
 8008774:	2000023c 	.word	0x2000023c
 8008778:	2000031c 	.word	0x2000031c
 800877c:	20000300 	.word	0x20000300
 8008780:	200002d0 	.word	0x200002d0
 8008784:	200002cc 	.word	0x200002cc
 8008788:	20000334 	.word	0x20000334

0800878c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3b04      	subs	r3, #4
 800879c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3b04      	subs	r3, #4
 80087aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f023 0201 	bic.w	r2, r3, #1
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3b04      	subs	r3, #4
 80087ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80087bc:	4a0c      	ldr	r2, [pc, #48]	; (80087f0 <pxPortInitialiseStack+0x64>)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3b14      	subs	r3, #20
 80087c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3b04      	subs	r3, #4
 80087d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f06f 0202 	mvn.w	r2, #2
 80087da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3b20      	subs	r3, #32
 80087e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80087e2:	68fb      	ldr	r3, [r7, #12]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	080087f5 	.word	0x080087f5

080087f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <prvTaskExitError+0x54>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008806:	d00a      	beq.n	800881e <prvTaskExitError+0x2a>
        __asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	60fb      	str	r3, [r7, #12]
    }
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <prvTaskExitError+0x28>
        __asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	60bb      	str	r3, [r7, #8]
    }
 8008830:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008832:	bf00      	nop
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0fc      	beq.n	8008834 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	20000030 	.word	0x20000030
 800884c:	00000000 	.word	0x00000000

08008850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008850:	4b07      	ldr	r3, [pc, #28]	; (8008870 <pxCurrentTCBConst2>)
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	6808      	ldr	r0, [r1, #0]
 8008856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885a:	f380 8809 	msr	PSP, r0
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8811 	msr	BASEPRI, r0
 800886a:	4770      	bx	lr
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst2>:
 8008870:	2000023c 	.word	0x2000023c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008878:	4808      	ldr	r0, [pc, #32]	; (800889c <prvPortStartFirstTask+0x24>)
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	6800      	ldr	r0, [r0, #0]
 800887e:	f380 8808 	msr	MSP, r0
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8814 	msr	CONTROL, r0
 800888a:	b662      	cpsie	i
 800888c:	b661      	cpsie	f
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	df00      	svc	0
 8008898:	bf00      	nop
 800889a:	0000      	.short	0x0000
 800889c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop

080088a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088aa:	4b46      	ldr	r3, [pc, #280]	; (80089c4 <xPortStartScheduler+0x120>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a46      	ldr	r2, [pc, #280]	; (80089c8 <xPortStartScheduler+0x124>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d10a      	bne.n	80088ca <xPortStartScheduler+0x26>
        __asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	613b      	str	r3, [r7, #16]
    }
 80088c6:	bf00      	nop
 80088c8:	e7fe      	b.n	80088c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088ca:	4b3e      	ldr	r3, [pc, #248]	; (80089c4 <xPortStartScheduler+0x120>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a3f      	ldr	r2, [pc, #252]	; (80089cc <xPortStartScheduler+0x128>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d10a      	bne.n	80088ea <xPortStartScheduler+0x46>
        __asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	60fb      	str	r3, [r7, #12]
    }
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088ea:	4b39      	ldr	r3, [pc, #228]	; (80089d0 <xPortStartScheduler+0x12c>)
 80088ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	22ff      	movs	r2, #255	; 0xff
 80088fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800890c:	b2da      	uxtb	r2, r3
 800890e:	4b31      	ldr	r3, [pc, #196]	; (80089d4 <xPortStartScheduler+0x130>)
 8008910:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008912:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <xPortStartScheduler+0x134>)
 8008914:	2207      	movs	r2, #7
 8008916:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008918:	e009      	b.n	800892e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800891a:	4b2f      	ldr	r3, [pc, #188]	; (80089d8 <xPortStartScheduler+0x134>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3b01      	subs	r3, #1
 8008920:	4a2d      	ldr	r2, [pc, #180]	; (80089d8 <xPortStartScheduler+0x134>)
 8008922:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	b2db      	uxtb	r3, r3
 800892c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008936:	2b80      	cmp	r3, #128	; 0x80
 8008938:	d0ef      	beq.n	800891a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800893a:	4b27      	ldr	r3, [pc, #156]	; (80089d8 <xPortStartScheduler+0x134>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f1c3 0307 	rsb	r3, r3, #7
 8008942:	2b04      	cmp	r3, #4
 8008944:	d00a      	beq.n	800895c <xPortStartScheduler+0xb8>
        __asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	60bb      	str	r3, [r7, #8]
    }
 8008958:	bf00      	nop
 800895a:	e7fe      	b.n	800895a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800895c:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <xPortStartScheduler+0x134>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	021b      	lsls	r3, r3, #8
 8008962:	4a1d      	ldr	r2, [pc, #116]	; (80089d8 <xPortStartScheduler+0x134>)
 8008964:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008966:	4b1c      	ldr	r3, [pc, #112]	; (80089d8 <xPortStartScheduler+0x134>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800896e:	4a1a      	ldr	r2, [pc, #104]	; (80089d8 <xPortStartScheduler+0x134>)
 8008970:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	b2da      	uxtb	r2, r3
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800897a:	4b18      	ldr	r3, [pc, #96]	; (80089dc <xPortStartScheduler+0x138>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a17      	ldr	r2, [pc, #92]	; (80089dc <xPortStartScheduler+0x138>)
 8008980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008984:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008986:	4b15      	ldr	r3, [pc, #84]	; (80089dc <xPortStartScheduler+0x138>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a14      	ldr	r2, [pc, #80]	; (80089dc <xPortStartScheduler+0x138>)
 800898c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008990:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008992:	f000 f963 	bl	8008c5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008996:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <xPortStartScheduler+0x13c>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800899c:	f000 f982 	bl	8008ca4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089a0:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <xPortStartScheduler+0x140>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a0f      	ldr	r2, [pc, #60]	; (80089e4 <xPortStartScheduler+0x140>)
 80089a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80089ac:	f7ff ff64 	bl	8008878 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80089b0:	f7ff fd58 	bl	8008464 <vTaskSwitchContext>
    prvTaskExitError();
 80089b4:	f7ff ff1e 	bl	80087f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	e000ed00 	.word	0xe000ed00
 80089c8:	410fc271 	.word	0x410fc271
 80089cc:	410fc270 	.word	0x410fc270
 80089d0:	e000e400 	.word	0xe000e400
 80089d4:	20000340 	.word	0x20000340
 80089d8:	20000344 	.word	0x20000344
 80089dc:	e000ed20 	.word	0xe000ed20
 80089e0:	20000030 	.word	0x20000030
 80089e4:	e000ef34 	.word	0xe000ef34

080089e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089ee:	4b37      	ldr	r3, [pc, #220]	; (8008acc <vInitPrioGroupValue+0xe4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a37      	ldr	r2, [pc, #220]	; (8008ad0 <vInitPrioGroupValue+0xe8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d10a      	bne.n	8008a0e <vInitPrioGroupValue+0x26>
        __asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	613b      	str	r3, [r7, #16]
    }
 8008a0a:	bf00      	nop
 8008a0c:	e7fe      	b.n	8008a0c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a0e:	4b2f      	ldr	r3, [pc, #188]	; (8008acc <vInitPrioGroupValue+0xe4>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a30      	ldr	r2, [pc, #192]	; (8008ad4 <vInitPrioGroupValue+0xec>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d10a      	bne.n	8008a2e <vInitPrioGroupValue+0x46>
        __asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	60fb      	str	r3, [r7, #12]
    }
 8008a2a:	bf00      	nop
 8008a2c:	e7fe      	b.n	8008a2c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a2e:	4b2a      	ldr	r3, [pc, #168]	; (8008ad8 <vInitPrioGroupValue+0xf0>)
 8008a30:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	22ff      	movs	r2, #255	; 0xff
 8008a3e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	4b22      	ldr	r3, [pc, #136]	; (8008adc <vInitPrioGroupValue+0xf4>)
 8008a54:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a56:	4b22      	ldr	r3, [pc, #136]	; (8008ae0 <vInitPrioGroupValue+0xf8>)
 8008a58:	2207      	movs	r2, #7
 8008a5a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a5c:	e009      	b.n	8008a72 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8008a5e:	4b20      	ldr	r3, [pc, #128]	; (8008ae0 <vInitPrioGroupValue+0xf8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	4a1e      	ldr	r2, [pc, #120]	; (8008ae0 <vInitPrioGroupValue+0xf8>)
 8008a66:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7a:	2b80      	cmp	r3, #128	; 0x80
 8008a7c:	d0ef      	beq.n	8008a5e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a7e:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <vInitPrioGroupValue+0xf8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f1c3 0307 	rsb	r3, r3, #7
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d00a      	beq.n	8008aa0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	60bb      	str	r3, [r7, #8]
    }
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008aa0:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <vInitPrioGroupValue+0xf8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	021b      	lsls	r3, r3, #8
 8008aa6:	4a0e      	ldr	r2, [pc, #56]	; (8008ae0 <vInitPrioGroupValue+0xf8>)
 8008aa8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <vInitPrioGroupValue+0xf8>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ab2:	4a0b      	ldr	r2, [pc, #44]	; (8008ae0 <vInitPrioGroupValue+0xf8>)
 8008ab4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8008abe:	bf00      	nop
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	e000ed00 	.word	0xe000ed00
 8008ad0:	410fc271 	.word	0x410fc271
 8008ad4:	410fc270 	.word	0x410fc270
 8008ad8:	e000e400 	.word	0xe000e400
 8008adc:	20000340 	.word	0x20000340
 8008ae0:	20000344 	.word	0x20000344

08008ae4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
        __asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	607b      	str	r3, [r7, #4]
    }
 8008afc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008afe:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <vPortEnterCritical+0x58>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3301      	adds	r3, #1
 8008b04:	4a0d      	ldr	r2, [pc, #52]	; (8008b3c <vPortEnterCritical+0x58>)
 8008b06:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008b08:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <vPortEnterCritical+0x58>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d10f      	bne.n	8008b30 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <vPortEnterCritical+0x5c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <vPortEnterCritical+0x4c>
        __asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	603b      	str	r3, [r7, #0]
    }
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <vPortEnterCritical+0x4a>
    }
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	20000030 	.word	0x20000030
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008b4a:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <vPortExitCritical+0x50>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <vPortExitCritical+0x24>
        __asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	607b      	str	r3, [r7, #4]
    }
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008b68:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <vPortExitCritical+0x50>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <vPortExitCritical+0x50>)
 8008b70:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008b72:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <vPortExitCritical+0x50>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d105      	bne.n	8008b86 <vPortExitCritical+0x42>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008b84:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	20000030 	.word	0x20000030
	...

08008ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008ba0:	f3ef 8009 	mrs	r0, PSP
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <pxCurrentTCBConst>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	f01e 0f10 	tst.w	lr, #16
 8008bb0:	bf08      	it	eq
 8008bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	6010      	str	r0, [r2, #0]
 8008bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bc4:	f380 8811 	msr	BASEPRI, r0
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f7ff fc48 	bl	8008464 <vTaskSwitchContext>
 8008bd4:	f04f 0000 	mov.w	r0, #0
 8008bd8:	f380 8811 	msr	BASEPRI, r0
 8008bdc:	bc09      	pop	{r0, r3}
 8008bde:	6819      	ldr	r1, [r3, #0]
 8008be0:	6808      	ldr	r0, [r1, #0]
 8008be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be6:	f01e 0f10 	tst.w	lr, #16
 8008bea:	bf08      	it	eq
 8008bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bf0:	f380 8809 	msr	PSP, r0
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	f3af 8000 	nop.w

08008c00 <pxCurrentTCBConst>:
 8008c00:	2000023c 	.word	0x2000023c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
        __asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
    }
 8008c20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8008c22:	f001 ff23 	bl	800aa6c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008c26:	f7ff fb61 	bl	80082ec <xTaskIncrementTick>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d006      	beq.n	8008c3e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8008c30:	f001 ff7a 	bl	800ab28 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c34:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <SysTick_Handler+0x50>)
 8008c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	e001      	b.n	8008c42 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8008c3e:	f001 ff57 	bl	800aaf0 <SEGGER_SYSVIEW_RecordExitISR>
 8008c42:	2300      	movs	r3, #0
 8008c44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	f383 8811 	msr	BASEPRI, r3
    }
 8008c4c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <vPortSetupTimerInterrupt+0x38>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <vPortSetupTimerInterrupt+0x3c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a0a      	ldr	r2, [pc, #40]	; (8008c9c <vPortSetupTimerInterrupt+0x40>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	099b      	lsrs	r3, r3, #6
 8008c78:	4a09      	ldr	r2, [pc, #36]	; (8008ca0 <vPortSetupTimerInterrupt+0x44>)
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c7e:	4b04      	ldr	r3, [pc, #16]	; (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c80:	2207      	movs	r2, #7
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	e000e010 	.word	0xe000e010
 8008c94:	e000e018 	.word	0xe000e018
 8008c98:	20000000 	.word	0x20000000
 8008c9c:	10624dd3 	.word	0x10624dd3
 8008ca0:	e000e014 	.word	0xe000e014

08008ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cb4 <vPortEnableVFP+0x10>
 8008ca8:	6801      	ldr	r1, [r0, #0]
 8008caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cae:	6001      	str	r1, [r0, #0]
 8008cb0:	4770      	bx	lr
 8008cb2:	0000      	.short	0x0000
 8008cb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008cb8:	bf00      	nop
 8008cba:	bf00      	nop

08008cbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008cc2:	f3ef 8305 	mrs	r3, IPSR
 8008cc6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b0f      	cmp	r3, #15
 8008ccc:	d914      	bls.n	8008cf8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cce:	4a17      	ldr	r2, [pc, #92]	; (8008d2c <vPortValidateInterruptPriority+0x70>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cd8:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <vPortValidateInterruptPriority+0x74>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	7afa      	ldrb	r2, [r7, #11]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d20a      	bcs.n	8008cf8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	607b      	str	r3, [r7, #4]
    }
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <vPortValidateInterruptPriority+0x78>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d00:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <vPortValidateInterruptPriority+0x7c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d90a      	bls.n	8008d1e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	603b      	str	r3, [r7, #0]
    }
 8008d1a:	bf00      	nop
 8008d1c:	e7fe      	b.n	8008d1c <vPortValidateInterruptPriority+0x60>
    }
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	e000e3f0 	.word	0xe000e3f0
 8008d30:	20000340 	.word	0x20000340
 8008d34:	e000ed0c 	.word	0xe000ed0c
 8008d38:	20000344 	.word	0x20000344

08008d3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08a      	sub	sp, #40	; 0x28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008d48:	f7ff fa10 	bl	800816c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008d4c:	4b65      	ldr	r3, [pc, #404]	; (8008ee4 <pvPortMalloc+0x1a8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008d54:	f000 f934 	bl	8008fc0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d58:	4b63      	ldr	r3, [pc, #396]	; (8008ee8 <pvPortMalloc+0x1ac>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f040 80a7 	bne.w	8008eb4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d02d      	beq.n	8008dc8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008d6c:	2208      	movs	r2, #8
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d227      	bcs.n	8008dc8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008d78:	2208      	movs	r2, #8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d021      	beq.n	8008dce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f023 0307 	bic.w	r3, r3, #7
 8008d90:	3308      	adds	r3, #8
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d214      	bcs.n	8008dc2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f023 0307 	bic.w	r3, r3, #7
 8008d9e:	3308      	adds	r3, #8
 8008da0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f003 0307 	and.w	r3, r3, #7
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d010      	beq.n	8008dce <pvPortMalloc+0x92>
        __asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	617b      	str	r3, [r7, #20]
    }
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dc6:	e002      	b.n	8008dce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	607b      	str	r3, [r7, #4]
 8008dcc:	e000      	b.n	8008dd0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d06e      	beq.n	8008eb4 <pvPortMalloc+0x178>
 8008dd6:	4b45      	ldr	r3, [pc, #276]	; (8008eec <pvPortMalloc+0x1b0>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d869      	bhi.n	8008eb4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008de0:	4b43      	ldr	r3, [pc, #268]	; (8008ef0 <pvPortMalloc+0x1b4>)
 8008de2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008de4:	4b42      	ldr	r3, [pc, #264]	; (8008ef0 <pvPortMalloc+0x1b4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dea:	e004      	b.n	8008df6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d903      	bls.n	8008e08 <pvPortMalloc+0xcc>
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1f1      	bne.n	8008dec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008e08:	4b36      	ldr	r3, [pc, #216]	; (8008ee4 <pvPortMalloc+0x1a8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d050      	beq.n	8008eb4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2208      	movs	r2, #8
 8008e18:	4413      	add	r3, r2
 8008e1a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	1ad2      	subs	r2, r2, r3
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d91f      	bls.n	8008e74 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00a      	beq.n	8008e5c <pvPortMalloc+0x120>
        __asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	613b      	str	r3, [r7, #16]
    }
 8008e58:	bf00      	nop
 8008e5a:	e7fe      	b.n	8008e5a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	1ad2      	subs	r2, r2, r3
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e6e:	69b8      	ldr	r0, [r7, #24]
 8008e70:	f000 f908 	bl	8009084 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e74:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <pvPortMalloc+0x1b0>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	4a1b      	ldr	r2, [pc, #108]	; (8008eec <pvPortMalloc+0x1b0>)
 8008e80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e82:	4b1a      	ldr	r3, [pc, #104]	; (8008eec <pvPortMalloc+0x1b0>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	4b1b      	ldr	r3, [pc, #108]	; (8008ef4 <pvPortMalloc+0x1b8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d203      	bcs.n	8008e96 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e8e:	4b17      	ldr	r3, [pc, #92]	; (8008eec <pvPortMalloc+0x1b0>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a18      	ldr	r2, [pc, #96]	; (8008ef4 <pvPortMalloc+0x1b8>)
 8008e94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	4b13      	ldr	r3, [pc, #76]	; (8008ee8 <pvPortMalloc+0x1ac>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008eaa:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <pvPortMalloc+0x1bc>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	4a11      	ldr	r2, [pc, #68]	; (8008ef8 <pvPortMalloc+0x1bc>)
 8008eb2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008eb4:	f7ff f968 	bl	8008188 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <pvPortMalloc+0x19c>
        __asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	60fb      	str	r3, [r7, #12]
    }
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <pvPortMalloc+0x19a>
    return pvReturn;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3728      	adds	r7, #40	; 0x28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20012f50 	.word	0x20012f50
 8008ee8:	20012f64 	.word	0x20012f64
 8008eec:	20012f54 	.word	0x20012f54
 8008ef0:	20012f48 	.word	0x20012f48
 8008ef4:	20012f58 	.word	0x20012f58
 8008ef8:	20012f5c 	.word	0x20012f5c

08008efc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d04d      	beq.n	8008faa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008f0e:	2308      	movs	r3, #8
 8008f10:	425b      	negs	r3, r3
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4413      	add	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <vPortFree+0xb8>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4013      	ands	r3, r2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10a      	bne.n	8008f40 <vPortFree+0x44>
        __asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	60fb      	str	r3, [r7, #12]
    }
 8008f3c:	bf00      	nop
 8008f3e:	e7fe      	b.n	8008f3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00a      	beq.n	8008f5e <vPortFree+0x62>
        __asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	60bb      	str	r3, [r7, #8]
    }
 8008f5a:	bf00      	nop
 8008f5c:	e7fe      	b.n	8008f5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	4b14      	ldr	r3, [pc, #80]	; (8008fb4 <vPortFree+0xb8>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4013      	ands	r3, r2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01e      	beq.n	8008faa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d11a      	bne.n	8008faa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <vPortFree+0xb8>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	43db      	mvns	r3, r3
 8008f7e:	401a      	ands	r2, r3
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008f84:	f7ff f8f2 	bl	800816c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <vPortFree+0xbc>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4413      	add	r3, r2
 8008f92:	4a09      	ldr	r2, [pc, #36]	; (8008fb8 <vPortFree+0xbc>)
 8008f94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f96:	6938      	ldr	r0, [r7, #16]
 8008f98:	f000 f874 	bl	8009084 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008f9c:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <vPortFree+0xc0>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	4a06      	ldr	r2, [pc, #24]	; (8008fbc <vPortFree+0xc0>)
 8008fa4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008fa6:	f7ff f8ef 	bl	8008188 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008faa:	bf00      	nop
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20012f64 	.word	0x20012f64
 8008fb8:	20012f54 	.word	0x20012f54
 8008fbc:	20012f60 	.word	0x20012f60

08008fc0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fc6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008fca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008fcc:	4b27      	ldr	r3, [pc, #156]	; (800906c <prvHeapInit+0xac>)
 8008fce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00c      	beq.n	8008ff4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3307      	adds	r3, #7
 8008fde:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0307 	bic.w	r3, r3, #7
 8008fe6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	4a1f      	ldr	r2, [pc, #124]	; (800906c <prvHeapInit+0xac>)
 8008ff0:	4413      	add	r3, r2
 8008ff2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ff8:	4a1d      	ldr	r2, [pc, #116]	; (8009070 <prvHeapInit+0xb0>)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008ffe:	4b1c      	ldr	r3, [pc, #112]	; (8009070 <prvHeapInit+0xb0>)
 8009000:	2200      	movs	r2, #0
 8009002:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	4413      	add	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800900c:	2208      	movs	r2, #8
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0307 	bic.w	r3, r3, #7
 800901a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4a15      	ldr	r2, [pc, #84]	; (8009074 <prvHeapInit+0xb4>)
 8009020:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009022:	4b14      	ldr	r3, [pc, #80]	; (8009074 <prvHeapInit+0xb4>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2200      	movs	r2, #0
 8009028:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800902a:	4b12      	ldr	r3, [pc, #72]	; (8009074 <prvHeapInit+0xb4>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	1ad2      	subs	r2, r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009040:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <prvHeapInit+0xb4>)
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <prvHeapInit+0xb8>)
 800904e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	4a09      	ldr	r2, [pc, #36]	; (800907c <prvHeapInit+0xbc>)
 8009056:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009058:	4b09      	ldr	r3, [pc, #36]	; (8009080 <prvHeapInit+0xc0>)
 800905a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800905e:	601a      	str	r2, [r3, #0]
}
 8009060:	bf00      	nop
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	20000348 	.word	0x20000348
 8009070:	20012f48 	.word	0x20012f48
 8009074:	20012f50 	.word	0x20012f50
 8009078:	20012f58 	.word	0x20012f58
 800907c:	20012f54 	.word	0x20012f54
 8009080:	20012f64 	.word	0x20012f64

08009084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800908c:	4b28      	ldr	r3, [pc, #160]	; (8009130 <prvInsertBlockIntoFreeList+0xac>)
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	e002      	b.n	8009098 <prvInsertBlockIntoFreeList+0x14>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d8f7      	bhi.n	8009092 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d108      	bne.n	80090c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	441a      	add	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	441a      	add	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d118      	bne.n	800910c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	4b15      	ldr	r3, [pc, #84]	; (8009134 <prvInsertBlockIntoFreeList+0xb0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d00d      	beq.n	8009102 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	441a      	add	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	e008      	b.n	8009114 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009102:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <prvInsertBlockIntoFreeList+0xb0>)
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	e003      	b.n	8009114 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	429a      	cmp	r2, r3
 800911a:	d002      	beq.n	8009122 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	20012f48 	.word	0x20012f48
 8009134:	20012f50 	.word	0x20012f50

08009138 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009138:	b580      	push	{r7, lr}
 800913a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800913c:	4803      	ldr	r0, [pc, #12]	; (800914c <_cbSendSystemDesc+0x14>)
 800913e:	f001 fc3f 	bl	800a9c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8009142:	4803      	ldr	r0, [pc, #12]	; (8009150 <_cbSendSystemDesc+0x18>)
 8009144:	f001 fc3c 	bl	800a9c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8009148:	bf00      	nop
 800914a:	bd80      	pop	{r7, pc}
 800914c:	0800b994 	.word	0x0800b994
 8009150:	0800b9c8 	.word	0x0800b9c8

08009154 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009158:	4b06      	ldr	r3, [pc, #24]	; (8009174 <SEGGER_SYSVIEW_Conf+0x20>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <SEGGER_SYSVIEW_Conf+0x20>)
 800915e:	6819      	ldr	r1, [r3, #0]
 8009160:	4b05      	ldr	r3, [pc, #20]	; (8009178 <SEGGER_SYSVIEW_Conf+0x24>)
 8009162:	4a06      	ldr	r2, [pc, #24]	; (800917c <SEGGER_SYSVIEW_Conf+0x28>)
 8009164:	f001 f8b2 	bl	800a2cc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009168:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800916c:	f001 f8f2 	bl	800a354 <SEGGER_SYSVIEW_SetRAMBase>
}
 8009170:	bf00      	nop
 8009172:	bd80      	pop	{r7, pc}
 8009174:	20000000 	.word	0x20000000
 8009178:	08009139 	.word	0x08009139
 800917c:	0800ba68 	.word	0x0800ba68

08009180 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8009180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009182:	b085      	sub	sp, #20
 8009184:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009186:	2300      	movs	r3, #0
 8009188:	607b      	str	r3, [r7, #4]
 800918a:	e033      	b.n	80091f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800918c:	491e      	ldr	r1, [pc, #120]	; (8009208 <_cbSendTaskList+0x88>)
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	440b      	add	r3, r1
 800919a:	6818      	ldr	r0, [r3, #0]
 800919c:	491a      	ldr	r1, [pc, #104]	; (8009208 <_cbSendTaskList+0x88>)
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4613      	mov	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	440b      	add	r3, r1
 80091aa:	3304      	adds	r3, #4
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	4c16      	ldr	r4, [pc, #88]	; (8009208 <_cbSendTaskList+0x88>)
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	4613      	mov	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4423      	add	r3, r4
 80091bc:	3308      	adds	r3, #8
 80091be:	681c      	ldr	r4, [r3, #0]
 80091c0:	4d11      	ldr	r5, [pc, #68]	; (8009208 <_cbSendTaskList+0x88>)
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	442b      	add	r3, r5
 80091ce:	330c      	adds	r3, #12
 80091d0:	681d      	ldr	r5, [r3, #0]
 80091d2:	4e0d      	ldr	r6, [pc, #52]	; (8009208 <_cbSendTaskList+0x88>)
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4433      	add	r3, r6
 80091e0:	3310      	adds	r3, #16
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	462b      	mov	r3, r5
 80091e8:	4622      	mov	r2, r4
 80091ea:	f000 f8bd 	bl	8009368 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	3301      	adds	r3, #1
 80091f2:	607b      	str	r3, [r7, #4]
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <_cbSendTaskList+0x8c>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d3c6      	bcc.n	800918c <_cbSendTaskList+0xc>
  }
}
 80091fe:	bf00      	nop
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009208:	20012f68 	.word	0x20012f68
 800920c:	20013008 	.word	0x20013008

08009210 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8009218:	f7ff f856 	bl	80082c8 <xTaskGetTickCountFromISR>
 800921c:	4603      	mov	r3, r0
 800921e:	2200      	movs	r2, #0
 8009220:	469a      	mov	sl, r3
 8009222:	4693      	mov	fp, r2
 8009224:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009228:	e9d7 0100 	ldrd	r0, r1, [r7]
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	f04f 0a00 	mov.w	sl, #0
 8009234:	f04f 0b00 	mov.w	fp, #0
 8009238:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800923c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009240:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009244:	4652      	mov	r2, sl
 8009246:	465b      	mov	r3, fp
 8009248:	1a14      	subs	r4, r2, r0
 800924a:	eb63 0501 	sbc.w	r5, r3, r1
 800924e:	f04f 0200 	mov.w	r2, #0
 8009252:	f04f 0300 	mov.w	r3, #0
 8009256:	00ab      	lsls	r3, r5, #2
 8009258:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800925c:	00a2      	lsls	r2, r4, #2
 800925e:	4614      	mov	r4, r2
 8009260:	461d      	mov	r5, r3
 8009262:	eb14 0800 	adds.w	r8, r4, r0
 8009266:	eb45 0901 	adc.w	r9, r5, r1
 800926a:	f04f 0200 	mov.w	r2, #0
 800926e:	f04f 0300 	mov.w	r3, #0
 8009272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800927a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800927e:	4690      	mov	r8, r2
 8009280:	4699      	mov	r9, r3
 8009282:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8009286:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800928a:	4610      	mov	r0, r2
 800928c:	4619      	mov	r1, r3
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009298 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af02      	add	r7, sp, #8
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80092a6:	2205      	movs	r2, #5
 80092a8:	492b      	ldr	r1, [pc, #172]	; (8009358 <SYSVIEW_AddTask+0xc0>)
 80092aa:	68b8      	ldr	r0, [r7, #8]
 80092ac:	f002 fa22 	bl	800b6f4 <memcmp>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d04b      	beq.n	800934e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80092b6:	4b29      	ldr	r3, [pc, #164]	; (800935c <SYSVIEW_AddTask+0xc4>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b07      	cmp	r3, #7
 80092bc:	d903      	bls.n	80092c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80092be:	4828      	ldr	r0, [pc, #160]	; (8009360 <SYSVIEW_AddTask+0xc8>)
 80092c0:	f001 fe80 	bl	800afc4 <SEGGER_SYSVIEW_Warn>
    return;
 80092c4:	e044      	b.n	8009350 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80092c6:	4b25      	ldr	r3, [pc, #148]	; (800935c <SYSVIEW_AddTask+0xc4>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4926      	ldr	r1, [pc, #152]	; (8009364 <SYSVIEW_AddTask+0xcc>)
 80092cc:	4613      	mov	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	440b      	add	r3, r1
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80092da:	4b20      	ldr	r3, [pc, #128]	; (800935c <SYSVIEW_AddTask+0xc4>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	4921      	ldr	r1, [pc, #132]	; (8009364 <SYSVIEW_AddTask+0xcc>)
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	3304      	adds	r3, #4
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80092f0:	4b1a      	ldr	r3, [pc, #104]	; (800935c <SYSVIEW_AddTask+0xc4>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	491b      	ldr	r1, [pc, #108]	; (8009364 <SYSVIEW_AddTask+0xcc>)
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	3308      	adds	r3, #8
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8009306:	4b15      	ldr	r3, [pc, #84]	; (800935c <SYSVIEW_AddTask+0xc4>)
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	4916      	ldr	r1, [pc, #88]	; (8009364 <SYSVIEW_AddTask+0xcc>)
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	330c      	adds	r3, #12
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800931c:	4b0f      	ldr	r3, [pc, #60]	; (800935c <SYSVIEW_AddTask+0xc4>)
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	4910      	ldr	r1, [pc, #64]	; (8009364 <SYSVIEW_AddTask+0xcc>)
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	440b      	add	r3, r1
 800932c:	3310      	adds	r3, #16
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8009332:	4b0a      	ldr	r3, [pc, #40]	; (800935c <SYSVIEW_AddTask+0xc4>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3301      	adds	r3, #1
 8009338:	4a08      	ldr	r2, [pc, #32]	; (800935c <SYSVIEW_AddTask+0xc4>)
 800933a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f80e 	bl	8009368 <SYSVIEW_SendTaskInfo>
 800934c:	e000      	b.n	8009350 <SYSVIEW_AddTask+0xb8>
    return;
 800934e:	bf00      	nop

}
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	0800b9d8 	.word	0x0800b9d8
 800935c:	20013008 	.word	0x20013008
 8009360:	0800b9e0 	.word	0x0800b9e0
 8009364:	20012f68 	.word	0x20012f68

08009368 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8009368:	b580      	push	{r7, lr}
 800936a:	b08a      	sub	sp, #40	; 0x28
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8009376:	f107 0314 	add.w	r3, r7, #20
 800937a:	2214      	movs	r2, #20
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f002 f9d6 	bl	800b730 <memset>
  TaskInfo.TaskID     = TaskID;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8009398:	f107 0314 	add.w	r3, r7, #20
 800939c:	4618      	mov	r0, r3
 800939e:	f001 fa17 	bl	800a7d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80093a2:	bf00      	nop
 80093a4:	3728      	adds	r7, #40	; 0x28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80093b2:	4b24      	ldr	r3, [pc, #144]	; (8009444 <_DoInit+0x98>)
 80093b4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2203      	movs	r2, #3
 80093ba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2203      	movs	r2, #3
 80093c0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a20      	ldr	r2, [pc, #128]	; (8009448 <_DoInit+0x9c>)
 80093c6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a20      	ldr	r2, [pc, #128]	; (800944c <_DoInit+0xa0>)
 80093cc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a17      	ldr	r2, [pc, #92]	; (8009448 <_DoInit+0x9c>)
 80093ec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a17      	ldr	r2, [pc, #92]	; (8009450 <_DoInit+0xa4>)
 80093f2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2210      	movs	r2, #16
 80093f8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3307      	adds	r3, #7
 8009410:	4a10      	ldr	r2, [pc, #64]	; (8009454 <_DoInit+0xa8>)
 8009412:	6810      	ldr	r0, [r2, #0]
 8009414:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8009416:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a0e      	ldr	r2, [pc, #56]	; (8009458 <_DoInit+0xac>)
 800941e:	6810      	ldr	r0, [r2, #0]
 8009420:	6018      	str	r0, [r3, #0]
 8009422:	8891      	ldrh	r1, [r2, #4]
 8009424:	7992      	ldrb	r2, [r2, #6]
 8009426:	8099      	strh	r1, [r3, #4]
 8009428:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800942a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8009434:	f3bf 8f5f 	dmb	sy
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	2001300c 	.word	0x2001300c
 8009448:	0800ba30 	.word	0x0800ba30
 800944c:	200130b4 	.word	0x200130b4
 8009450:	200134b4 	.word	0x200134b4
 8009454:	0800ba3c 	.word	0x0800ba3c
 8009458:	0800ba40 	.word	0x0800ba40

0800945c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800945c:	b580      	push	{r7, lr}
 800945e:	b08c      	sub	sp, #48	; 0x30
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8009468:	4b3e      	ldr	r3, [pc, #248]	; (8009564 <SEGGER_RTT_ReadNoLock+0x108>)
 800946a:	623b      	str	r3, [r7, #32]
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <SEGGER_RTT_ReadNoLock+0x1e>
 8009476:	f7ff ff99 	bl	80093ac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4613      	mov	r3, r2
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	4413      	add	r3, r2
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	3360      	adds	r3, #96	; 0x60
 8009486:	4a37      	ldr	r2, [pc, #220]	; (8009564 <SEGGER_RTT_ReadNoLock+0x108>)
 8009488:	4413      	add	r3, r2
 800948a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800949c:	2300      	movs	r3, #0
 800949e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80094a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d92b      	bls.n	8009500 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4293      	cmp	r3, r2
 80094b8:	bf28      	it	cs
 80094ba:	4613      	movcs	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	4413      	add	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	6939      	ldr	r1, [r7, #16]
 80094cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094ce:	f002 f921 	bl	800b714 <memcpy>
    NumBytesRead += NumBytesRem;
 80094d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	4413      	add	r3, r2
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80094da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	4413      	add	r3, r2
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80094ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	4413      	add	r3, r2
 80094f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d101      	bne.n	8009500 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80094fc:	2300      	movs	r3, #0
 80094fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4293      	cmp	r3, r2
 800950e:	bf28      	it	cs
 8009510:	4613      	movcs	r3, r2
 8009512:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d019      	beq.n	800954e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	4413      	add	r3, r2
 8009522:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	6939      	ldr	r1, [r7, #16]
 8009528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800952a:	f002 f8f3 	bl	800b714 <memcpy>
    NumBytesRead += NumBytesRem;
 800952e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	4413      	add	r3, r2
 8009534:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8009536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	4413      	add	r3, r2
 800953c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	4413      	add	r3, r2
 800954c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009558:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800955c:	4618      	mov	r0, r3
 800955e:	3730      	adds	r7, #48	; 0x30
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	2001300c 	.word	0x2001300c

08009568 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8009576:	4b3d      	ldr	r3, [pc, #244]	; (800966c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009578:	61bb      	str	r3, [r7, #24]
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <SEGGER_RTT_AllocUpBuffer+0x20>
 8009584:	f7ff ff12 	bl	80093ac <_DoInit>
  SEGGER_RTT_LOCK();
 8009588:	f3ef 8311 	mrs	r3, BASEPRI
 800958c:	f04f 0120 	mov.w	r1, #32
 8009590:	f381 8811 	msr	BASEPRI, r1
 8009594:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009596:	4b35      	ldr	r3, [pc, #212]	; (800966c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009598:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800959e:	6939      	ldr	r1, [r7, #16]
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	4613      	mov	r3, r2
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	4413      	add	r3, r2
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	440b      	add	r3, r1
 80095ae:	3304      	adds	r3, #4
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	3301      	adds	r3, #1
 80095ba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	69fa      	ldr	r2, [r7, #28]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	dbeb      	blt.n	800959e <SEGGER_RTT_AllocUpBuffer+0x36>
 80095c6:	e000      	b.n	80095ca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80095c8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	69fa      	ldr	r2, [r7, #28]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	da3f      	bge.n	8009654 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80095d4:	6939      	ldr	r1, [r7, #16]
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	4613      	mov	r3, r2
 80095dc:	005b      	lsls	r3, r3, #1
 80095de:	4413      	add	r3, r2
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	440b      	add	r3, r1
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80095e8:	6939      	ldr	r1, [r7, #16]
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	4613      	mov	r3, r2
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	4413      	add	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	440b      	add	r3, r1
 80095f8:	3304      	adds	r3, #4
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80095fe:	6939      	ldr	r1, [r7, #16]
 8009600:	69fa      	ldr	r2, [r7, #28]
 8009602:	4613      	mov	r3, r2
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	4413      	add	r3, r2
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	440b      	add	r3, r1
 800960c:	3320      	adds	r3, #32
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8009612:	6939      	ldr	r1, [r7, #16]
 8009614:	69fa      	ldr	r2, [r7, #28]
 8009616:	4613      	mov	r3, r2
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	4413      	add	r3, r2
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	440b      	add	r3, r1
 8009620:	3328      	adds	r3, #40	; 0x28
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8009626:	6939      	ldr	r1, [r7, #16]
 8009628:	69fa      	ldr	r2, [r7, #28]
 800962a:	4613      	mov	r3, r2
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	4413      	add	r3, r2
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	440b      	add	r3, r1
 8009634:	3324      	adds	r3, #36	; 0x24
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800963a:	6939      	ldr	r1, [r7, #16]
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	4613      	mov	r3, r2
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	4413      	add	r3, r2
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	440b      	add	r3, r1
 8009648:	332c      	adds	r3, #44	; 0x2c
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800964e:	f3bf 8f5f 	dmb	sy
 8009652:	e002      	b.n	800965a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8009654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009658:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8009660:	69fb      	ldr	r3, [r7, #28]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3720      	adds	r7, #32
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	2001300c 	.word	0x2001300c

08009670 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800967e:	4b33      	ldr	r3, [pc, #204]	; (800974c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8009680:	61bb      	str	r3, [r7, #24]
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800968c:	f7ff fe8e 	bl	80093ac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009690:	4b2e      	ldr	r3, [pc, #184]	; (800974c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8009692:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	461a      	mov	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4293      	cmp	r3, r2
 800969e:	d24d      	bcs.n	800973c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80096a0:	f3ef 8311 	mrs	r3, BASEPRI
 80096a4:	f04f 0120 	mov.w	r1, #32
 80096a8:	f381 8811 	msr	BASEPRI, r1
 80096ac:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d031      	beq.n	8009718 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80096b4:	6979      	ldr	r1, [r7, #20]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	4613      	mov	r3, r2
 80096ba:	005b      	lsls	r3, r3, #1
 80096bc:	4413      	add	r3, r2
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	440b      	add	r3, r1
 80096c2:	3360      	adds	r3, #96	; 0x60
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80096c8:	6979      	ldr	r1, [r7, #20]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4613      	mov	r3, r2
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	4413      	add	r3, r2
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	440b      	add	r3, r1
 80096d6:	3364      	adds	r3, #100	; 0x64
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80096dc:	6979      	ldr	r1, [r7, #20]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	4613      	mov	r3, r2
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	4413      	add	r3, r2
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	440b      	add	r3, r1
 80096ea:	3368      	adds	r3, #104	; 0x68
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80096f0:	6979      	ldr	r1, [r7, #20]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4613      	mov	r3, r2
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	4413      	add	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	440b      	add	r3, r1
 80096fe:	3370      	adds	r3, #112	; 0x70
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8009704:	6979      	ldr	r1, [r7, #20]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	4613      	mov	r3, r2
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	4413      	add	r3, r2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	440b      	add	r3, r1
 8009712:	336c      	adds	r3, #108	; 0x6c
 8009714:	2200      	movs	r2, #0
 8009716:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8009718:	6979      	ldr	r1, [r7, #20]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4613      	mov	r3, r2
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	4413      	add	r3, r2
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	440b      	add	r3, r1
 8009726:	3374      	adds	r3, #116	; 0x74
 8009728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800972a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800972c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009736:	2300      	movs	r3, #0
 8009738:	61fb      	str	r3, [r7, #28]
 800973a:	e002      	b.n	8009742 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800973c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009740:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8009742:	69fb      	ldr	r3, [r7, #28]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3720      	adds	r7, #32
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	2001300c 	.word	0x2001300c

08009750 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8009760:	e002      	b.n	8009768 <_EncodeStr+0x18>
    Len++;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	3301      	adds	r3, #1
 8009766:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	4413      	add	r3, r2
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1f6      	bne.n	8009762 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	429a      	cmp	r2, r3
 800977a:	d901      	bls.n	8009780 <_EncodeStr+0x30>
    Len = Limit;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2bfe      	cmp	r3, #254	; 0xfe
 8009784:	d806      	bhi.n	8009794 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	60fa      	str	r2, [r7, #12]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	b2d2      	uxtb	r2, r2
 8009790:	701a      	strb	r2, [r3, #0]
 8009792:	e011      	b.n	80097b8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	1c5a      	adds	r2, r3, #1
 8009798:	60fa      	str	r2, [r7, #12]
 800979a:	22ff      	movs	r2, #255	; 0xff
 800979c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	60fa      	str	r2, [r7, #12]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	0a19      	lsrs	r1, r3, #8
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	60fa      	str	r2, [r7, #12]
 80097b4:	b2ca      	uxtb	r2, r1
 80097b6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80097bc:	e00a      	b.n	80097d4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	1c53      	adds	r3, r2, #1
 80097c2:	60bb      	str	r3, [r7, #8]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	1c59      	adds	r1, r3, #1
 80097c8:	60f9      	str	r1, [r7, #12]
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	701a      	strb	r2, [r3, #0]
    n++;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	3301      	adds	r3, #1
 80097d2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d3f0      	bcc.n	80097be <_EncodeStr+0x6e>
  }
  return pPayload;
 80097dc:	68fb      	ldr	r3, [r7, #12]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3304      	adds	r3, #4
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
	...

08009804 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800980a:	4b36      	ldr	r3, [pc, #216]	; (80098e4 <_HandleIncomingPacket+0xe0>)
 800980c:	7e1b      	ldrb	r3, [r3, #24]
 800980e:	4618      	mov	r0, r3
 8009810:	1cfb      	adds	r3, r7, #3
 8009812:	2201      	movs	r2, #1
 8009814:	4619      	mov	r1, r3
 8009816:	f7ff fe21 	bl	800945c <SEGGER_RTT_ReadNoLock>
 800981a:	4603      	mov	r3, r0
 800981c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	dd54      	ble.n	80098ce <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8009824:	78fb      	ldrb	r3, [r7, #3]
 8009826:	2b80      	cmp	r3, #128	; 0x80
 8009828:	d032      	beq.n	8009890 <_HandleIncomingPacket+0x8c>
 800982a:	2b80      	cmp	r3, #128	; 0x80
 800982c:	dc42      	bgt.n	80098b4 <_HandleIncomingPacket+0xb0>
 800982e:	2b07      	cmp	r3, #7
 8009830:	dc16      	bgt.n	8009860 <_HandleIncomingPacket+0x5c>
 8009832:	2b00      	cmp	r3, #0
 8009834:	dd3e      	ble.n	80098b4 <_HandleIncomingPacket+0xb0>
 8009836:	3b01      	subs	r3, #1
 8009838:	2b06      	cmp	r3, #6
 800983a:	d83b      	bhi.n	80098b4 <_HandleIncomingPacket+0xb0>
 800983c:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <_HandleIncomingPacket+0x40>)
 800983e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009842:	bf00      	nop
 8009844:	08009867 	.word	0x08009867
 8009848:	0800986d 	.word	0x0800986d
 800984c:	08009873 	.word	0x08009873
 8009850:	08009879 	.word	0x08009879
 8009854:	0800987f 	.word	0x0800987f
 8009858:	08009885 	.word	0x08009885
 800985c:	0800988b 	.word	0x0800988b
 8009860:	2b7f      	cmp	r3, #127	; 0x7f
 8009862:	d036      	beq.n	80098d2 <_HandleIncomingPacket+0xce>
 8009864:	e026      	b.n	80098b4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8009866:	f000 fe39 	bl	800a4dc <SEGGER_SYSVIEW_Start>
      break;
 800986a:	e037      	b.n	80098dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800986c:	f000 fef0 	bl	800a650 <SEGGER_SYSVIEW_Stop>
      break;
 8009870:	e034      	b.n	80098dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8009872:	f001 f8c9 	bl	800aa08 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8009876:	e031      	b.n	80098dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009878:	f001 f88e 	bl	800a998 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800987c:	e02e      	b.n	80098dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800987e:	f000 ff0d 	bl	800a69c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8009882:	e02b      	b.n	80098dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009884:	f001 fb4c 	bl	800af20 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009888:	e028      	b.n	80098dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800988a:	f001 fb2b 	bl	800aee4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800988e:	e025      	b.n	80098dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009890:	4b14      	ldr	r3, [pc, #80]	; (80098e4 <_HandleIncomingPacket+0xe0>)
 8009892:	7e1b      	ldrb	r3, [r3, #24]
 8009894:	4618      	mov	r0, r3
 8009896:	1cfb      	adds	r3, r7, #3
 8009898:	2201      	movs	r2, #1
 800989a:	4619      	mov	r1, r3
 800989c:	f7ff fdde 	bl	800945c <SEGGER_RTT_ReadNoLock>
 80098a0:	4603      	mov	r3, r0
 80098a2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	dd15      	ble.n	80098d6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 fa99 	bl	800ade4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80098b2:	e010      	b.n	80098d6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	b25b      	sxtb	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	da0e      	bge.n	80098da <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80098bc:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <_HandleIncomingPacket+0xe0>)
 80098be:	7e1b      	ldrb	r3, [r3, #24]
 80098c0:	4618      	mov	r0, r3
 80098c2:	1cfb      	adds	r3, r7, #3
 80098c4:	2201      	movs	r2, #1
 80098c6:	4619      	mov	r1, r3
 80098c8:	f7ff fdc8 	bl	800945c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80098cc:	e005      	b.n	80098da <_HandleIncomingPacket+0xd6>
    }
  }
 80098ce:	bf00      	nop
 80098d0:	e004      	b.n	80098dc <_HandleIncomingPacket+0xd8>
      break;
 80098d2:	bf00      	nop
 80098d4:	e002      	b.n	80098dc <_HandleIncomingPacket+0xd8>
      break;
 80098d6:	bf00      	nop
 80098d8:	e000      	b.n	80098dc <_HandleIncomingPacket+0xd8>
      break;
 80098da:	bf00      	nop
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	200144cc 	.word	0x200144cc

080098e8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08c      	sub	sp, #48	; 0x30
 80098ec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80098ee:	2301      	movs	r3, #1
 80098f0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80098f2:	1d3b      	adds	r3, r7, #4
 80098f4:	3301      	adds	r3, #1
 80098f6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098fc:	4b31      	ldr	r3, [pc, #196]	; (80099c4 <_TrySendOverflowPacket+0xdc>)
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	62bb      	str	r3, [r7, #40]	; 0x28
 8009902:	e00b      	b.n	800991c <_TrySendOverflowPacket+0x34>
 8009904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009906:	b2da      	uxtb	r2, r3
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	1c59      	adds	r1, r3, #1
 800990c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800990e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	09db      	lsrs	r3, r3, #7
 800991a:	62bb      	str	r3, [r7, #40]	; 0x28
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	2b7f      	cmp	r3, #127	; 0x7f
 8009920:	d8f0      	bhi.n	8009904 <_TrySendOverflowPacket+0x1c>
 8009922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800992a:	b2d2      	uxtb	r2, r2
 800992c:	701a      	strb	r2, [r3, #0]
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009932:	4b25      	ldr	r3, [pc, #148]	; (80099c8 <_TrySendOverflowPacket+0xe0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009938:	4b22      	ldr	r3, [pc, #136]	; (80099c4 <_TrySendOverflowPacket+0xdc>)
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	69ba      	ldr	r2, [r7, #24]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	627b      	str	r3, [r7, #36]	; 0x24
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	623b      	str	r3, [r7, #32]
 800994a:	e00b      	b.n	8009964 <_TrySendOverflowPacket+0x7c>
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	b2da      	uxtb	r2, r3
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	1c59      	adds	r1, r3, #1
 8009954:	6279      	str	r1, [r7, #36]	; 0x24
 8009956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800995a:	b2d2      	uxtb	r2, r2
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	09db      	lsrs	r3, r3, #7
 8009962:	623b      	str	r3, [r7, #32]
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	2b7f      	cmp	r3, #127	; 0x7f
 8009968:	d8f0      	bhi.n	800994c <_TrySendOverflowPacket+0x64>
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	627a      	str	r2, [r7, #36]	; 0x24
 8009970:	6a3a      	ldr	r2, [r7, #32]
 8009972:	b2d2      	uxtb	r2, r2
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800997a:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <_TrySendOverflowPacket+0xdc>)
 800997c:	785b      	ldrb	r3, [r3, #1]
 800997e:	4618      	mov	r0, r3
 8009980:	1d3b      	adds	r3, r7, #4
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	461a      	mov	r2, r3
 8009988:	1d3b      	adds	r3, r7, #4
 800998a:	4619      	mov	r1, r3
 800998c:	f7f6 fc28 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009990:	4603      	mov	r3, r0
 8009992:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d009      	beq.n	80099ae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800999a:	4a0a      	ldr	r2, [pc, #40]	; (80099c4 <_TrySendOverflowPacket+0xdc>)
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80099a0:	4b08      	ldr	r3, [pc, #32]	; (80099c4 <_TrySendOverflowPacket+0xdc>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <_TrySendOverflowPacket+0xdc>)
 80099aa:	701a      	strb	r2, [r3, #0]
 80099ac:	e004      	b.n	80099b8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80099ae:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <_TrySendOverflowPacket+0xdc>)
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	3301      	adds	r3, #1
 80099b4:	4a03      	ldr	r2, [pc, #12]	; (80099c4 <_TrySendOverflowPacket+0xdc>)
 80099b6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80099b8:	693b      	ldr	r3, [r7, #16]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3730      	adds	r7, #48	; 0x30
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	200144cc 	.word	0x200144cc
 80099c8:	e0001004 	.word	0xe0001004

080099cc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08a      	sub	sp, #40	; 0x28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80099d8:	4b6c      	ldr	r3, [pc, #432]	; (8009b8c <_SendPacket+0x1c0>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d010      	beq.n	8009a02 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80099e0:	4b6a      	ldr	r3, [pc, #424]	; (8009b8c <_SendPacket+0x1c0>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 80a3 	beq.w	8009b30 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80099ea:	4b68      	ldr	r3, [pc, #416]	; (8009b8c <_SendPacket+0x1c0>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d109      	bne.n	8009a06 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80099f2:	f7ff ff79 	bl	80098e8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80099f6:	4b65      	ldr	r3, [pc, #404]	; (8009b8c <_SendPacket+0x1c0>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	f040 809a 	bne.w	8009b34 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8009a00:	e001      	b.n	8009a06 <_SendPacket+0x3a>
    goto Send;
 8009a02:	bf00      	nop
 8009a04:	e000      	b.n	8009a08 <_SendPacket+0x3c>
Send:
 8009a06:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b1f      	cmp	r3, #31
 8009a0c:	d809      	bhi.n	8009a22 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8009a0e:	4b5f      	ldr	r3, [pc, #380]	; (8009b8c <_SendPacket+0x1c0>)
 8009a10:	69da      	ldr	r2, [r3, #28]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	fa22 f303 	lsr.w	r3, r2, r3
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f040 808b 	bne.w	8009b38 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b17      	cmp	r3, #23
 8009a26:	d807      	bhi.n	8009a38 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	60fb      	str	r3, [r7, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	e03d      	b.n	8009ab4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	2b7f      	cmp	r3, #127	; 0x7f
 8009a44:	d912      	bls.n	8009a6c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	09da      	lsrs	r2, r3, #7
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	b2d2      	uxtb	r2, r2
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	3a01      	subs	r2, #1
 8009a5e:	60fa      	str	r2, [r7, #12]
 8009a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	701a      	strb	r2, [r3, #0]
 8009a6a:	e006      	b.n	8009a7a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	60fb      	str	r3, [r7, #12]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8009a7e:	d912      	bls.n	8009aa6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	09da      	lsrs	r2, r3, #7
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	60fb      	str	r3, [r7, #12]
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	3a01      	subs	r2, #1
 8009a98:	60fa      	str	r2, [r7, #12]
 8009a9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	701a      	strb	r2, [r3, #0]
 8009aa4:	e006      	b.n	8009ab4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	b2da      	uxtb	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009ab4:	4b36      	ldr	r3, [pc, #216]	; (8009b90 <_SendPacket+0x1c4>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009aba:	4b34      	ldr	r3, [pc, #208]	; (8009b8c <_SendPacket+0x1c0>)
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	623b      	str	r3, [r7, #32]
 8009acc:	e00b      	b.n	8009ae6 <_SendPacket+0x11a>
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	1c59      	adds	r1, r3, #1
 8009ad6:	6279      	str	r1, [r7, #36]	; 0x24
 8009ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009adc:	b2d2      	uxtb	r2, r2
 8009ade:	701a      	strb	r2, [r3, #0]
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	09db      	lsrs	r3, r3, #7
 8009ae4:	623b      	str	r3, [r7, #32]
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8009aea:	d8f0      	bhi.n	8009ace <_SendPacket+0x102>
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	1c5a      	adds	r2, r3, #1
 8009af0:	627a      	str	r2, [r7, #36]	; 0x24
 8009af2:	6a3a      	ldr	r2, [r7, #32]
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8009afc:	4b23      	ldr	r3, [pc, #140]	; (8009b8c <_SendPacket+0x1c0>)
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	4618      	mov	r0, r3
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	68f9      	ldr	r1, [r7, #12]
 8009b0c:	f7f6 fb68 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009b10:	4603      	mov	r3, r0
 8009b12:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009b1a:	4a1c      	ldr	r2, [pc, #112]	; (8009b8c <_SendPacket+0x1c0>)
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	60d3      	str	r3, [r2, #12]
 8009b20:	e00b      	b.n	8009b3a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009b22:	4b1a      	ldr	r3, [pc, #104]	; (8009b8c <_SendPacket+0x1c0>)
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	3301      	adds	r3, #1
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	4b18      	ldr	r3, [pc, #96]	; (8009b8c <_SendPacket+0x1c0>)
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	e004      	b.n	8009b3a <_SendPacket+0x16e>
    goto SendDone;
 8009b30:	bf00      	nop
 8009b32:	e002      	b.n	8009b3a <_SendPacket+0x16e>
      goto SendDone;
 8009b34:	bf00      	nop
 8009b36:	e000      	b.n	8009b3a <_SendPacket+0x16e>
      goto SendDone;
 8009b38:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8009b3a:	4b14      	ldr	r3, [pc, #80]	; (8009b8c <_SendPacket+0x1c0>)
 8009b3c:	7e1b      	ldrb	r3, [r3, #24]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4a14      	ldr	r2, [pc, #80]	; (8009b94 <_SendPacket+0x1c8>)
 8009b42:	460b      	mov	r3, r1
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	440b      	add	r3, r1
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	4413      	add	r3, r2
 8009b4c:	336c      	adds	r3, #108	; 0x6c
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	4b0e      	ldr	r3, [pc, #56]	; (8009b8c <_SendPacket+0x1c0>)
 8009b52:	7e1b      	ldrb	r3, [r3, #24]
 8009b54:	4618      	mov	r0, r3
 8009b56:	490f      	ldr	r1, [pc, #60]	; (8009b94 <_SendPacket+0x1c8>)
 8009b58:	4603      	mov	r3, r0
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	4403      	add	r3, r0
 8009b5e:	00db      	lsls	r3, r3, #3
 8009b60:	440b      	add	r3, r1
 8009b62:	3370      	adds	r3, #112	; 0x70
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d00b      	beq.n	8009b82 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009b6a:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <_SendPacket+0x1c0>)
 8009b6c:	789b      	ldrb	r3, [r3, #2]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d107      	bne.n	8009b82 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8009b72:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <_SendPacket+0x1c0>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009b78:	f7ff fe44 	bl	8009804 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009b7c:	4b03      	ldr	r3, [pc, #12]	; (8009b8c <_SendPacket+0x1c0>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8009b82:	bf00      	nop
 8009b84:	3728      	adds	r7, #40	; 0x28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	200144cc 	.word	0x200144cc
 8009b90:	e0001004 	.word	0xe0001004
 8009b94:	2001300c 	.word	0x2001300c

08009b98 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	3301      	adds	r3, #1
 8009bae:	2b80      	cmp	r3, #128	; 0x80
 8009bb0:	d80a      	bhi.n	8009bc8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	1c59      	adds	r1, r3, #1
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6051      	str	r1, [r2, #4]
 8009bbc:	78fa      	ldrb	r2, [r7, #3]
 8009bbe:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	2b80      	cmp	r3, #128	; 0x80
 8009bce:	d15a      	bne.n	8009c86 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	691a      	ldr	r2, [r3, #16]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	b2d2      	uxtb	r2, r2
 8009bda:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	627b      	str	r3, [r7, #36]	; 0x24
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	623b      	str	r3, [r7, #32]
 8009bf0:	e00b      	b.n	8009c0a <_StoreChar+0x72>
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	1c59      	adds	r1, r3, #1
 8009bfa:	6279      	str	r1, [r7, #36]	; 0x24
 8009bfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c00:	b2d2      	uxtb	r2, r2
 8009c02:	701a      	strb	r2, [r3, #0]
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	09db      	lsrs	r3, r3, #7
 8009c08:	623b      	str	r3, [r7, #32]
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8009c0e:	d8f0      	bhi.n	8009bf2 <_StoreChar+0x5a>
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	627a      	str	r2, [r7, #36]	; 0x24
 8009c16:	6a3a      	ldr	r2, [r7, #32]
 8009c18:	b2d2      	uxtb	r2, r2
 8009c1a:	701a      	strb	r2, [r3, #0]
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	61fb      	str	r3, [r7, #28]
 8009c24:	2300      	movs	r3, #0
 8009c26:	61bb      	str	r3, [r7, #24]
 8009c28:	e00b      	b.n	8009c42 <_StoreChar+0xaa>
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	1c59      	adds	r1, r3, #1
 8009c32:	61f9      	str	r1, [r7, #28]
 8009c34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c38:	b2d2      	uxtb	r2, r2
 8009c3a:	701a      	strb	r2, [r3, #0]
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	09db      	lsrs	r3, r3, #7
 8009c40:	61bb      	str	r3, [r7, #24]
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	2b7f      	cmp	r3, #127	; 0x7f
 8009c46:	d8f0      	bhi.n	8009c2a <_StoreChar+0x92>
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	61fa      	str	r2, [r7, #28]
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	b2d2      	uxtb	r2, r2
 8009c52:	701a      	strb	r2, [r3, #0]
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	221a      	movs	r2, #26
 8009c5e:	6939      	ldr	r1, [r7, #16]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff feb3 	bl	80099cc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff fdbd 	bl	80097ea <_PreparePacket>
 8009c70:	4602      	mov	r2, r0
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	611a      	str	r2, [r3, #16]
  }
}
 8009c86:	bf00      	nop
 8009c88:	3728      	adds	r7, #40	; 0x28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08a      	sub	sp, #40	; 0x28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8009caa:	e007      	b.n	8009cbc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8009cac:	6a3a      	ldr	r2, [r7, #32]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb4:	623b      	str	r3, [r7, #32]
    Width++;
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8009cbc:	6a3a      	ldr	r2, [r7, #32]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d2f3      	bcs.n	8009cac <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d901      	bls.n	8009cd0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d11f      	bne.n	8009d1a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01c      	beq.n	8009d1a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce2:	f003 0302 	and.w	r3, r3, #2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d005      	beq.n	8009cf6 <_PrintUnsigned+0x66>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d102      	bne.n	8009cf6 <_PrintUnsigned+0x66>
        c = '0';
 8009cf0:	2330      	movs	r3, #48	; 0x30
 8009cf2:	76fb      	strb	r3, [r7, #27]
 8009cf4:	e001      	b.n	8009cfa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8009cf6:	2320      	movs	r3, #32
 8009cf8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009cfa:	e007      	b.n	8009d0c <_PrintUnsigned+0x7c>
        FieldWidth--;
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8009d02:	7efb      	ldrb	r3, [r7, #27]
 8009d04:	4619      	mov	r1, r3
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f7ff ff46 	bl	8009b98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <_PrintUnsigned+0x8a>
 8009d12:	69fa      	ldr	r2, [r7, #28]
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d3f0      	bcc.n	8009cfc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d903      	bls.n	8009d28 <_PrintUnsigned+0x98>
      NumDigits--;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	603b      	str	r3, [r7, #0]
 8009d26:	e009      	b.n	8009d3c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d30:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d200      	bcs.n	8009d3c <_PrintUnsigned+0xac>
        break;
 8009d3a:	e005      	b.n	8009d48 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	fb02 f303 	mul.w	r3, r2, r3
 8009d44:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8009d46:	e7e8      	b.n	8009d1a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d50:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d56:	fb02 f303 	mul.w	r3, r2, r3
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8009d60:	4a15      	ldr	r2, [pc, #84]	; (8009db8 <_PrintUnsigned+0x128>)
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	4413      	add	r3, r2
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f7ff ff14 	bl	8009b98 <_StoreChar>
    Digit /= Base;
 8009d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d78:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e3      	bne.n	8009d48 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8009d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d011      	beq.n	8009dae <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00e      	beq.n	8009dae <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009d90:	e006      	b.n	8009da0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d94:	3b01      	subs	r3, #1
 8009d96:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8009d98:	2120      	movs	r1, #32
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f7ff fefc 	bl	8009b98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <_PrintUnsigned+0x11e>
 8009da6:	69fa      	ldr	r2, [r7, #28]
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d3f1      	bcc.n	8009d92 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8009dae:	bf00      	nop
 8009db0:	3728      	adds	r7, #40	; 0x28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	0800ba7c 	.word	0x0800ba7c

08009dbc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	bfb8      	it	lt
 8009dd0:	425b      	neglt	r3, r3
 8009dd2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8009dd8:	e007      	b.n	8009dea <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	fb92 f3f3 	sdiv	r3, r2, r3
 8009de2:	613b      	str	r3, [r7, #16]
    Width++;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	3301      	adds	r3, #1
 8009de8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	daf3      	bge.n	8009dda <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d901      	bls.n	8009dfe <_PrintInt+0x42>
    Width = NumDigits;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00a      	beq.n	8009e1a <_PrintInt+0x5e>
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	db04      	blt.n	8009e14 <_PrintInt+0x58>
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <_PrintInt+0x5e>
    FieldWidth--;
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <_PrintInt+0x6e>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d016      	beq.n	8009e58 <_PrintInt+0x9c>
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d111      	bne.n	8009e58 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00e      	beq.n	8009e58 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009e3a:	e006      	b.n	8009e4a <_PrintInt+0x8e>
        FieldWidth--;
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8009e42:	2120      	movs	r1, #32
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7ff fea7 	bl	8009b98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <_PrintInt+0x9c>
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d3f1      	bcc.n	8009e3c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	da07      	bge.n	8009e6e <_PrintInt+0xb2>
    v = -v;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	425b      	negs	r3, r3
 8009e62:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8009e64:	212d      	movs	r1, #45	; 0x2d
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f7ff fe96 	bl	8009b98 <_StoreChar>
 8009e6c:	e008      	b.n	8009e80 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	f003 0304 	and.w	r3, r3, #4
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8009e78:	212b      	movs	r1, #43	; 0x2b
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7ff fe8c 	bl	8009b98 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d019      	beq.n	8009ebe <_PrintInt+0x102>
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d114      	bne.n	8009ebe <_PrintInt+0x102>
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d111      	bne.n	8009ebe <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00e      	beq.n	8009ebe <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009ea0:	e006      	b.n	8009eb0 <_PrintInt+0xf4>
        FieldWidth--;
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8009ea8:	2130      	movs	r1, #48	; 0x30
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f7ff fe74 	bl	8009b98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <_PrintInt+0x102>
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d3f1      	bcc.n	8009ea2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	9301      	str	r3, [sp, #4]
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f7ff fedf 	bl	8009c90 <_PrintUnsigned>
}
 8009ed2:	bf00      	nop
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b098      	sub	sp, #96	; 0x60
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8009eec:	f04f 0120 	mov.w	r1, #32
 8009ef0:	f381 8811 	msr	BASEPRI, r1
 8009ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8009ef6:	48b7      	ldr	r0, [pc, #732]	; (800a1d4 <_VPrintTarget+0x2f8>)
 8009ef8:	f7ff fc77 	bl	80097ea <_PreparePacket>
 8009efc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8009efe:	4bb5      	ldr	r3, [pc, #724]	; (800a1d4 <_VPrintTarget+0x2f8>)
 8009f00:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8009f02:	2300      	movs	r3, #0
 8009f04:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8009f22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 8183 	beq.w	800a232 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8009f2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f30:	2b25      	cmp	r3, #37	; 0x25
 8009f32:	f040 8170 	bne.w	800a216 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8009f36:	2300      	movs	r3, #0
 8009f38:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8009f46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f4a:	3b23      	subs	r3, #35	; 0x23
 8009f4c:	2b0d      	cmp	r3, #13
 8009f4e:	d83f      	bhi.n	8009fd0 <_VPrintTarget+0xf4>
 8009f50:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <_VPrintTarget+0x7c>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	08009fc1 	.word	0x08009fc1
 8009f5c:	08009fd1 	.word	0x08009fd1
 8009f60:	08009fd1 	.word	0x08009fd1
 8009f64:	08009fd1 	.word	0x08009fd1
 8009f68:	08009fd1 	.word	0x08009fd1
 8009f6c:	08009fd1 	.word	0x08009fd1
 8009f70:	08009fd1 	.word	0x08009fd1
 8009f74:	08009fd1 	.word	0x08009fd1
 8009f78:	08009fb1 	.word	0x08009fb1
 8009f7c:	08009fd1 	.word	0x08009fd1
 8009f80:	08009f91 	.word	0x08009f91
 8009f84:	08009fd1 	.word	0x08009fd1
 8009f88:	08009fd1 	.word	0x08009fd1
 8009f8c:	08009fa1 	.word	0x08009fa1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8009f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f92:	f043 0301 	orr.w	r3, r3, #1
 8009f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	e01a      	b.n	8009fd6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8009fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fa2:	f043 0302 	orr.w	r3, r3, #2
 8009fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	3301      	adds	r3, #1
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	e012      	b.n	8009fd6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8009fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fb2:	f043 0304 	orr.w	r3, r3, #4
 8009fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	60fb      	str	r3, [r7, #12]
 8009fbe:	e00a      	b.n	8009fd6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8009fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fc2:	f043 0308 	orr.w	r3, r3, #8
 8009fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	60fb      	str	r3, [r7, #12]
 8009fce:	e002      	b.n	8009fd6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8009fd4:	bf00      	nop
        }
      } while (v);
 8009fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1b0      	bne.n	8009f3e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8009fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fec:	2b2f      	cmp	r3, #47	; 0x2f
 8009fee:	d912      	bls.n	800a016 <_VPrintTarget+0x13a>
 8009ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ff4:	2b39      	cmp	r3, #57	; 0x39
 8009ff6:	d80e      	bhi.n	800a016 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8009ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	461a      	mov	r2, r3
 800a00a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a00e:	4413      	add	r3, r2
 800a010:	3b30      	subs	r3, #48	; 0x30
 800a012:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800a014:	e7e4      	b.n	8009fe0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800a016:	2300      	movs	r3, #0
 800a018:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800a022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a026:	2b2e      	cmp	r3, #46	; 0x2e
 800a028:	d11d      	bne.n	800a066 <_VPrintTarget+0x18a>
        sFormat++;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3301      	adds	r3, #1
 800a02e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800a038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a03c:	2b2f      	cmp	r3, #47	; 0x2f
 800a03e:	d912      	bls.n	800a066 <_VPrintTarget+0x18a>
 800a040:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a044:	2b39      	cmp	r3, #57	; 0x39
 800a046:	d80e      	bhi.n	800a066 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3301      	adds	r3, #1
 800a04c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800a04e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	005b      	lsls	r3, r3, #1
 800a058:	461a      	mov	r2, r3
 800a05a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a05e:	4413      	add	r3, r2
 800a060:	3b30      	subs	r3, #48	; 0x30
 800a062:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800a064:	e7e4      	b.n	800a030 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800a06e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a072:	2b6c      	cmp	r3, #108	; 0x6c
 800a074:	d003      	beq.n	800a07e <_VPrintTarget+0x1a2>
 800a076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a07a:	2b68      	cmp	r3, #104	; 0x68
 800a07c:	d107      	bne.n	800a08e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3301      	adds	r3, #1
 800a08a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800a08c:	e7ef      	b.n	800a06e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800a08e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a092:	2b25      	cmp	r3, #37	; 0x25
 800a094:	f000 80b3 	beq.w	800a1fe <_VPrintTarget+0x322>
 800a098:	2b25      	cmp	r3, #37	; 0x25
 800a09a:	f2c0 80b7 	blt.w	800a20c <_VPrintTarget+0x330>
 800a09e:	2b78      	cmp	r3, #120	; 0x78
 800a0a0:	f300 80b4 	bgt.w	800a20c <_VPrintTarget+0x330>
 800a0a4:	2b58      	cmp	r3, #88	; 0x58
 800a0a6:	f2c0 80b1 	blt.w	800a20c <_VPrintTarget+0x330>
 800a0aa:	3b58      	subs	r3, #88	; 0x58
 800a0ac:	2b20      	cmp	r3, #32
 800a0ae:	f200 80ad 	bhi.w	800a20c <_VPrintTarget+0x330>
 800a0b2:	a201      	add	r2, pc, #4	; (adr r2, 800a0b8 <_VPrintTarget+0x1dc>)
 800a0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b8:	0800a1af 	.word	0x0800a1af
 800a0bc:	0800a20d 	.word	0x0800a20d
 800a0c0:	0800a20d 	.word	0x0800a20d
 800a0c4:	0800a20d 	.word	0x0800a20d
 800a0c8:	0800a20d 	.word	0x0800a20d
 800a0cc:	0800a20d 	.word	0x0800a20d
 800a0d0:	0800a20d 	.word	0x0800a20d
 800a0d4:	0800a20d 	.word	0x0800a20d
 800a0d8:	0800a20d 	.word	0x0800a20d
 800a0dc:	0800a20d 	.word	0x0800a20d
 800a0e0:	0800a20d 	.word	0x0800a20d
 800a0e4:	0800a13d 	.word	0x0800a13d
 800a0e8:	0800a163 	.word	0x0800a163
 800a0ec:	0800a20d 	.word	0x0800a20d
 800a0f0:	0800a20d 	.word	0x0800a20d
 800a0f4:	0800a20d 	.word	0x0800a20d
 800a0f8:	0800a20d 	.word	0x0800a20d
 800a0fc:	0800a20d 	.word	0x0800a20d
 800a100:	0800a20d 	.word	0x0800a20d
 800a104:	0800a20d 	.word	0x0800a20d
 800a108:	0800a20d 	.word	0x0800a20d
 800a10c:	0800a20d 	.word	0x0800a20d
 800a110:	0800a20d 	.word	0x0800a20d
 800a114:	0800a20d 	.word	0x0800a20d
 800a118:	0800a1d9 	.word	0x0800a1d9
 800a11c:	0800a20d 	.word	0x0800a20d
 800a120:	0800a20d 	.word	0x0800a20d
 800a124:	0800a20d 	.word	0x0800a20d
 800a128:	0800a20d 	.word	0x0800a20d
 800a12c:	0800a189 	.word	0x0800a189
 800a130:	0800a20d 	.word	0x0800a20d
 800a134:	0800a20d 	.word	0x0800a20d
 800a138:	0800a1af 	.word	0x0800a1af
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	1d19      	adds	r1, r3, #4
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6011      	str	r1, [r2, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800a14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a14c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800a150:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a154:	f107 0314 	add.w	r3, r7, #20
 800a158:	4611      	mov	r1, r2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7ff fd1c 	bl	8009b98 <_StoreChar>
        break;
 800a160:	e055      	b.n	800a20e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	1d19      	adds	r1, r3, #4
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	6011      	str	r1, [r2, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800a170:	f107 0014 	add.w	r0, r7, #20
 800a174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a17e:	220a      	movs	r2, #10
 800a180:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a182:	f7ff fe1b 	bl	8009dbc <_PrintInt>
        break;
 800a186:	e042      	b.n	800a20e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	1d19      	adds	r1, r3, #4
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	6011      	str	r1, [r2, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800a196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a198:	f107 0014 	add.w	r0, r7, #20
 800a19c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a19e:	9301      	str	r3, [sp, #4]
 800a1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a6:	220a      	movs	r2, #10
 800a1a8:	f7ff fd72 	bl	8009c90 <_PrintUnsigned>
        break;
 800a1ac:	e02f      	b.n	800a20e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	1d19      	adds	r1, r3, #4
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6011      	str	r1, [r2, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800a1bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1be:	f107 0014 	add.w	r0, r7, #20
 800a1c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1cc:	2210      	movs	r2, #16
 800a1ce:	f7ff fd5f 	bl	8009c90 <_PrintUnsigned>
        break;
 800a1d2:	e01c      	b.n	800a20e <_VPrintTarget+0x332>
 800a1d4:	200144fc 	.word	0x200144fc
      case 'p':
        v = va_arg(*pParamList, int);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	1d19      	adds	r1, r3, #4
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	6011      	str	r1, [r2, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800a1e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1e8:	f107 0014 	add.w	r0, r7, #20
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	2308      	movs	r3, #8
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2308      	movs	r3, #8
 800a1f6:	2210      	movs	r2, #16
 800a1f8:	f7ff fd4a 	bl	8009c90 <_PrintUnsigned>
        break;
 800a1fc:	e007      	b.n	800a20e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800a1fe:	f107 0314 	add.w	r3, r7, #20
 800a202:	2125      	movs	r1, #37	; 0x25
 800a204:	4618      	mov	r0, r3
 800a206:	f7ff fcc7 	bl	8009b98 <_StoreChar>
        break;
 800a20a:	e000      	b.n	800a20e <_VPrintTarget+0x332>
      default:
        break;
 800a20c:	bf00      	nop
      }
      sFormat++;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3301      	adds	r3, #1
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	e007      	b.n	800a226 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800a216:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a21a:	f107 0314 	add.w	r3, r7, #20
 800a21e:	4611      	mov	r1, r2
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff fcb9 	bl	8009b98 <_StoreChar>
    }
  } while (*sFormat);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f47f ae72 	bne.w	8009f14 <_VPrintTarget+0x38>
 800a230:	e000      	b.n	800a234 <_VPrintTarget+0x358>
      break;
 800a232:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	2b00      	cmp	r3, #0
 800a238:	d041      	beq.n	800a2be <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800a23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	b2d2      	uxtb	r2, r2
 800a240:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	643b      	str	r3, [r7, #64]	; 0x40
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a24a:	e00b      	b.n	800a264 <_VPrintTarget+0x388>
 800a24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a252:	1c59      	adds	r1, r3, #1
 800a254:	6439      	str	r1, [r7, #64]	; 0x40
 800a256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a25a:	b2d2      	uxtb	r2, r2
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a260:	09db      	lsrs	r3, r3, #7
 800a262:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a266:	2b7f      	cmp	r3, #127	; 0x7f
 800a268:	d8f0      	bhi.n	800a24c <_VPrintTarget+0x370>
 800a26a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	643a      	str	r2, [r7, #64]	; 0x40
 800a270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a272:	b2d2      	uxtb	r2, r2
 800a274:	701a      	strb	r2, [r3, #0]
 800a276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a278:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a27e:	2300      	movs	r3, #0
 800a280:	637b      	str	r3, [r7, #52]	; 0x34
 800a282:	e00b      	b.n	800a29c <_VPrintTarget+0x3c0>
 800a284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a286:	b2da      	uxtb	r2, r3
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	1c59      	adds	r1, r3, #1
 800a28c:	63b9      	str	r1, [r7, #56]	; 0x38
 800a28e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a292:	b2d2      	uxtb	r2, r2
 800a294:	701a      	strb	r2, [r3, #0]
 800a296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a298:	09db      	lsrs	r3, r3, #7
 800a29a:	637b      	str	r3, [r7, #52]	; 0x34
 800a29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29e:	2b7f      	cmp	r3, #127	; 0x7f
 800a2a0:	d8f0      	bhi.n	800a284 <_VPrintTarget+0x3a8>
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	63ba      	str	r2, [r7, #56]	; 0x38
 800a2a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	69b9      	ldr	r1, [r7, #24]
 800a2b6:	221a      	movs	r2, #26
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff fb87 	bl	80099cc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800a2c4:	bf00      	nop
 800a2c6:	3758      	adds	r7, #88	; 0x58
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2e0:	4917      	ldr	r1, [pc, #92]	; (800a340 <SEGGER_SYSVIEW_Init+0x74>)
 800a2e2:	4818      	ldr	r0, [pc, #96]	; (800a344 <SEGGER_SYSVIEW_Init+0x78>)
 800a2e4:	f7ff f940 	bl	8009568 <SEGGER_RTT_AllocUpBuffer>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	4b16      	ldr	r3, [pc, #88]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a2ee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800a2f0:	4b15      	ldr	r3, [pc, #84]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a2f2:	785a      	ldrb	r2, [r3, #1]
 800a2f4:	4b14      	ldr	r3, [pc, #80]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a2f6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a2f8:	4b13      	ldr	r3, [pc, #76]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a2fa:	7e1b      	ldrb	r3, [r3, #24]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	2300      	movs	r3, #0
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	2308      	movs	r3, #8
 800a304:	4a11      	ldr	r2, [pc, #68]	; (800a34c <SEGGER_SYSVIEW_Init+0x80>)
 800a306:	490f      	ldr	r1, [pc, #60]	; (800a344 <SEGGER_SYSVIEW_Init+0x78>)
 800a308:	f7ff f9b2 	bl	8009670 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800a30c:	4b0e      	ldr	r3, [pc, #56]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a30e:	2200      	movs	r2, #0
 800a310:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a312:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <SEGGER_SYSVIEW_Init+0x84>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a0c      	ldr	r2, [pc, #48]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a318:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800a31a:	4a0b      	ldr	r2, [pc, #44]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800a320:	4a09      	ldr	r2, [pc, #36]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800a326:	4a08      	ldr	r2, [pc, #32]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800a32c:	4a06      	ldr	r2, [pc, #24]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <SEGGER_SYSVIEW_Init+0x7c>)
 800a334:	2200      	movs	r2, #0
 800a336:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800a338:	bf00      	nop
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	200134c4 	.word	0x200134c4
 800a344:	0800ba48 	.word	0x0800ba48
 800a348:	200144cc 	.word	0x200144cc
 800a34c:	200144c4 	.word	0x200144c4
 800a350:	e0001004 	.word	0xe0001004

0800a354 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800a35c:	4a04      	ldr	r2, [pc, #16]	; (800a370 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6113      	str	r3, [r2, #16]
}
 800a362:	bf00      	nop
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	200144cc 	.word	0x200144cc

0800a374 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a37c:	f3ef 8311 	mrs	r3, BASEPRI
 800a380:	f04f 0120 	mov.w	r1, #32
 800a384:	f381 8811 	msr	BASEPRI, r1
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	4808      	ldr	r0, [pc, #32]	; (800a3ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800a38c:	f7ff fa2d 	bl	80097ea <_PreparePacket>
 800a390:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	68b9      	ldr	r1, [r7, #8]
 800a396:	68b8      	ldr	r0, [r7, #8]
 800a398:	f7ff fb18 	bl	80099cc <_SendPacket>
  RECORD_END();
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f383 8811 	msr	BASEPRI, r3
}
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200144fc 	.word	0x200144fc

0800a3b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b088      	sub	sp, #32
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a3ba:	f3ef 8311 	mrs	r3, BASEPRI
 800a3be:	f04f 0120 	mov.w	r1, #32
 800a3c2:	f381 8811 	msr	BASEPRI, r1
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	4816      	ldr	r0, [pc, #88]	; (800a424 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800a3ca:	f7ff fa0e 	bl	80097ea <_PreparePacket>
 800a3ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	61fb      	str	r3, [r7, #28]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	61bb      	str	r3, [r7, #24]
 800a3dc:	e00b      	b.n	800a3f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	1c59      	adds	r1, r3, #1
 800a3e6:	61f9      	str	r1, [r7, #28]
 800a3e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	701a      	strb	r2, [r3, #0]
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	09db      	lsrs	r3, r3, #7
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	2b7f      	cmp	r3, #127	; 0x7f
 800a3fa:	d8f0      	bhi.n	800a3de <SEGGER_SYSVIEW_RecordU32+0x2e>
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	61fa      	str	r2, [r7, #28]
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	b2d2      	uxtb	r2, r2
 800a406:	701a      	strb	r2, [r3, #0]
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	68f9      	ldr	r1, [r7, #12]
 800a410:	6938      	ldr	r0, [r7, #16]
 800a412:	f7ff fadb 	bl	80099cc <_SendPacket>
  RECORD_END();
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f383 8811 	msr	BASEPRI, r3
}
 800a41c:	bf00      	nop
 800a41e:	3720      	adds	r7, #32
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	200144fc 	.word	0x200144fc

0800a428 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08c      	sub	sp, #48	; 0x30
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a434:	f3ef 8311 	mrs	r3, BASEPRI
 800a438:	f04f 0120 	mov.w	r1, #32
 800a43c:	f381 8811 	msr	BASEPRI, r1
 800a440:	61fb      	str	r3, [r7, #28]
 800a442:	4825      	ldr	r0, [pc, #148]	; (800a4d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800a444:	f7ff f9d1 	bl	80097ea <_PreparePacket>
 800a448:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	62bb      	str	r3, [r7, #40]	; 0x28
 800a456:	e00b      	b.n	800a470 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	1c59      	adds	r1, r3, #1
 800a460:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	09db      	lsrs	r3, r3, #7
 800a46e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	2b7f      	cmp	r3, #127	; 0x7f
 800a474:	d8f0      	bhi.n	800a458 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a47e:	b2d2      	uxtb	r2, r2
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a484:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	623b      	str	r3, [r7, #32]
 800a48e:	e00b      	b.n	800a4a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	b2da      	uxtb	r2, r3
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	1c59      	adds	r1, r3, #1
 800a498:	6279      	str	r1, [r7, #36]	; 0x24
 800a49a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	09db      	lsrs	r3, r3, #7
 800a4a6:	623b      	str	r3, [r7, #32]
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	2b7f      	cmp	r3, #127	; 0x7f
 800a4ac:	d8f0      	bhi.n	800a490 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	627a      	str	r2, [r7, #36]	; 0x24
 800a4b4:	6a3a      	ldr	r2, [r7, #32]
 800a4b6:	b2d2      	uxtb	r2, r2
 800a4b8:	701a      	strb	r2, [r3, #0]
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	6979      	ldr	r1, [r7, #20]
 800a4c2:	69b8      	ldr	r0, [r7, #24]
 800a4c4:	f7ff fa82 	bl	80099cc <_SendPacket>
  RECORD_END();
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	f383 8811 	msr	BASEPRI, r3
}
 800a4ce:	bf00      	nop
 800a4d0:	3730      	adds	r7, #48	; 0x30
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	200144fc 	.word	0x200144fc

0800a4dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08c      	sub	sp, #48	; 0x30
 800a4e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800a4e2:	4b58      	ldr	r3, [pc, #352]	; (800a644 <SEGGER_SYSVIEW_Start+0x168>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800a4e8:	f3ef 8311 	mrs	r3, BASEPRI
 800a4ec:	f04f 0120 	mov.w	r1, #32
 800a4f0:	f381 8811 	msr	BASEPRI, r1
 800a4f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800a4f6:	4b53      	ldr	r3, [pc, #332]	; (800a644 <SEGGER_SYSVIEW_Start+0x168>)
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	220a      	movs	r2, #10
 800a4fc:	4952      	ldr	r1, [pc, #328]	; (800a648 <SEGGER_SYSVIEW_Start+0x16c>)
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7f5 fe6e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800a50a:	200a      	movs	r0, #10
 800a50c:	f7ff ff32 	bl	800a374 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a510:	f3ef 8311 	mrs	r3, BASEPRI
 800a514:	f04f 0120 	mov.w	r1, #32
 800a518:	f381 8811 	msr	BASEPRI, r1
 800a51c:	60bb      	str	r3, [r7, #8]
 800a51e:	484b      	ldr	r0, [pc, #300]	; (800a64c <SEGGER_SYSVIEW_Start+0x170>)
 800a520:	f7ff f963 	bl	80097ea <_PreparePacket>
 800a524:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a52e:	4b45      	ldr	r3, [pc, #276]	; (800a644 <SEGGER_SYSVIEW_Start+0x168>)
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	62bb      	str	r3, [r7, #40]	; 0x28
 800a534:	e00b      	b.n	800a54e <SEGGER_SYSVIEW_Start+0x72>
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	1c59      	adds	r1, r3, #1
 800a53e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a540:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	701a      	strb	r2, [r3, #0]
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	09db      	lsrs	r3, r3, #7
 800a54c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	2b7f      	cmp	r3, #127	; 0x7f
 800a552:	d8f0      	bhi.n	800a536 <SEGGER_SYSVIEW_Start+0x5a>
 800a554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a55a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a55c:	b2d2      	uxtb	r2, r2
 800a55e:	701a      	strb	r2, [r3, #0]
 800a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a562:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	627b      	str	r3, [r7, #36]	; 0x24
 800a568:	4b36      	ldr	r3, [pc, #216]	; (800a644 <SEGGER_SYSVIEW_Start+0x168>)
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	623b      	str	r3, [r7, #32]
 800a56e:	e00b      	b.n	800a588 <SEGGER_SYSVIEW_Start+0xac>
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	b2da      	uxtb	r2, r3
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	1c59      	adds	r1, r3, #1
 800a578:	6279      	str	r1, [r7, #36]	; 0x24
 800a57a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a57e:	b2d2      	uxtb	r2, r2
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	09db      	lsrs	r3, r3, #7
 800a586:	623b      	str	r3, [r7, #32]
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	2b7f      	cmp	r3, #127	; 0x7f
 800a58c:	d8f0      	bhi.n	800a570 <SEGGER_SYSVIEW_Start+0x94>
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	627a      	str	r2, [r7, #36]	; 0x24
 800a594:	6a3a      	ldr	r2, [r7, #32]
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	61fb      	str	r3, [r7, #28]
 800a5a2:	4b28      	ldr	r3, [pc, #160]	; (800a644 <SEGGER_SYSVIEW_Start+0x168>)
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	61bb      	str	r3, [r7, #24]
 800a5a8:	e00b      	b.n	800a5c2 <SEGGER_SYSVIEW_Start+0xe6>
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	1c59      	adds	r1, r3, #1
 800a5b2:	61f9      	str	r1, [r7, #28]
 800a5b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5b8:	b2d2      	uxtb	r2, r2
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	09db      	lsrs	r3, r3, #7
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	2b7f      	cmp	r3, #127	; 0x7f
 800a5c6:	d8f0      	bhi.n	800a5aa <SEGGER_SYSVIEW_Start+0xce>
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	61fa      	str	r2, [r7, #28]
 800a5ce:	69ba      	ldr	r2, [r7, #24]
 800a5d0:	b2d2      	uxtb	r2, r2
 800a5d2:	701a      	strb	r2, [r3, #0]
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	617b      	str	r3, [r7, #20]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	613b      	str	r3, [r7, #16]
 800a5e0:	e00b      	b.n	800a5fa <SEGGER_SYSVIEW_Start+0x11e>
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	1c59      	adds	r1, r3, #1
 800a5ea:	6179      	str	r1, [r7, #20]
 800a5ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5f0:	b2d2      	uxtb	r2, r2
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	09db      	lsrs	r3, r3, #7
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2b7f      	cmp	r3, #127	; 0x7f
 800a5fe:	d8f0      	bhi.n	800a5e2 <SEGGER_SYSVIEW_Start+0x106>
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	617a      	str	r2, [r7, #20]
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	701a      	strb	r2, [r3, #0]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a610:	2218      	movs	r2, #24
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7ff f9d9 	bl	80099cc <_SendPacket>
      RECORD_END();
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a620:	4b08      	ldr	r3, [pc, #32]	; (800a644 <SEGGER_SYSVIEW_Start+0x168>)
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800a628:	4b06      	ldr	r3, [pc, #24]	; (800a644 <SEGGER_SYSVIEW_Start+0x168>)
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800a62e:	f000 f9eb 	bl	800aa08 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800a632:	f000 f9b1 	bl	800a998 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800a636:	f000 fc73 	bl	800af20 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800a63a:	bf00      	nop
 800a63c:	3730      	adds	r7, #48	; 0x30
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	200144cc 	.word	0x200144cc
 800a648:	0800ba70 	.word	0x0800ba70
 800a64c:	200144fc 	.word	0x200144fc

0800a650 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a656:	f3ef 8311 	mrs	r3, BASEPRI
 800a65a:	f04f 0120 	mov.w	r1, #32
 800a65e:	f381 8811 	msr	BASEPRI, r1
 800a662:	607b      	str	r3, [r7, #4]
 800a664:	480b      	ldr	r0, [pc, #44]	; (800a694 <SEGGER_SYSVIEW_Stop+0x44>)
 800a666:	f7ff f8c0 	bl	80097ea <_PreparePacket>
 800a66a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800a66c:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <SEGGER_SYSVIEW_Stop+0x48>)
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d007      	beq.n	800a684 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800a674:	220b      	movs	r2, #11
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6838      	ldr	r0, [r7, #0]
 800a67a:	f7ff f9a7 	bl	80099cc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800a67e:	4b06      	ldr	r3, [pc, #24]	; (800a698 <SEGGER_SYSVIEW_Stop+0x48>)
 800a680:	2200      	movs	r2, #0
 800a682:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f383 8811 	msr	BASEPRI, r3
}
 800a68a:	bf00      	nop
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	200144fc 	.word	0x200144fc
 800a698:	200144cc 	.word	0x200144cc

0800a69c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08c      	sub	sp, #48	; 0x30
 800a6a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a6a2:	f3ef 8311 	mrs	r3, BASEPRI
 800a6a6:	f04f 0120 	mov.w	r1, #32
 800a6aa:	f381 8811 	msr	BASEPRI, r1
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	4845      	ldr	r0, [pc, #276]	; (800a7c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800a6b2:	f7ff f89a 	bl	80097ea <_PreparePacket>
 800a6b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6c0:	4b42      	ldr	r3, [pc, #264]	; (800a7cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6c6:	e00b      	b.n	800a6e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	1c59      	adds	r1, r3, #1
 800a6d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a6d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a6d6:	b2d2      	uxtb	r2, r2
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	09db      	lsrs	r3, r3, #7
 800a6de:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	2b7f      	cmp	r3, #127	; 0x7f
 800a6e4:	d8f0      	bhi.n	800a6c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ee:	b2d2      	uxtb	r2, r2
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6fa:	4b34      	ldr	r3, [pc, #208]	; (800a7cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	623b      	str	r3, [r7, #32]
 800a700:	e00b      	b.n	800a71a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	b2da      	uxtb	r2, r3
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	1c59      	adds	r1, r3, #1
 800a70a:	6279      	str	r1, [r7, #36]	; 0x24
 800a70c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a710:	b2d2      	uxtb	r2, r2
 800a712:	701a      	strb	r2, [r3, #0]
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	09db      	lsrs	r3, r3, #7
 800a718:	623b      	str	r3, [r7, #32]
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	2b7f      	cmp	r3, #127	; 0x7f
 800a71e:	d8f0      	bhi.n	800a702 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	627a      	str	r2, [r7, #36]	; 0x24
 800a726:	6a3a      	ldr	r2, [r7, #32]
 800a728:	b2d2      	uxtb	r2, r2
 800a72a:	701a      	strb	r2, [r3, #0]
 800a72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	61fb      	str	r3, [r7, #28]
 800a734:	4b25      	ldr	r3, [pc, #148]	; (800a7cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	61bb      	str	r3, [r7, #24]
 800a73a:	e00b      	b.n	800a754 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	1c59      	adds	r1, r3, #1
 800a744:	61f9      	str	r1, [r7, #28]
 800a746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a74a:	b2d2      	uxtb	r2, r2
 800a74c:	701a      	strb	r2, [r3, #0]
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	09db      	lsrs	r3, r3, #7
 800a752:	61bb      	str	r3, [r7, #24]
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	2b7f      	cmp	r3, #127	; 0x7f
 800a758:	d8f0      	bhi.n	800a73c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	1c5a      	adds	r2, r3, #1
 800a75e:	61fa      	str	r2, [r7, #28]
 800a760:	69ba      	ldr	r2, [r7, #24]
 800a762:	b2d2      	uxtb	r2, r2
 800a764:	701a      	strb	r2, [r3, #0]
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	2300      	movs	r3, #0
 800a770:	613b      	str	r3, [r7, #16]
 800a772:	e00b      	b.n	800a78c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	b2da      	uxtb	r2, r3
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	1c59      	adds	r1, r3, #1
 800a77c:	6179      	str	r1, [r7, #20]
 800a77e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a782:	b2d2      	uxtb	r2, r2
 800a784:	701a      	strb	r2, [r3, #0]
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	09db      	lsrs	r3, r3, #7
 800a78a:	613b      	str	r3, [r7, #16]
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2b7f      	cmp	r3, #127	; 0x7f
 800a790:	d8f0      	bhi.n	800a774 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	1c5a      	adds	r2, r3, #1
 800a796:	617a      	str	r2, [r7, #20]
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	b2d2      	uxtb	r2, r2
 800a79c:	701a      	strb	r2, [r3, #0]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a7a2:	2218      	movs	r2, #24
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	68b8      	ldr	r0, [r7, #8]
 800a7a8:	f7ff f910 	bl	80099cc <_SendPacket>
  RECORD_END();
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a7b2:	4b06      	ldr	r3, [pc, #24]	; (800a7cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800a7ba:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	4798      	blx	r3
  }
}
 800a7c0:	bf00      	nop
 800a7c2:	3730      	adds	r7, #48	; 0x30
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	200144fc 	.word	0x200144fc
 800a7cc:	200144cc 	.word	0x200144cc

0800a7d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b092      	sub	sp, #72	; 0x48
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a7d8:	f3ef 8311 	mrs	r3, BASEPRI
 800a7dc:	f04f 0120 	mov.w	r1, #32
 800a7e0:	f381 8811 	msr	BASEPRI, r1
 800a7e4:	617b      	str	r3, [r7, #20]
 800a7e6:	486a      	ldr	r0, [pc, #424]	; (800a990 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a7e8:	f7fe ffff 	bl	80097ea <_PreparePacket>
 800a7ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	4b66      	ldr	r3, [pc, #408]	; (800a994 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	643b      	str	r3, [r7, #64]	; 0x40
 800a802:	e00b      	b.n	800a81c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a806:	b2da      	uxtb	r2, r3
 800a808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a80a:	1c59      	adds	r1, r3, #1
 800a80c:	6479      	str	r1, [r7, #68]	; 0x44
 800a80e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a812:	b2d2      	uxtb	r2, r2
 800a814:	701a      	strb	r2, [r3, #0]
 800a816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a818:	09db      	lsrs	r3, r3, #7
 800a81a:	643b      	str	r3, [r7, #64]	; 0x40
 800a81c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a81e:	2b7f      	cmp	r3, #127	; 0x7f
 800a820:	d8f0      	bhi.n	800a804 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	647a      	str	r2, [r7, #68]	; 0x44
 800a828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a82a:	b2d2      	uxtb	r2, r2
 800a82c:	701a      	strb	r2, [r3, #0]
 800a82e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a830:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a83c:	e00b      	b.n	800a856 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	b2da      	uxtb	r2, r3
 800a842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a844:	1c59      	adds	r1, r3, #1
 800a846:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a848:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a84c:	b2d2      	uxtb	r2, r2
 800a84e:	701a      	strb	r2, [r3, #0]
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	09db      	lsrs	r3, r3, #7
 800a854:	63bb      	str	r3, [r7, #56]	; 0x38
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	2b7f      	cmp	r3, #127	; 0x7f
 800a85a:	d8f0      	bhi.n	800a83e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a864:	b2d2      	uxtb	r2, r2
 800a866:	701a      	strb	r2, [r3, #0]
 800a868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	2220      	movs	r2, #32
 800a872:	4619      	mov	r1, r3
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7fe ff6b 	bl	8009750 <_EncodeStr>
 800a87a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a87c:	2209      	movs	r2, #9
 800a87e:	68f9      	ldr	r1, [r7, #12]
 800a880:	6938      	ldr	r0, [r7, #16]
 800a882:	f7ff f8a3 	bl	80099cc <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	4b40      	ldr	r3, [pc, #256]	; (800a994 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	633b      	str	r3, [r7, #48]	; 0x30
 800a89a:	e00b      	b.n	800a8b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a2:	1c59      	adds	r1, r3, #1
 800a8a4:	6379      	str	r1, [r7, #52]	; 0x34
 800a8a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8aa:	b2d2      	uxtb	r2, r2
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	09db      	lsrs	r3, r3, #7
 800a8b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	2b7f      	cmp	r3, #127	; 0x7f
 800a8b8:	d8f0      	bhi.n	800a89c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	637a      	str	r2, [r7, #52]	; 0x34
 800a8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c2:	b2d2      	uxtb	r2, r2
 800a8c4:	701a      	strb	r2, [r3, #0]
 800a8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8d4:	e00b      	b.n	800a8ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	1c59      	adds	r1, r3, #1
 800a8de:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a8e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8e4:	b2d2      	uxtb	r2, r2
 800a8e6:	701a      	strb	r2, [r3, #0]
 800a8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ea:	09db      	lsrs	r3, r3, #7
 800a8ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	2b7f      	cmp	r3, #127	; 0x7f
 800a8f2:	d8f0      	bhi.n	800a8d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	1c5a      	adds	r2, r3, #1
 800a8f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8fc:	b2d2      	uxtb	r2, r2
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a902:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	627b      	str	r3, [r7, #36]	; 0x24
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	623b      	str	r3, [r7, #32]
 800a90e:	e00b      	b.n	800a928 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	b2da      	uxtb	r2, r3
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	1c59      	adds	r1, r3, #1
 800a918:	6279      	str	r1, [r7, #36]	; 0x24
 800a91a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a91e:	b2d2      	uxtb	r2, r2
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	09db      	lsrs	r3, r3, #7
 800a926:	623b      	str	r3, [r7, #32]
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	2b7f      	cmp	r3, #127	; 0x7f
 800a92c:	d8f0      	bhi.n	800a910 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	627a      	str	r2, [r7, #36]	; 0x24
 800a934:	6a3a      	ldr	r2, [r7, #32]
 800a936:	b2d2      	uxtb	r2, r2
 800a938:	701a      	strb	r2, [r3, #0]
 800a93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	61fb      	str	r3, [r7, #28]
 800a942:	2300      	movs	r3, #0
 800a944:	61bb      	str	r3, [r7, #24]
 800a946:	e00b      	b.n	800a960 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	1c59      	adds	r1, r3, #1
 800a950:	61f9      	str	r1, [r7, #28]
 800a952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a956:	b2d2      	uxtb	r2, r2
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	09db      	lsrs	r3, r3, #7
 800a95e:	61bb      	str	r3, [r7, #24]
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	2b7f      	cmp	r3, #127	; 0x7f
 800a964:	d8f0      	bhi.n	800a948 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	61fa      	str	r2, [r7, #28]
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	b2d2      	uxtb	r2, r2
 800a970:	701a      	strb	r2, [r3, #0]
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a976:	2215      	movs	r2, #21
 800a978:	68f9      	ldr	r1, [r7, #12]
 800a97a:	6938      	ldr	r0, [r7, #16]
 800a97c:	f7ff f826 	bl	80099cc <_SendPacket>
  RECORD_END();
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f383 8811 	msr	BASEPRI, r3
}
 800a986:	bf00      	nop
 800a988:	3748      	adds	r7, #72	; 0x48
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	200144fc 	.word	0x200144fc
 800a994:	200144cc 	.word	0x200144cc

0800a998 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a998:	b580      	push	{r7, lr}
 800a99a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a99c:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d008      	beq.n	800a9b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a9a4:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a9ae:	4b03      	ldr	r3, [pc, #12]	; (800a9bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	4798      	blx	r3
  }
}
 800a9b6:	bf00      	nop
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	200144cc 	.word	0x200144cc

0800a9c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a9c8:	f3ef 8311 	mrs	r3, BASEPRI
 800a9cc:	f04f 0120 	mov.w	r1, #32
 800a9d0:	f381 8811 	msr	BASEPRI, r1
 800a9d4:	617b      	str	r3, [r7, #20]
 800a9d6:	480b      	ldr	r0, [pc, #44]	; (800aa04 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a9d8:	f7fe ff07 	bl	80097ea <_PreparePacket>
 800a9dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a9de:	2280      	movs	r2, #128	; 0x80
 800a9e0:	6879      	ldr	r1, [r7, #4]
 800a9e2:	6938      	ldr	r0, [r7, #16]
 800a9e4:	f7fe feb4 	bl	8009750 <_EncodeStr>
 800a9e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a9ea:	220e      	movs	r2, #14
 800a9ec:	68f9      	ldr	r1, [r7, #12]
 800a9ee:	6938      	ldr	r0, [r7, #16]
 800a9f0:	f7fe ffec 	bl	80099cc <_SendPacket>
  RECORD_END();
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f383 8811 	msr	BASEPRI, r3
}
 800a9fa:	bf00      	nop
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	200144fc 	.word	0x200144fc

0800aa08 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800aa08:	b590      	push	{r4, r7, lr}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800aa0e:	4b15      	ldr	r3, [pc, #84]	; (800aa64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d01a      	beq.n	800aa4c <SEGGER_SYSVIEW_RecordSystime+0x44>
 800aa16:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d015      	beq.n	800aa4c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800aa20:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4798      	blx	r3
 800aa28:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800aa2c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800aa2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	000a      	movs	r2, r1
 800aa3c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800aa3e:	4613      	mov	r3, r2
 800aa40:	461a      	mov	r2, r3
 800aa42:	4621      	mov	r1, r4
 800aa44:	200d      	movs	r0, #13
 800aa46:	f7ff fcef 	bl	800a428 <SEGGER_SYSVIEW_RecordU32x2>
 800aa4a:	e006      	b.n	800aa5a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800aa4c:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4619      	mov	r1, r3
 800aa52:	200c      	movs	r0, #12
 800aa54:	f7ff fcac 	bl	800a3b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800aa58:	bf00      	nop
 800aa5a:	bf00      	nop
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd90      	pop	{r4, r7, pc}
 800aa62:	bf00      	nop
 800aa64:	200144cc 	.word	0x200144cc
 800aa68:	e0001004 	.word	0xe0001004

0800aa6c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800aa72:	f3ef 8311 	mrs	r3, BASEPRI
 800aa76:	f04f 0120 	mov.w	r1, #32
 800aa7a:	f381 8811 	msr	BASEPRI, r1
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	4819      	ldr	r0, [pc, #100]	; (800aae8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800aa82:	f7fe feb2 	bl	80097ea <_PreparePacket>
 800aa86:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800aa8c:	4b17      	ldr	r3, [pc, #92]	; (800aaec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa94:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	617b      	str	r3, [r7, #20]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	613b      	str	r3, [r7, #16]
 800aa9e:	e00b      	b.n	800aab8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	1c59      	adds	r1, r3, #1
 800aaa8:	6179      	str	r1, [r7, #20]
 800aaaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	701a      	strb	r2, [r3, #0]
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	09db      	lsrs	r3, r3, #7
 800aab6:	613b      	str	r3, [r7, #16]
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	2b7f      	cmp	r3, #127	; 0x7f
 800aabc:	d8f0      	bhi.n	800aaa0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	617a      	str	r2, [r7, #20]
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	b2d2      	uxtb	r2, r2
 800aac8:	701a      	strb	r2, [r3, #0]
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800aace:	2202      	movs	r2, #2
 800aad0:	6879      	ldr	r1, [r7, #4]
 800aad2:	68b8      	ldr	r0, [r7, #8]
 800aad4:	f7fe ff7a 	bl	80099cc <_SendPacket>
  RECORD_END();
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f383 8811 	msr	BASEPRI, r3
}
 800aade:	bf00      	nop
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	200144fc 	.word	0x200144fc
 800aaec:	e000ed04 	.word	0xe000ed04

0800aaf0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800aaf6:	f3ef 8311 	mrs	r3, BASEPRI
 800aafa:	f04f 0120 	mov.w	r1, #32
 800aafe:	f381 8811 	msr	BASEPRI, r1
 800ab02:	607b      	str	r3, [r7, #4]
 800ab04:	4807      	ldr	r0, [pc, #28]	; (800ab24 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800ab06:	f7fe fe70 	bl	80097ea <_PreparePacket>
 800ab0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800ab0c:	2203      	movs	r2, #3
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6838      	ldr	r0, [r7, #0]
 800ab12:	f7fe ff5b 	bl	80099cc <_SendPacket>
  RECORD_END();
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f383 8811 	msr	BASEPRI, r3
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	200144fc 	.word	0x200144fc

0800ab28 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ab2e:	f3ef 8311 	mrs	r3, BASEPRI
 800ab32:	f04f 0120 	mov.w	r1, #32
 800ab36:	f381 8811 	msr	BASEPRI, r1
 800ab3a:	607b      	str	r3, [r7, #4]
 800ab3c:	4807      	ldr	r0, [pc, #28]	; (800ab5c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800ab3e:	f7fe fe54 	bl	80097ea <_PreparePacket>
 800ab42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800ab44:	2212      	movs	r2, #18
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	6838      	ldr	r0, [r7, #0]
 800ab4a:	f7fe ff3f 	bl	80099cc <_SendPacket>
  RECORD_END();
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f383 8811 	msr	BASEPRI, r3
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	200144fc 	.word	0x200144fc

0800ab60 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ab66:	f3ef 8311 	mrs	r3, BASEPRI
 800ab6a:	f04f 0120 	mov.w	r1, #32
 800ab6e:	f381 8811 	msr	BASEPRI, r1
 800ab72:	607b      	str	r3, [r7, #4]
 800ab74:	4807      	ldr	r0, [pc, #28]	; (800ab94 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800ab76:	f7fe fe38 	bl	80097ea <_PreparePacket>
 800ab7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800ab7c:	2211      	movs	r2, #17
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6838      	ldr	r0, [r7, #0]
 800ab82:	f7fe ff23 	bl	80099cc <_SendPacket>
  RECORD_END();
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f383 8811 	msr	BASEPRI, r3
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	200144fc 	.word	0x200144fc

0800ab98 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b088      	sub	sp, #32
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800aba0:	f3ef 8311 	mrs	r3, BASEPRI
 800aba4:	f04f 0120 	mov.w	r1, #32
 800aba8:	f381 8811 	msr	BASEPRI, r1
 800abac:	617b      	str	r3, [r7, #20]
 800abae:	4819      	ldr	r0, [pc, #100]	; (800ac14 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800abb0:	f7fe fe1b 	bl	80097ea <_PreparePacket>
 800abb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800abba:	4b17      	ldr	r3, [pc, #92]	; (800ac18 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	61fb      	str	r3, [r7, #28]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	61bb      	str	r3, [r7, #24]
 800abcc:	e00b      	b.n	800abe6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	1c59      	adds	r1, r3, #1
 800abd6:	61f9      	str	r1, [r7, #28]
 800abd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800abdc:	b2d2      	uxtb	r2, r2
 800abde:	701a      	strb	r2, [r3, #0]
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	09db      	lsrs	r3, r3, #7
 800abe4:	61bb      	str	r3, [r7, #24]
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	2b7f      	cmp	r3, #127	; 0x7f
 800abea:	d8f0      	bhi.n	800abce <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	61fa      	str	r2, [r7, #28]
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	b2d2      	uxtb	r2, r2
 800abf6:	701a      	strb	r2, [r3, #0]
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800abfc:	2208      	movs	r2, #8
 800abfe:	68f9      	ldr	r1, [r7, #12]
 800ac00:	6938      	ldr	r0, [r7, #16]
 800ac02:	f7fe fee3 	bl	80099cc <_SendPacket>
  RECORD_END();
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f383 8811 	msr	BASEPRI, r3
}
 800ac0c:	bf00      	nop
 800ac0e:	3720      	adds	r7, #32
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	200144fc 	.word	0x200144fc
 800ac18:	200144cc 	.word	0x200144cc

0800ac1c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ac24:	f3ef 8311 	mrs	r3, BASEPRI
 800ac28:	f04f 0120 	mov.w	r1, #32
 800ac2c:	f381 8811 	msr	BASEPRI, r1
 800ac30:	617b      	str	r3, [r7, #20]
 800ac32:	4819      	ldr	r0, [pc, #100]	; (800ac98 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800ac34:	f7fe fdd9 	bl	80097ea <_PreparePacket>
 800ac38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ac3e:	4b17      	ldr	r3, [pc, #92]	; (800ac9c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	61fb      	str	r3, [r7, #28]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	61bb      	str	r3, [r7, #24]
 800ac50:	e00b      	b.n	800ac6a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	1c59      	adds	r1, r3, #1
 800ac5a:	61f9      	str	r1, [r7, #28]
 800ac5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac60:	b2d2      	uxtb	r2, r2
 800ac62:	701a      	strb	r2, [r3, #0]
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	09db      	lsrs	r3, r3, #7
 800ac68:	61bb      	str	r3, [r7, #24]
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	2b7f      	cmp	r3, #127	; 0x7f
 800ac6e:	d8f0      	bhi.n	800ac52 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	61fa      	str	r2, [r7, #28]
 800ac76:	69ba      	ldr	r2, [r7, #24]
 800ac78:	b2d2      	uxtb	r2, r2
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800ac80:	2204      	movs	r2, #4
 800ac82:	68f9      	ldr	r1, [r7, #12]
 800ac84:	6938      	ldr	r0, [r7, #16]
 800ac86:	f7fe fea1 	bl	80099cc <_SendPacket>
  RECORD_END();
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f383 8811 	msr	BASEPRI, r3
}
 800ac90:	bf00      	nop
 800ac92:	3720      	adds	r7, #32
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	200144fc 	.word	0x200144fc
 800ac9c:	200144cc 	.word	0x200144cc

0800aca0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b088      	sub	sp, #32
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800aca8:	f3ef 8311 	mrs	r3, BASEPRI
 800acac:	f04f 0120 	mov.w	r1, #32
 800acb0:	f381 8811 	msr	BASEPRI, r1
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	4819      	ldr	r0, [pc, #100]	; (800ad1c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800acb8:	f7fe fd97 	bl	80097ea <_PreparePacket>
 800acbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800acc2:	4b17      	ldr	r3, [pc, #92]	; (800ad20 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	61bb      	str	r3, [r7, #24]
 800acd4:	e00b      	b.n	800acee <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	1c59      	adds	r1, r3, #1
 800acde:	61f9      	str	r1, [r7, #28]
 800ace0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ace4:	b2d2      	uxtb	r2, r2
 800ace6:	701a      	strb	r2, [r3, #0]
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	09db      	lsrs	r3, r3, #7
 800acec:	61bb      	str	r3, [r7, #24]
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b7f      	cmp	r3, #127	; 0x7f
 800acf2:	d8f0      	bhi.n	800acd6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	61fa      	str	r2, [r7, #28]
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	b2d2      	uxtb	r2, r2
 800acfe:	701a      	strb	r2, [r3, #0]
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800ad04:	2206      	movs	r2, #6
 800ad06:	68f9      	ldr	r1, [r7, #12]
 800ad08:	6938      	ldr	r0, [r7, #16]
 800ad0a:	f7fe fe5f 	bl	80099cc <_SendPacket>
  RECORD_END();
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f383 8811 	msr	BASEPRI, r3
}
 800ad14:	bf00      	nop
 800ad16:	3720      	adds	r7, #32
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	200144fc 	.word	0x200144fc
 800ad20:	200144cc 	.word	0x200144cc

0800ad24 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08a      	sub	sp, #40	; 0x28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800ad2e:	f3ef 8311 	mrs	r3, BASEPRI
 800ad32:	f04f 0120 	mov.w	r1, #32
 800ad36:	f381 8811 	msr	BASEPRI, r1
 800ad3a:	617b      	str	r3, [r7, #20]
 800ad3c:	4827      	ldr	r0, [pc, #156]	; (800addc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800ad3e:	f7fe fd54 	bl	80097ea <_PreparePacket>
 800ad42:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ad48:	4b25      	ldr	r3, [pc, #148]	; (800ade0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	627b      	str	r3, [r7, #36]	; 0x24
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	623b      	str	r3, [r7, #32]
 800ad5a:	e00b      	b.n	800ad74 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	1c59      	adds	r1, r3, #1
 800ad64:	6279      	str	r1, [r7, #36]	; 0x24
 800ad66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ad6a:	b2d2      	uxtb	r2, r2
 800ad6c:	701a      	strb	r2, [r3, #0]
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	09db      	lsrs	r3, r3, #7
 800ad72:	623b      	str	r3, [r7, #32]
 800ad74:	6a3b      	ldr	r3, [r7, #32]
 800ad76:	2b7f      	cmp	r3, #127	; 0x7f
 800ad78:	d8f0      	bhi.n	800ad5c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	627a      	str	r2, [r7, #36]	; 0x24
 800ad80:	6a3a      	ldr	r2, [r7, #32]
 800ad82:	b2d2      	uxtb	r2, r2
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	61fb      	str	r3, [r7, #28]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	61bb      	str	r3, [r7, #24]
 800ad92:	e00b      	b.n	800adac <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	1c59      	adds	r1, r3, #1
 800ad9c:	61f9      	str	r1, [r7, #28]
 800ad9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ada2:	b2d2      	uxtb	r2, r2
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	09db      	lsrs	r3, r3, #7
 800adaa:	61bb      	str	r3, [r7, #24]
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	2b7f      	cmp	r3, #127	; 0x7f
 800adb0:	d8f0      	bhi.n	800ad94 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	61fa      	str	r2, [r7, #28]
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	b2d2      	uxtb	r2, r2
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800adc2:	2207      	movs	r2, #7
 800adc4:	68f9      	ldr	r1, [r7, #12]
 800adc6:	6938      	ldr	r0, [r7, #16]
 800adc8:	f7fe fe00 	bl	80099cc <_SendPacket>
  RECORD_END();
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	f383 8811 	msr	BASEPRI, r3
}
 800add2:	bf00      	nop
 800add4:	3728      	adds	r7, #40	; 0x28
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	200144fc 	.word	0x200144fc
 800ade0:	200144cc 	.word	0x200144cc

0800ade4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08c      	sub	sp, #48	; 0x30
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800adee:	4b3b      	ldr	r3, [pc, #236]	; (800aedc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d06d      	beq.n	800aed2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800adf6:	4b39      	ldr	r3, [pc, #228]	; (800aedc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800adfc:	2300      	movs	r3, #0
 800adfe:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae00:	e008      	b.n	800ae14 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800ae02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d007      	beq.n	800ae1e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	3301      	adds	r3, #1
 800ae12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d3f2      	bcc.n	800ae02 <SEGGER_SYSVIEW_SendModule+0x1e>
 800ae1c:	e000      	b.n	800ae20 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800ae1e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d055      	beq.n	800aed2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ae26:	f3ef 8311 	mrs	r3, BASEPRI
 800ae2a:	f04f 0120 	mov.w	r1, #32
 800ae2e:	f381 8811 	msr	BASEPRI, r1
 800ae32:	617b      	str	r3, [r7, #20]
 800ae34:	482a      	ldr	r0, [pc, #168]	; (800aee0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800ae36:	f7fe fcd8 	bl	80097ea <_PreparePacket>
 800ae3a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	627b      	str	r3, [r7, #36]	; 0x24
 800ae44:	79fb      	ldrb	r3, [r7, #7]
 800ae46:	623b      	str	r3, [r7, #32]
 800ae48:	e00b      	b.n	800ae62 <SEGGER_SYSVIEW_SendModule+0x7e>
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae50:	1c59      	adds	r1, r3, #1
 800ae52:	6279      	str	r1, [r7, #36]	; 0x24
 800ae54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae58:	b2d2      	uxtb	r2, r2
 800ae5a:	701a      	strb	r2, [r3, #0]
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	09db      	lsrs	r3, r3, #7
 800ae60:	623b      	str	r3, [r7, #32]
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	2b7f      	cmp	r3, #127	; 0x7f
 800ae66:	d8f0      	bhi.n	800ae4a <SEGGER_SYSVIEW_SendModule+0x66>
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	627a      	str	r2, [r7, #36]	; 0x24
 800ae6e:	6a3a      	ldr	r2, [r7, #32]
 800ae70:	b2d2      	uxtb	r2, r2
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	61fb      	str	r3, [r7, #28]
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	61bb      	str	r3, [r7, #24]
 800ae82:	e00b      	b.n	800ae9c <SEGGER_SYSVIEW_SendModule+0xb8>
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	1c59      	adds	r1, r3, #1
 800ae8c:	61f9      	str	r1, [r7, #28]
 800ae8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	09db      	lsrs	r3, r3, #7
 800ae9a:	61bb      	str	r3, [r7, #24]
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	2b7f      	cmp	r3, #127	; 0x7f
 800aea0:	d8f0      	bhi.n	800ae84 <SEGGER_SYSVIEW_SendModule+0xa0>
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	1c5a      	adds	r2, r3, #1
 800aea6:	61fa      	str	r2, [r7, #28]
 800aea8:	69ba      	ldr	r2, [r7, #24]
 800aeaa:	b2d2      	uxtb	r2, r2
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2280      	movs	r2, #128	; 0x80
 800aeb8:	4619      	mov	r1, r3
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f7fe fc48 	bl	8009750 <_EncodeStr>
 800aec0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800aec2:	2216      	movs	r2, #22
 800aec4:	68f9      	ldr	r1, [r7, #12]
 800aec6:	6938      	ldr	r0, [r7, #16]
 800aec8:	f7fe fd80 	bl	80099cc <_SendPacket>
      RECORD_END();
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800aed2:	bf00      	nop
 800aed4:	3730      	adds	r7, #48	; 0x30
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	200144f4 	.word	0x200144f4
 800aee0:	200144fc 	.word	0x200144fc

0800aee4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800aeea:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00f      	beq.n	800af12 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800aef2:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1f2      	bne.n	800aef8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	200144f4 	.word	0x200144f4

0800af20 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800af26:	f3ef 8311 	mrs	r3, BASEPRI
 800af2a:	f04f 0120 	mov.w	r1, #32
 800af2e:	f381 8811 	msr	BASEPRI, r1
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	4817      	ldr	r0, [pc, #92]	; (800af94 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800af36:	f7fe fc58 	bl	80097ea <_PreparePacket>
 800af3a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	4b14      	ldr	r3, [pc, #80]	; (800af98 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	613b      	str	r3, [r7, #16]
 800af4a:	e00b      	b.n	800af64 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	1c59      	adds	r1, r3, #1
 800af54:	6179      	str	r1, [r7, #20]
 800af56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af5a:	b2d2      	uxtb	r2, r2
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	09db      	lsrs	r3, r3, #7
 800af62:	613b      	str	r3, [r7, #16]
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	2b7f      	cmp	r3, #127	; 0x7f
 800af68:	d8f0      	bhi.n	800af4c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	617a      	str	r2, [r7, #20]
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	b2d2      	uxtb	r2, r2
 800af74:	701a      	strb	r2, [r3, #0]
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800af7a:	221b      	movs	r2, #27
 800af7c:	6879      	ldr	r1, [r7, #4]
 800af7e:	68b8      	ldr	r0, [r7, #8]
 800af80:	f7fe fd24 	bl	80099cc <_SendPacket>
  RECORD_END();
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f383 8811 	msr	BASEPRI, r3
}
 800af8a:	bf00      	nop
 800af8c:	3718      	adds	r7, #24
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	200144fc 	.word	0x200144fc
 800af98:	200144f8 	.word	0x200144f8

0800af9c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800af9c:	b40f      	push	{r0, r1, r2, r3}
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800afa4:	f107 0314 	add.w	r3, r7, #20
 800afa8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800afaa:	1d3b      	adds	r3, r7, #4
 800afac:	461a      	mov	r2, r3
 800afae:	2100      	movs	r1, #0
 800afb0:	6938      	ldr	r0, [r7, #16]
 800afb2:	f7fe ff93 	bl	8009edc <_VPrintTarget>
  va_end(ParamList);
}
 800afb6:	bf00      	nop
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afc0:	b004      	add	sp, #16
 800afc2:	4770      	bx	lr

0800afc4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b08a      	sub	sp, #40	; 0x28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800afcc:	f3ef 8311 	mrs	r3, BASEPRI
 800afd0:	f04f 0120 	mov.w	r1, #32
 800afd4:	f381 8811 	msr	BASEPRI, r1
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	4827      	ldr	r0, [pc, #156]	; (800b078 <SEGGER_SYSVIEW_Warn+0xb4>)
 800afdc:	f7fe fc05 	bl	80097ea <_PreparePacket>
 800afe0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800afe2:	2280      	movs	r2, #128	; 0x80
 800afe4:	6879      	ldr	r1, [r7, #4]
 800afe6:	6938      	ldr	r0, [r7, #16]
 800afe8:	f7fe fbb2 	bl	8009750 <_EncodeStr>
 800afec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
 800aff2:	2301      	movs	r3, #1
 800aff4:	623b      	str	r3, [r7, #32]
 800aff6:	e00b      	b.n	800b010 <SEGGER_SYSVIEW_Warn+0x4c>
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	b2da      	uxtb	r2, r3
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	1c59      	adds	r1, r3, #1
 800b000:	6279      	str	r1, [r7, #36]	; 0x24
 800b002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b006:	b2d2      	uxtb	r2, r2
 800b008:	701a      	strb	r2, [r3, #0]
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	09db      	lsrs	r3, r3, #7
 800b00e:	623b      	str	r3, [r7, #32]
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	2b7f      	cmp	r3, #127	; 0x7f
 800b014:	d8f0      	bhi.n	800aff8 <SEGGER_SYSVIEW_Warn+0x34>
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	627a      	str	r2, [r7, #36]	; 0x24
 800b01c:	6a3a      	ldr	r2, [r7, #32]
 800b01e:	b2d2      	uxtb	r2, r2
 800b020:	701a      	strb	r2, [r3, #0]
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b024:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	61fb      	str	r3, [r7, #28]
 800b02a:	2300      	movs	r3, #0
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	e00b      	b.n	800b048 <SEGGER_SYSVIEW_Warn+0x84>
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	b2da      	uxtb	r2, r3
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	1c59      	adds	r1, r3, #1
 800b038:	61f9      	str	r1, [r7, #28]
 800b03a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b03e:	b2d2      	uxtb	r2, r2
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	09db      	lsrs	r3, r3, #7
 800b046:	61bb      	str	r3, [r7, #24]
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	2b7f      	cmp	r3, #127	; 0x7f
 800b04c:	d8f0      	bhi.n	800b030 <SEGGER_SYSVIEW_Warn+0x6c>
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	1c5a      	adds	r2, r3, #1
 800b052:	61fa      	str	r2, [r7, #28]
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	b2d2      	uxtb	r2, r2
 800b058:	701a      	strb	r2, [r3, #0]
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b05e:	221a      	movs	r2, #26
 800b060:	68f9      	ldr	r1, [r7, #12]
 800b062:	6938      	ldr	r0, [r7, #16]
 800b064:	f7fe fcb2 	bl	80099cc <_SendPacket>
  RECORD_END();
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f383 8811 	msr	BASEPRI, r3
}
 800b06e:	bf00      	nop
 800b070:	3728      	adds	r7, #40	; 0x28
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	200144fc 	.word	0x200144fc

0800b07c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b080:	2201      	movs	r2, #1
 800b082:	490e      	ldr	r1, [pc, #56]	; (800b0bc <MX_USB_HOST_Init+0x40>)
 800b084:	480e      	ldr	r0, [pc, #56]	; (800b0c0 <MX_USB_HOST_Init+0x44>)
 800b086:	f7fb f973 	bl	8006370 <USBH_Init>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b090:	f7f5 fd78 	bl	8000b84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b094:	490b      	ldr	r1, [pc, #44]	; (800b0c4 <MX_USB_HOST_Init+0x48>)
 800b096:	480a      	ldr	r0, [pc, #40]	; (800b0c0 <MX_USB_HOST_Init+0x44>)
 800b098:	f7fb f9f8 	bl	800648c <USBH_RegisterClass>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b0a2:	f7f5 fd6f 	bl	8000b84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b0a6:	4806      	ldr	r0, [pc, #24]	; (800b0c0 <MX_USB_HOST_Init+0x44>)
 800b0a8:	f7fb fa7c 	bl	80065a4 <USBH_Start>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b0b2:	f7f5 fd67 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b0b6:	bf00      	nop
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	0800b0dd 	.word	0x0800b0dd
 800b0c0:	200145e0 	.word	0x200145e0
 800b0c4:	2000000c 	.word	0x2000000c

0800b0c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b0cc:	4802      	ldr	r0, [pc, #8]	; (800b0d8 <MX_USB_HOST_Process+0x10>)
 800b0ce:	f7fb fa79 	bl	80065c4 <USBH_Process>
}
 800b0d2:	bf00      	nop
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	200145e0 	.word	0x200145e0

0800b0dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b0e8:	78fb      	ldrb	r3, [r7, #3]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	d819      	bhi.n	800b124 <USBH_UserProcess+0x48>
 800b0f0:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <USBH_UserProcess+0x1c>)
 800b0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f6:	bf00      	nop
 800b0f8:	0800b125 	.word	0x0800b125
 800b0fc:	0800b115 	.word	0x0800b115
 800b100:	0800b125 	.word	0x0800b125
 800b104:	0800b11d 	.word	0x0800b11d
 800b108:	0800b10d 	.word	0x0800b10d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b10c:	4b09      	ldr	r3, [pc, #36]	; (800b134 <USBH_UserProcess+0x58>)
 800b10e:	2203      	movs	r2, #3
 800b110:	701a      	strb	r2, [r3, #0]
  break;
 800b112:	e008      	b.n	800b126 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b114:	4b07      	ldr	r3, [pc, #28]	; (800b134 <USBH_UserProcess+0x58>)
 800b116:	2202      	movs	r2, #2
 800b118:	701a      	strb	r2, [r3, #0]
  break;
 800b11a:	e004      	b.n	800b126 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b11c:	4b05      	ldr	r3, [pc, #20]	; (800b134 <USBH_UserProcess+0x58>)
 800b11e:	2201      	movs	r2, #1
 800b120:	701a      	strb	r2, [r3, #0]
  break;
 800b122:	e000      	b.n	800b126 <USBH_UserProcess+0x4a>

  default:
  break;
 800b124:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b126:	bf00      	nop
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	200149b8 	.word	0x200149b8

0800b138 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08a      	sub	sp, #40	; 0x28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b140:	f107 0314 	add.w	r3, r7, #20
 800b144:	2200      	movs	r2, #0
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	605a      	str	r2, [r3, #4]
 800b14a:	609a      	str	r2, [r3, #8]
 800b14c:	60da      	str	r2, [r3, #12]
 800b14e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b158:	d147      	bne.n	800b1ea <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b15a:	2300      	movs	r3, #0
 800b15c:	613b      	str	r3, [r7, #16]
 800b15e:	4b25      	ldr	r3, [pc, #148]	; (800b1f4 <HAL_HCD_MspInit+0xbc>)
 800b160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b162:	4a24      	ldr	r2, [pc, #144]	; (800b1f4 <HAL_HCD_MspInit+0xbc>)
 800b164:	f043 0301 	orr.w	r3, r3, #1
 800b168:	6313      	str	r3, [r2, #48]	; 0x30
 800b16a:	4b22      	ldr	r3, [pc, #136]	; (800b1f4 <HAL_HCD_MspInit+0xbc>)
 800b16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	613b      	str	r3, [r7, #16]
 800b174:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b17a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b17c:	2300      	movs	r3, #0
 800b17e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b180:	2300      	movs	r3, #0
 800b182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b184:	f107 0314 	add.w	r3, r7, #20
 800b188:	4619      	mov	r1, r3
 800b18a:	481b      	ldr	r0, [pc, #108]	; (800b1f8 <HAL_HCD_MspInit+0xc0>)
 800b18c:	f7f6 f8a6 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b190:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b196:	2302      	movs	r3, #2
 800b198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19a:	2300      	movs	r3, #0
 800b19c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b1a2:	230a      	movs	r3, #10
 800b1a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1a6:	f107 0314 	add.w	r3, r7, #20
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	4812      	ldr	r0, [pc, #72]	; (800b1f8 <HAL_HCD_MspInit+0xc0>)
 800b1ae:	f7f6 f895 	bl	80012dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b1b2:	4b10      	ldr	r3, [pc, #64]	; (800b1f4 <HAL_HCD_MspInit+0xbc>)
 800b1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b6:	4a0f      	ldr	r2, [pc, #60]	; (800b1f4 <HAL_HCD_MspInit+0xbc>)
 800b1b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1bc:	6353      	str	r3, [r2, #52]	; 0x34
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	4b0c      	ldr	r3, [pc, #48]	; (800b1f4 <HAL_HCD_MspInit+0xbc>)
 800b1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c6:	4a0b      	ldr	r2, [pc, #44]	; (800b1f4 <HAL_HCD_MspInit+0xbc>)
 800b1c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1cc:	6453      	str	r3, [r2, #68]	; 0x44
 800b1ce:	4b09      	ldr	r3, [pc, #36]	; (800b1f4 <HAL_HCD_MspInit+0xbc>)
 800b1d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2100      	movs	r1, #0
 800b1de:	2043      	movs	r0, #67	; 0x43
 800b1e0:	f7f6 f852 	bl	8001288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b1e4:	2043      	movs	r0, #67	; 0x43
 800b1e6:	f7f6 f86b 	bl	80012c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b1ea:	bf00      	nop
 800b1ec:	3728      	adds	r7, #40	; 0x28
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	40023800 	.word	0x40023800
 800b1f8:	40020000 	.word	0x40020000

0800b1fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fb fdb9 	bl	8006d82 <USBH_LL_IncTimer>
}
 800b210:	bf00      	nop
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b226:	4618      	mov	r0, r3
 800b228:	f7fb fdf1 	bl	8006e0e <USBH_LL_Connect>
}
 800b22c:	bf00      	nop
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b242:	4618      	mov	r0, r3
 800b244:	f7fb fdfa 	bl	8006e3c <USBH_LL_Disconnect>
}
 800b248:	bf00      	nop
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	70fb      	strb	r3, [r7, #3]
 800b25c:	4613      	mov	r3, r2
 800b25e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fb fdab 	bl	8006dd6 <USBH_LL_PortEnabled>
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b296:	4618      	mov	r0, r3
 800b298:	f7fb fdab 	bl	8006df2 <USBH_LL_PortDisabled>
}
 800b29c:	bf00      	nop
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d12a      	bne.n	800b30c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b2b6:	4a18      	ldr	r2, [pc, #96]	; (800b318 <USBH_LL_Init+0x74>)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a15      	ldr	r2, [pc, #84]	; (800b318 <USBH_LL_Init+0x74>)
 800b2c2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2c6:	4b14      	ldr	r3, [pc, #80]	; (800b318 <USBH_LL_Init+0x74>)
 800b2c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b2cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b2ce:	4b12      	ldr	r3, [pc, #72]	; (800b318 <USBH_LL_Init+0x74>)
 800b2d0:	2208      	movs	r2, #8
 800b2d2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b2d4:	4b10      	ldr	r3, [pc, #64]	; (800b318 <USBH_LL_Init+0x74>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2da:	4b0f      	ldr	r3, [pc, #60]	; (800b318 <USBH_LL_Init+0x74>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b2e0:	4b0d      	ldr	r3, [pc, #52]	; (800b318 <USBH_LL_Init+0x74>)
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b2e6:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <USBH_LL_Init+0x74>)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b2ec:	480a      	ldr	r0, [pc, #40]	; (800b318 <USBH_LL_Init+0x74>)
 800b2ee:	f7f6 f9ac 	bl	800164a <HAL_HCD_Init>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b2f8:	f7f5 fc44 	bl	8000b84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b2fc:	4806      	ldr	r0, [pc, #24]	; (800b318 <USBH_LL_Init+0x74>)
 800b2fe:	f7f6 fd90 	bl	8001e22 <HAL_HCD_GetCurrentFrame>
 800b302:	4603      	mov	r3, r0
 800b304:	4619      	mov	r1, r3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7fb fd2c 	bl	8006d64 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	200149bc 	.word	0x200149bc

0800b31c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b332:	4618      	mov	r0, r3
 800b334:	f7f6 fcff 	bl	8001d36 <HAL_HCD_Start>
 800b338:	4603      	mov	r3, r0
 800b33a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 f95c 	bl	800b5fc <USBH_Get_USB_Status>
 800b344:	4603      	mov	r3, r0
 800b346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b348:	7bbb      	ldrb	r3, [r7, #14]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b084      	sub	sp, #16
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b368:	4618      	mov	r0, r3
 800b36a:	f7f6 fd07 	bl	8001d7c <HAL_HCD_Stop>
 800b36e:	4603      	mov	r3, r0
 800b370:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	4618      	mov	r0, r3
 800b376:	f000 f941 	bl	800b5fc <USBH_Get_USB_Status>
 800b37a:	4603      	mov	r3, r0
 800b37c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b390:	2301      	movs	r3, #1
 800b392:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7f6 fd4f 	bl	8001e3e <HAL_HCD_GetCurrentSpeed>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d00c      	beq.n	800b3c0 <USBH_LL_GetSpeed+0x38>
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d80d      	bhi.n	800b3c6 <USBH_LL_GetSpeed+0x3e>
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <USBH_LL_GetSpeed+0x2c>
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d003      	beq.n	800b3ba <USBH_LL_GetSpeed+0x32>
 800b3b2:	e008      	b.n	800b3c6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b8:	e008      	b.n	800b3cc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b3be:	e005      	b.n	800b3cc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c4:	e002      	b.n	800b3cc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ca:	bf00      	nop
  }
  return  speed;
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7f6 fce2 	bl	8001db6 <HAL_HCD_ResetPort>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 f8ff 	bl	800b5fc <USBH_Get_USB_Status>
 800b3fe:	4603      	mov	r3, r0
 800b400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b402:	7bbb      	ldrb	r3, [r7, #14]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b41e:	78fa      	ldrb	r2, [r7, #3]
 800b420:	4611      	mov	r1, r2
 800b422:	4618      	mov	r0, r3
 800b424:	f7f6 fce9 	bl	8001dfa <HAL_HCD_HC_GetXferCount>
 800b428:	4603      	mov	r3, r0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b432:	b590      	push	{r4, r7, lr}
 800b434:	b089      	sub	sp, #36	; 0x24
 800b436:	af04      	add	r7, sp, #16
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	4608      	mov	r0, r1
 800b43c:	4611      	mov	r1, r2
 800b43e:	461a      	mov	r2, r3
 800b440:	4603      	mov	r3, r0
 800b442:	70fb      	strb	r3, [r7, #3]
 800b444:	460b      	mov	r3, r1
 800b446:	70bb      	strb	r3, [r7, #2]
 800b448:	4613      	mov	r3, r2
 800b44a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b45a:	787c      	ldrb	r4, [r7, #1]
 800b45c:	78ba      	ldrb	r2, [r7, #2]
 800b45e:	78f9      	ldrb	r1, [r7, #3]
 800b460:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b462:	9302      	str	r3, [sp, #8]
 800b464:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	4623      	mov	r3, r4
 800b472:	f7f6 f94c 	bl	800170e <HAL_HCD_HC_Init>
 800b476:	4603      	mov	r3, r0
 800b478:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 f8bd 	bl	800b5fc <USBH_Get_USB_Status>
 800b482:	4603      	mov	r3, r0
 800b484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b486:	7bbb      	ldrb	r3, [r7, #14]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd90      	pop	{r4, r7, pc}

0800b490 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4aa:	78fa      	ldrb	r2, [r7, #3]
 800b4ac:	4611      	mov	r1, r2
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7f6 f9bc 	bl	800182c <HAL_HCD_HC_Halt>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f000 f89e 	bl	800b5fc <USBH_Get_USB_Status>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b4ce:	b590      	push	{r4, r7, lr}
 800b4d0:	b089      	sub	sp, #36	; 0x24
 800b4d2:	af04      	add	r7, sp, #16
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4611      	mov	r1, r2
 800b4da:	461a      	mov	r2, r3
 800b4dc:	4603      	mov	r3, r0
 800b4de:	70fb      	strb	r3, [r7, #3]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70bb      	strb	r3, [r7, #2]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b4f6:	787c      	ldrb	r4, [r7, #1]
 800b4f8:	78ba      	ldrb	r2, [r7, #2]
 800b4fa:	78f9      	ldrb	r1, [r7, #3]
 800b4fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b500:	9303      	str	r3, [sp, #12]
 800b502:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b504:	9302      	str	r3, [sp, #8]
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	4623      	mov	r3, r4
 800b512:	f7f6 f9af 	bl	8001874 <HAL_HCD_HC_SubmitRequest>
 800b516:	4603      	mov	r3, r0
 800b518:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b51a:	7bfb      	ldrb	r3, [r7, #15]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 f86d 	bl	800b5fc <USBH_Get_USB_Status>
 800b522:	4603      	mov	r3, r0
 800b524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b526:	7bbb      	ldrb	r3, [r7, #14]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd90      	pop	{r4, r7, pc}

0800b530 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b542:	78fa      	ldrb	r2, [r7, #3]
 800b544:	4611      	mov	r1, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f7f6 fc43 	bl	8001dd2 <HAL_HCD_HC_GetURBState>
 800b54c:	4603      	mov	r3, r0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b082      	sub	sp, #8
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d103      	bne.n	800b574 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 f870 	bl	800b654 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b574:	20c8      	movs	r0, #200	; 0xc8
 800b576:	f7f5 fdab 	bl	80010d0 <HAL_Delay>
  return USBH_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
 800b590:	4613      	mov	r3, r2
 800b592:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b59a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b59c:	78fb      	ldrb	r3, [r7, #3]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	212c      	movs	r1, #44	; 0x2c
 800b5a2:	fb01 f303 	mul.w	r3, r1, r3
 800b5a6:	4413      	add	r3, r2
 800b5a8:	333b      	adds	r3, #59	; 0x3b
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d009      	beq.n	800b5c4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b5b0:	78fb      	ldrb	r3, [r7, #3]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	212c      	movs	r1, #44	; 0x2c
 800b5b6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3354      	adds	r3, #84	; 0x54
 800b5be:	78ba      	ldrb	r2, [r7, #2]
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	e008      	b.n	800b5d6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	212c      	movs	r1, #44	; 0x2c
 800b5ca:	fb01 f303 	mul.w	r3, r1, r3
 800b5ce:	4413      	add	r3, r2
 800b5d0:	3355      	adds	r3, #85	; 0x55
 800b5d2:	78ba      	ldrb	r2, [r7, #2]
 800b5d4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7f5 fd6f 	bl	80010d0 <HAL_Delay>
}
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
	...

0800b5fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d817      	bhi.n	800b640 <USBH_Get_USB_Status+0x44>
 800b610:	a201      	add	r2, pc, #4	; (adr r2, 800b618 <USBH_Get_USB_Status+0x1c>)
 800b612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b616:	bf00      	nop
 800b618:	0800b629 	.word	0x0800b629
 800b61c:	0800b62f 	.word	0x0800b62f
 800b620:	0800b635 	.word	0x0800b635
 800b624:	0800b63b 	.word	0x0800b63b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b628:	2300      	movs	r3, #0
 800b62a:	73fb      	strb	r3, [r7, #15]
    break;
 800b62c:	e00b      	b.n	800b646 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b62e:	2302      	movs	r3, #2
 800b630:	73fb      	strb	r3, [r7, #15]
    break;
 800b632:	e008      	b.n	800b646 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b634:	2301      	movs	r3, #1
 800b636:	73fb      	strb	r3, [r7, #15]
    break;
 800b638:	e005      	b.n	800b646 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b63a:	2302      	movs	r3, #2
 800b63c:	73fb      	strb	r3, [r7, #15]
    break;
 800b63e:	e002      	b.n	800b646 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b640:	2302      	movs	r3, #2
 800b642:	73fb      	strb	r3, [r7, #15]
    break;
 800b644:	bf00      	nop
  }
  return usb_status;
 800b646:	7bfb      	ldrb	r3, [r7, #15]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b65e:	79fb      	ldrb	r3, [r7, #7]
 800b660:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d102      	bne.n	800b66e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b668:	2300      	movs	r3, #0
 800b66a:	73fb      	strb	r3, [r7, #15]
 800b66c:	e001      	b.n	800b672 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b66e:	2301      	movs	r3, #1
 800b670:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	461a      	mov	r2, r3
 800b676:	2101      	movs	r1, #1
 800b678:	4803      	ldr	r0, [pc, #12]	; (800b688 <MX_DriverVbusFS+0x34>)
 800b67a:	f7f5 ffb3 	bl	80015e4 <HAL_GPIO_WritePin>
}
 800b67e:	bf00      	nop
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	40020800 	.word	0x40020800

0800b68c <__libc_init_array>:
 800b68c:	b570      	push	{r4, r5, r6, lr}
 800b68e:	4d0d      	ldr	r5, [pc, #52]	; (800b6c4 <__libc_init_array+0x38>)
 800b690:	4c0d      	ldr	r4, [pc, #52]	; (800b6c8 <__libc_init_array+0x3c>)
 800b692:	1b64      	subs	r4, r4, r5
 800b694:	10a4      	asrs	r4, r4, #2
 800b696:	2600      	movs	r6, #0
 800b698:	42a6      	cmp	r6, r4
 800b69a:	d109      	bne.n	800b6b0 <__libc_init_array+0x24>
 800b69c:	4d0b      	ldr	r5, [pc, #44]	; (800b6cc <__libc_init_array+0x40>)
 800b69e:	4c0c      	ldr	r4, [pc, #48]	; (800b6d0 <__libc_init_array+0x44>)
 800b6a0:	f000 f95a 	bl	800b958 <_init>
 800b6a4:	1b64      	subs	r4, r4, r5
 800b6a6:	10a4      	asrs	r4, r4, #2
 800b6a8:	2600      	movs	r6, #0
 800b6aa:	42a6      	cmp	r6, r4
 800b6ac:	d105      	bne.n	800b6ba <__libc_init_array+0x2e>
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}
 800b6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b4:	4798      	blx	r3
 800b6b6:	3601      	adds	r6, #1
 800b6b8:	e7ee      	b.n	800b698 <__libc_init_array+0xc>
 800b6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6be:	4798      	blx	r3
 800b6c0:	3601      	adds	r6, #1
 800b6c2:	e7f2      	b.n	800b6aa <__libc_init_array+0x1e>
 800b6c4:	0800ba94 	.word	0x0800ba94
 800b6c8:	0800ba94 	.word	0x0800ba94
 800b6cc:	0800ba94 	.word	0x0800ba94
 800b6d0:	0800ba98 	.word	0x0800ba98

0800b6d4 <malloc>:
 800b6d4:	4b02      	ldr	r3, [pc, #8]	; (800b6e0 <malloc+0xc>)
 800b6d6:	4601      	mov	r1, r0
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	f000 b89d 	b.w	800b818 <_malloc_r>
 800b6de:	bf00      	nop
 800b6e0:	20000034 	.word	0x20000034

0800b6e4 <free>:
 800b6e4:	4b02      	ldr	r3, [pc, #8]	; (800b6f0 <free+0xc>)
 800b6e6:	4601      	mov	r1, r0
 800b6e8:	6818      	ldr	r0, [r3, #0]
 800b6ea:	f000 b829 	b.w	800b740 <_free_r>
 800b6ee:	bf00      	nop
 800b6f0:	20000034 	.word	0x20000034

0800b6f4 <memcmp>:
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	3901      	subs	r1, #1
 800b6f8:	4402      	add	r2, r0
 800b6fa:	4290      	cmp	r0, r2
 800b6fc:	d101      	bne.n	800b702 <memcmp+0xe>
 800b6fe:	2000      	movs	r0, #0
 800b700:	e005      	b.n	800b70e <memcmp+0x1a>
 800b702:	7803      	ldrb	r3, [r0, #0]
 800b704:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b708:	42a3      	cmp	r3, r4
 800b70a:	d001      	beq.n	800b710 <memcmp+0x1c>
 800b70c:	1b18      	subs	r0, r3, r4
 800b70e:	bd10      	pop	{r4, pc}
 800b710:	3001      	adds	r0, #1
 800b712:	e7f2      	b.n	800b6fa <memcmp+0x6>

0800b714 <memcpy>:
 800b714:	440a      	add	r2, r1
 800b716:	4291      	cmp	r1, r2
 800b718:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b71c:	d100      	bne.n	800b720 <memcpy+0xc>
 800b71e:	4770      	bx	lr
 800b720:	b510      	push	{r4, lr}
 800b722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b72a:	4291      	cmp	r1, r2
 800b72c:	d1f9      	bne.n	800b722 <memcpy+0xe>
 800b72e:	bd10      	pop	{r4, pc}

0800b730 <memset>:
 800b730:	4402      	add	r2, r0
 800b732:	4603      	mov	r3, r0
 800b734:	4293      	cmp	r3, r2
 800b736:	d100      	bne.n	800b73a <memset+0xa>
 800b738:	4770      	bx	lr
 800b73a:	f803 1b01 	strb.w	r1, [r3], #1
 800b73e:	e7f9      	b.n	800b734 <memset+0x4>

0800b740 <_free_r>:
 800b740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b742:	2900      	cmp	r1, #0
 800b744:	d044      	beq.n	800b7d0 <_free_r+0x90>
 800b746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b74a:	9001      	str	r0, [sp, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f1a1 0404 	sub.w	r4, r1, #4
 800b752:	bfb8      	it	lt
 800b754:	18e4      	addlt	r4, r4, r3
 800b756:	f000 f8e3 	bl	800b920 <__malloc_lock>
 800b75a:	4a1e      	ldr	r2, [pc, #120]	; (800b7d4 <_free_r+0x94>)
 800b75c:	9801      	ldr	r0, [sp, #4]
 800b75e:	6813      	ldr	r3, [r2, #0]
 800b760:	b933      	cbnz	r3, 800b770 <_free_r+0x30>
 800b762:	6063      	str	r3, [r4, #4]
 800b764:	6014      	str	r4, [r2, #0]
 800b766:	b003      	add	sp, #12
 800b768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b76c:	f000 b8de 	b.w	800b92c <__malloc_unlock>
 800b770:	42a3      	cmp	r3, r4
 800b772:	d908      	bls.n	800b786 <_free_r+0x46>
 800b774:	6825      	ldr	r5, [r4, #0]
 800b776:	1961      	adds	r1, r4, r5
 800b778:	428b      	cmp	r3, r1
 800b77a:	bf01      	itttt	eq
 800b77c:	6819      	ldreq	r1, [r3, #0]
 800b77e:	685b      	ldreq	r3, [r3, #4]
 800b780:	1949      	addeq	r1, r1, r5
 800b782:	6021      	streq	r1, [r4, #0]
 800b784:	e7ed      	b.n	800b762 <_free_r+0x22>
 800b786:	461a      	mov	r2, r3
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	b10b      	cbz	r3, 800b790 <_free_r+0x50>
 800b78c:	42a3      	cmp	r3, r4
 800b78e:	d9fa      	bls.n	800b786 <_free_r+0x46>
 800b790:	6811      	ldr	r1, [r2, #0]
 800b792:	1855      	adds	r5, r2, r1
 800b794:	42a5      	cmp	r5, r4
 800b796:	d10b      	bne.n	800b7b0 <_free_r+0x70>
 800b798:	6824      	ldr	r4, [r4, #0]
 800b79a:	4421      	add	r1, r4
 800b79c:	1854      	adds	r4, r2, r1
 800b79e:	42a3      	cmp	r3, r4
 800b7a0:	6011      	str	r1, [r2, #0]
 800b7a2:	d1e0      	bne.n	800b766 <_free_r+0x26>
 800b7a4:	681c      	ldr	r4, [r3, #0]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	6053      	str	r3, [r2, #4]
 800b7aa:	4421      	add	r1, r4
 800b7ac:	6011      	str	r1, [r2, #0]
 800b7ae:	e7da      	b.n	800b766 <_free_r+0x26>
 800b7b0:	d902      	bls.n	800b7b8 <_free_r+0x78>
 800b7b2:	230c      	movs	r3, #12
 800b7b4:	6003      	str	r3, [r0, #0]
 800b7b6:	e7d6      	b.n	800b766 <_free_r+0x26>
 800b7b8:	6825      	ldr	r5, [r4, #0]
 800b7ba:	1961      	adds	r1, r4, r5
 800b7bc:	428b      	cmp	r3, r1
 800b7be:	bf04      	itt	eq
 800b7c0:	6819      	ldreq	r1, [r3, #0]
 800b7c2:	685b      	ldreq	r3, [r3, #4]
 800b7c4:	6063      	str	r3, [r4, #4]
 800b7c6:	bf04      	itt	eq
 800b7c8:	1949      	addeq	r1, r1, r5
 800b7ca:	6021      	streq	r1, [r4, #0]
 800b7cc:	6054      	str	r4, [r2, #4]
 800b7ce:	e7ca      	b.n	800b766 <_free_r+0x26>
 800b7d0:	b003      	add	sp, #12
 800b7d2:	bd30      	pop	{r4, r5, pc}
 800b7d4:	20014cc0 	.word	0x20014cc0

0800b7d8 <sbrk_aligned>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	4e0e      	ldr	r6, [pc, #56]	; (800b814 <sbrk_aligned+0x3c>)
 800b7dc:	460c      	mov	r4, r1
 800b7de:	6831      	ldr	r1, [r6, #0]
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	b911      	cbnz	r1, 800b7ea <sbrk_aligned+0x12>
 800b7e4:	f000 f88c 	bl	800b900 <_sbrk_r>
 800b7e8:	6030      	str	r0, [r6, #0]
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f000 f887 	bl	800b900 <_sbrk_r>
 800b7f2:	1c43      	adds	r3, r0, #1
 800b7f4:	d00a      	beq.n	800b80c <sbrk_aligned+0x34>
 800b7f6:	1cc4      	adds	r4, r0, #3
 800b7f8:	f024 0403 	bic.w	r4, r4, #3
 800b7fc:	42a0      	cmp	r0, r4
 800b7fe:	d007      	beq.n	800b810 <sbrk_aligned+0x38>
 800b800:	1a21      	subs	r1, r4, r0
 800b802:	4628      	mov	r0, r5
 800b804:	f000 f87c 	bl	800b900 <_sbrk_r>
 800b808:	3001      	adds	r0, #1
 800b80a:	d101      	bne.n	800b810 <sbrk_aligned+0x38>
 800b80c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b810:	4620      	mov	r0, r4
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	20014cc4 	.word	0x20014cc4

0800b818 <_malloc_r>:
 800b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81c:	1ccd      	adds	r5, r1, #3
 800b81e:	f025 0503 	bic.w	r5, r5, #3
 800b822:	3508      	adds	r5, #8
 800b824:	2d0c      	cmp	r5, #12
 800b826:	bf38      	it	cc
 800b828:	250c      	movcc	r5, #12
 800b82a:	2d00      	cmp	r5, #0
 800b82c:	4607      	mov	r7, r0
 800b82e:	db01      	blt.n	800b834 <_malloc_r+0x1c>
 800b830:	42a9      	cmp	r1, r5
 800b832:	d905      	bls.n	800b840 <_malloc_r+0x28>
 800b834:	230c      	movs	r3, #12
 800b836:	603b      	str	r3, [r7, #0]
 800b838:	2600      	movs	r6, #0
 800b83a:	4630      	mov	r0, r6
 800b83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b840:	4e2e      	ldr	r6, [pc, #184]	; (800b8fc <_malloc_r+0xe4>)
 800b842:	f000 f86d 	bl	800b920 <__malloc_lock>
 800b846:	6833      	ldr	r3, [r6, #0]
 800b848:	461c      	mov	r4, r3
 800b84a:	bb34      	cbnz	r4, 800b89a <_malloc_r+0x82>
 800b84c:	4629      	mov	r1, r5
 800b84e:	4638      	mov	r0, r7
 800b850:	f7ff ffc2 	bl	800b7d8 <sbrk_aligned>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	4604      	mov	r4, r0
 800b858:	d14d      	bne.n	800b8f6 <_malloc_r+0xde>
 800b85a:	6834      	ldr	r4, [r6, #0]
 800b85c:	4626      	mov	r6, r4
 800b85e:	2e00      	cmp	r6, #0
 800b860:	d140      	bne.n	800b8e4 <_malloc_r+0xcc>
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	4631      	mov	r1, r6
 800b866:	4638      	mov	r0, r7
 800b868:	eb04 0803 	add.w	r8, r4, r3
 800b86c:	f000 f848 	bl	800b900 <_sbrk_r>
 800b870:	4580      	cmp	r8, r0
 800b872:	d13a      	bne.n	800b8ea <_malloc_r+0xd2>
 800b874:	6821      	ldr	r1, [r4, #0]
 800b876:	3503      	adds	r5, #3
 800b878:	1a6d      	subs	r5, r5, r1
 800b87a:	f025 0503 	bic.w	r5, r5, #3
 800b87e:	3508      	adds	r5, #8
 800b880:	2d0c      	cmp	r5, #12
 800b882:	bf38      	it	cc
 800b884:	250c      	movcc	r5, #12
 800b886:	4629      	mov	r1, r5
 800b888:	4638      	mov	r0, r7
 800b88a:	f7ff ffa5 	bl	800b7d8 <sbrk_aligned>
 800b88e:	3001      	adds	r0, #1
 800b890:	d02b      	beq.n	800b8ea <_malloc_r+0xd2>
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	442b      	add	r3, r5
 800b896:	6023      	str	r3, [r4, #0]
 800b898:	e00e      	b.n	800b8b8 <_malloc_r+0xa0>
 800b89a:	6822      	ldr	r2, [r4, #0]
 800b89c:	1b52      	subs	r2, r2, r5
 800b89e:	d41e      	bmi.n	800b8de <_malloc_r+0xc6>
 800b8a0:	2a0b      	cmp	r2, #11
 800b8a2:	d916      	bls.n	800b8d2 <_malloc_r+0xba>
 800b8a4:	1961      	adds	r1, r4, r5
 800b8a6:	42a3      	cmp	r3, r4
 800b8a8:	6025      	str	r5, [r4, #0]
 800b8aa:	bf18      	it	ne
 800b8ac:	6059      	strne	r1, [r3, #4]
 800b8ae:	6863      	ldr	r3, [r4, #4]
 800b8b0:	bf08      	it	eq
 800b8b2:	6031      	streq	r1, [r6, #0]
 800b8b4:	5162      	str	r2, [r4, r5]
 800b8b6:	604b      	str	r3, [r1, #4]
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f104 060b 	add.w	r6, r4, #11
 800b8be:	f000 f835 	bl	800b92c <__malloc_unlock>
 800b8c2:	f026 0607 	bic.w	r6, r6, #7
 800b8c6:	1d23      	adds	r3, r4, #4
 800b8c8:	1af2      	subs	r2, r6, r3
 800b8ca:	d0b6      	beq.n	800b83a <_malloc_r+0x22>
 800b8cc:	1b9b      	subs	r3, r3, r6
 800b8ce:	50a3      	str	r3, [r4, r2]
 800b8d0:	e7b3      	b.n	800b83a <_malloc_r+0x22>
 800b8d2:	6862      	ldr	r2, [r4, #4]
 800b8d4:	42a3      	cmp	r3, r4
 800b8d6:	bf0c      	ite	eq
 800b8d8:	6032      	streq	r2, [r6, #0]
 800b8da:	605a      	strne	r2, [r3, #4]
 800b8dc:	e7ec      	b.n	800b8b8 <_malloc_r+0xa0>
 800b8de:	4623      	mov	r3, r4
 800b8e0:	6864      	ldr	r4, [r4, #4]
 800b8e2:	e7b2      	b.n	800b84a <_malloc_r+0x32>
 800b8e4:	4634      	mov	r4, r6
 800b8e6:	6876      	ldr	r6, [r6, #4]
 800b8e8:	e7b9      	b.n	800b85e <_malloc_r+0x46>
 800b8ea:	230c      	movs	r3, #12
 800b8ec:	603b      	str	r3, [r7, #0]
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	f000 f81c 	bl	800b92c <__malloc_unlock>
 800b8f4:	e7a1      	b.n	800b83a <_malloc_r+0x22>
 800b8f6:	6025      	str	r5, [r4, #0]
 800b8f8:	e7de      	b.n	800b8b8 <_malloc_r+0xa0>
 800b8fa:	bf00      	nop
 800b8fc:	20014cc0 	.word	0x20014cc0

0800b900 <_sbrk_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d06      	ldr	r5, [pc, #24]	; (800b91c <_sbrk_r+0x1c>)
 800b904:	2300      	movs	r3, #0
 800b906:	4604      	mov	r4, r0
 800b908:	4608      	mov	r0, r1
 800b90a:	602b      	str	r3, [r5, #0]
 800b90c:	f000 f816 	bl	800b93c <_sbrk>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_sbrk_r+0x1a>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_sbrk_r+0x1a>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	20014cc8 	.word	0x20014cc8

0800b920 <__malloc_lock>:
 800b920:	4801      	ldr	r0, [pc, #4]	; (800b928 <__malloc_lock+0x8>)
 800b922:	f000 b809 	b.w	800b938 <__retarget_lock_acquire_recursive>
 800b926:	bf00      	nop
 800b928:	20014ccc 	.word	0x20014ccc

0800b92c <__malloc_unlock>:
 800b92c:	4801      	ldr	r0, [pc, #4]	; (800b934 <__malloc_unlock+0x8>)
 800b92e:	f000 b804 	b.w	800b93a <__retarget_lock_release_recursive>
 800b932:	bf00      	nop
 800b934:	20014ccc 	.word	0x20014ccc

0800b938 <__retarget_lock_acquire_recursive>:
 800b938:	4770      	bx	lr

0800b93a <__retarget_lock_release_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <_sbrk>:
 800b93c:	4a04      	ldr	r2, [pc, #16]	; (800b950 <_sbrk+0x14>)
 800b93e:	6811      	ldr	r1, [r2, #0]
 800b940:	4603      	mov	r3, r0
 800b942:	b909      	cbnz	r1, 800b948 <_sbrk+0xc>
 800b944:	4903      	ldr	r1, [pc, #12]	; (800b954 <_sbrk+0x18>)
 800b946:	6011      	str	r1, [r2, #0]
 800b948:	6810      	ldr	r0, [r2, #0]
 800b94a:	4403      	add	r3, r0
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	4770      	bx	lr
 800b950:	20014cd0 	.word	0x20014cd0
 800b954:	20014cd8 	.word	0x20014cd8

0800b958 <_init>:
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	bf00      	nop
 800b95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b95e:	bc08      	pop	{r3}
 800b960:	469e      	mov	lr, r3
 800b962:	4770      	bx	lr

0800b964 <_fini>:
 800b964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b966:	bf00      	nop
 800b968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b96a:	bc08      	pop	{r3}
 800b96c:	469e      	mov	lr, r3
 800b96e:	4770      	bx	lr
