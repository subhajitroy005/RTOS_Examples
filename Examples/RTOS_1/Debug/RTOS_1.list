
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009e94  08009e94  00019e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f3c  08009f3c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009f3c  08009f3c  00019f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f44  08009f44  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f48  08009f48  00019f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000135c0  20000098  08009fe4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013658  08009fe4  00023658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7e8  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048c3  00000000  00000000  0003e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00043178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  00044bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c64e  00000000  00000000  00046408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000205f5  00000000  00000000  00062a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb0e  00000000  00000000  0008304b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122b59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000753c  00000000  00000000  00122bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e7c 	.word	0x08009e7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08009e7c 	.word	0x08009e7c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fd97 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f853 	bl	8000598 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f2:	f000 f8bb 	bl	800066c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f99b 	bl	8000830 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004fa:	f000 f8d7 	bl	80006ac <MX_I2C1_Init>
  MX_I2S2_Init();
 80004fe:	f000 f903 	bl	8000708 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000502:	f000 f92f 	bl	8000764 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000506:	f000 f95d 	bl	80007c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800050a:	f008 fc67 	bl	8008ddc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task_1", 200, "Hello 1", 2, &task_h_1);
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <main+0x9c>)
 800051a:	22c8      	movs	r2, #200	; 0xc8
 800051c:	4919      	ldr	r1, [pc, #100]	; (8000584 <main+0xa0>)
 800051e:	481a      	ldr	r0, [pc, #104]	; (8000588 <main+0xa4>)
 8000520:	f007 ff77 	bl	8008412 <xTaskCreate>
 8000524:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS); // Assert here if the task creation has an error
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d00a      	beq.n	8000542 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800052c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000530:	f383 8811 	msr	BASEPRI, r3
 8000534:	f3bf 8f6f 	isb	sy
 8000538:	f3bf 8f4f 	dsb	sy
 800053c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800053e:	bf00      	nop
 8000540:	e7fe      	b.n	8000540 <main+0x5c>
    status = xTaskCreate(task2_handler, "Task_2", 200, "Hello 2", 2, &task_h_2);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2302      	movs	r3, #2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <main+0xa8>)
 800054c:	22c8      	movs	r2, #200	; 0xc8
 800054e:	4910      	ldr	r1, [pc, #64]	; (8000590 <main+0xac>)
 8000550:	4810      	ldr	r0, [pc, #64]	; (8000594 <main+0xb0>)
 8000552:	f007 ff5e 	bl	8008412 <xTaskCreate>
 8000556:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d00a      	beq.n	8000574 <main+0x90>
        __asm volatile
 800055e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000562:	f383 8811 	msr	BASEPRI, r3
 8000566:	f3bf 8f6f 	isb	sy
 800056a:	f3bf 8f4f 	dsb	sy
 800056e:	60fb      	str	r3, [r7, #12]
    }
 8000570:	bf00      	nop
 8000572:	e7fe      	b.n	8000572 <main+0x8e>

    vTaskStartScheduler();
 8000574:	f008 f8b8 	bl	80086e8 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000578:	f008 fc56 	bl	8008e28 <MX_USB_HOST_Process>
 800057c:	e7fc      	b.n	8000578 <main+0x94>
 800057e:	bf00      	nop
 8000580:	08009e94 	.word	0x08009e94
 8000584:	08009e9c 	.word	0x08009e9c
 8000588:	080009e5 	.word	0x080009e5
 800058c:	08009ea4 	.word	0x08009ea4
 8000590:	08009eac 	.word	0x08009eac
 8000594:	080009f5 	.word	0x080009f5

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f008 ff54 	bl	8009454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f003 f9d0 	bl	80039c4 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062a:	f000 f9fd 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fc32 	bl	8003eb4 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000656:	f000 f9e7 	bl	8000a28 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000682:	2301      	movs	r3, #1
 8000684:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000686:	23c8      	movs	r3, #200	; 0xc8
 8000688:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800068a:	2305      	movs	r3, #5
 800068c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fe5f 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80006a0:	f000 f9c2 	bl	8000a28 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f002 fb87 	bl	8002dfc <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f998 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000b4 	.word	0x200000b4
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2S2_Init+0x50>)
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <MX_I2S2_Init+0x54>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_I2S2_Init+0x50>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2S2_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_I2S2_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_I2S2_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_I2S2_Init+0x50>)
 800072e:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <MX_I2S2_Init+0x58>)
 8000730:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_I2S2_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_I2S2_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_I2S2_Init+0x50>)
 8000740:	2201      	movs	r2, #1
 8000742:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_I2S2_Init+0x50>)
 8000746:	f002 fc9d 	bl	8003084 <HAL_I2S_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000750:	f000 f96a 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000108 	.word	0x20000108
 800075c:	40003800 	.word	0x40003800
 8000760:	00017700 	.word	0x00017700

08000764 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_I2S3_Init+0x54>)
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <MX_I2S3_Init+0x58>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_I2S3_Init+0x54>)
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <MX_I2S3_Init+0x5c>)
 800078e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2S3_Init+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2S3_Init+0x54>)
 80007a4:	f002 fc6e 	bl	8003084 <HAL_I2S_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ae:	f000 f93b 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000150 	.word	0x20000150
 80007bc:	40003c00 	.word	0x40003c00
 80007c0:	00017700 	.word	0x00017700

080007c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_SPI1_Init+0x64>)
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <MX_SPI1_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI1_Init+0x64>)
 8000810:	220a      	movs	r2, #10
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_SPI1_Init+0x64>)
 8000816:	f003 feef 	bl	80045f8 <HAL_SPI_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000820:	f000 f902 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000198 	.word	0x20000198
 800082c:	40013000 	.word	0x40013000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b61      	ldr	r3, [pc, #388]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a60      	ldr	r2, [pc, #384]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b5e      	ldr	r3, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b5a      	ldr	r3, [pc, #360]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a59      	ldr	r2, [pc, #356]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b57      	ldr	r3, [pc, #348]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b4c      	ldr	r3, [pc, #304]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a4b      	ldr	r2, [pc, #300]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a44      	ldr	r2, [pc, #272]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a3d      	ldr	r2, [pc, #244]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <MX_GPIO_Init+0x1a0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	4838      	ldr	r0, [pc, #224]	; (80009d4 <MX_GPIO_Init+0x1a4>)
 80008f4:	f000 fe5e 	bl	80015b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	4836      	ldr	r0, [pc, #216]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 80008fe:	f000 fe59 	bl	80015b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000902:	2200      	movs	r2, #0
 8000904:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000908:	4834      	ldr	r0, [pc, #208]	; (80009dc <MX_GPIO_Init+0x1ac>)
 800090a:	f000 fe53 	bl	80015b4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800090e:	2304      	movs	r3, #4
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	482c      	ldr	r0, [pc, #176]	; (80009d4 <MX_GPIO_Init+0x1a4>)
 8000922:	f000 fcc3 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4825      	ldr	r0, [pc, #148]	; (80009d4 <MX_GPIO_Init+0x1a4>)
 800093e:	f000 fcb5 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000942:	2332      	movs	r3, #50	; 0x32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000946:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	481f      	ldr	r0, [pc, #124]	; (80009d4 <MX_GPIO_Init+0x1a4>)
 8000958:	f000 fca8 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800095c:	2301      	movs	r3, #1
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 8000974:	f000 fc9a 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000978:	2301      	movs	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_GPIO_Init+0x1b0>)
 800098e:	f000 fc8d 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000992:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000996:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_GPIO_Init+0x1ac>)
 80009ac:	f000 fc7e 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b0:	2320      	movs	r3, #32
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_GPIO_Init+0x1ac>)
 80009c4:	f000 fc72 	bl	80012ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3730      	adds	r7, #48	; 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40020000 	.word	0x40020000

080009e4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parm){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*)parm);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f008 fe87 	bl	8009700 <puts>
 80009f2:	e7fb      	b.n	80009ec <task1_handler+0x8>

080009f4 <task2_handler>:
	}
}
static void task2_handler(void* parm){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*)parm);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f008 fe7f 	bl	8009700 <puts>
 8000a02:	e7fb      	b.n	80009fc <task2_handler+0x8>

08000a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a16:	f000 fb23 	bl	8001060 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40014000 	.word	0x40014000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_I2C_MspInit+0x84>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d12c      	bne.n	8000b00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ac2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <HAL_I2C_MspInit+0x8c>)
 8000ae0:	f000 fbe4 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_I2C_MspInit+0x88>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020400 	.word	0x40020400

08000b14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a59      	ldr	r2, [pc, #356]	; (8000c98 <HAL_I2S_MspInit+0x184>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d15b      	bne.n	8000bee <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	4b58      	ldr	r3, [pc, #352]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a57      	ldr	r2, [pc, #348]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b55      	ldr	r3, [pc, #340]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	623b      	str	r3, [r7, #32]
 8000b50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
 8000b56:	4b51      	ldr	r3, [pc, #324]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a50      	ldr	r2, [pc, #320]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b4e      	ldr	r3, [pc, #312]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a49      	ldr	r2, [pc, #292]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	483e      	ldr	r0, [pc, #248]	; (8000ca0 <HAL_I2S_MspInit+0x18c>)
 8000ba6:	f000 fb81 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000baa:	2308      	movs	r3, #8
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4836      	ldr	r0, [pc, #216]	; (8000ca0 <HAL_I2S_MspInit+0x18c>)
 8000bc6:	f000 fb71 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000bca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bdc:	2305      	movs	r3, #5
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <HAL_I2S_MspInit+0x190>)
 8000be8:	f000 fb60 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bec:	e04f      	b.n	8000c8e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <HAL_I2S_MspInit+0x194>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d14a      	bne.n	8000c8e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a26      	ldr	r2, [pc, #152]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_I2S_MspInit+0x188>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4811      	ldr	r0, [pc, #68]	; (8000cac <HAL_I2S_MspInit+0x198>)
 8000c68:	f000 fb20 	bl	80012ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c6c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c7e:	2306      	movs	r3, #6
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_I2S_MspInit+0x18c>)
 8000c8a:	f000 fb0f 	bl	80012ac <HAL_GPIO_Init>
}
 8000c8e:	bf00      	nop
 8000c90:	3738      	adds	r7, #56	; 0x38
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40003800 	.word	0x40003800
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020800 	.word	0x40020800
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40003c00 	.word	0x40003c00
 8000cac:	40020000 	.word	0x40020000

08000cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_SPI_MspInit+0x84>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12b      	bne.n	8000d2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_SPI_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d0a:	23e0      	movs	r3, #224	; 0xe0
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_SPI_MspInit+0x8c>)
 8000d26:	f000 fac1 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40013000 	.word	0x40013000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <HAL_InitTick+0xd0>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	4a2d      	ldr	r2, [pc, #180]	; (8000e10 <HAL_InitTick+0xd0>)
 8000d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <HAL_InitTick+0xd0>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6c:	f107 020c 	add.w	r2, r7, #12
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fabc 	bl	80042f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d7c:	f003 faa6 	bl	80042cc <HAL_RCC_GetPCLK2Freq>
 8000d80:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d84:	4a23      	ldr	r2, [pc, #140]	; (8000e14 <HAL_InitTick+0xd4>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0c9b      	lsrs	r3, r3, #18
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <HAL_InitTick+0xd8>)
 8000d92:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <HAL_InitTick+0xdc>)
 8000d94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_InitTick+0xd8>)
 8000d98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d9c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_InitTick+0xd8>)
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_InitTick+0xd8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <HAL_InitTick+0xd8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_InitTick+0xd8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000db6:	4818      	ldr	r0, [pc, #96]	; (8000e18 <HAL_InitTick+0xd8>)
 8000db8:	f003 fca7 	bl	800470a <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d11b      	bne.n	8000e02 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000dca:	4813      	ldr	r0, [pc, #76]	; (8000e18 <HAL_InitTick+0xd8>)
 8000dcc:	f003 fcf6 	bl	80047bc <HAL_TIM_Base_Start_IT>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d111      	bne.n	8000e02 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000dde:	2018      	movs	r0, #24
 8000de0:	f000 fa56 	bl	8001290 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	d808      	bhi.n	8000dfc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000dea:	2200      	movs	r2, #0
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	2018      	movs	r0, #24
 8000df0:	f000 fa32 	bl	8001258 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_InitTick+0xe0>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e002      	b.n	8000e02 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3730      	adds	r7, #48	; 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	200001f0 	.word	0x200001f0
 8000e1c:	40014000 	.word	0x40014000
 8000e20:	20000004 	.word	0x20000004

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e56:	f003 fd13 	bl	8004880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001f0 	.word	0x200001f0

08000e64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <OTG_FS_IRQHandler+0x10>)
 8000e6a:	f000 fe27 	bl	8001abc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20013340 	.word	0x20013340

08000e78 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <ITM_SendChar+0x48>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <ITM_SendChar+0x48>)
 8000e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e8c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <ITM_SendChar+0x4c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <ITM_SendChar+0x4c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000e9a:	bf00      	nop
 8000e9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f8      	beq.n	8000e9c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000eaa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	6013      	str	r3, [r2, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000edfc 	.word	0xe000edfc
 8000ec4:	e0000e00 	.word	0xe0000e00

08000ec8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e00a      	b.n	8000ef0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eda:	f3af 8000 	nop.w
 8000ede:	4601      	mov	r1, r0
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	60ba      	str	r2, [r7, #8]
 8000ee6:	b2ca      	uxtb	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf0      	blt.n	8000eda <_read+0x12>
  }

  return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e009      	b.n	8000f28 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ffab 	bl	8000e78 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dbf1      	blt.n	8000f14 <_write+0x12>
  }
  return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_close>:

int _close(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f62:	605a      	str	r2, [r3, #4]
  return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_isatty>:

int _isatty(int file)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fce:	490e      	ldr	r1, [pc, #56]	; (8001008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe4:	4c0b      	ldr	r4, [pc, #44]	; (8001014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff2:	f7ff ffd7 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f008 f9f9 	bl	80093ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fa73 	bl	80004e4 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800100c:	08009f4c 	.word	0x08009f4c
  ldr r2, =_sbss
 8001010:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001014:	20013658 	.word	0x20013658

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_Init+0x40>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_Init+0x40>)
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_Init+0x40>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f8fc 	bl	8001242 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fe78 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fcf0 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	20000238 	.word	0x20000238

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000238 	.word	0x20000238

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff4c 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126a:	f7ff ff61 	bl	8001130 <__NVIC_GetPriorityGrouping>
 800126e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f7ff ffb1 	bl	80011dc <NVIC_EncodePriority>
 800127a:	4602      	mov	r2, r0
 800127c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff80 	bl	8001188 <__NVIC_SetPriority>
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff54 	bl	800114c <__NVIC_EnableIRQ>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e159      	b.n	800157c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 8148 	bne.w	8001576 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d130      	bne.n	8001360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a2 	beq.w	8001576 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b57      	ldr	r3, [pc, #348]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a56      	ldr	r2, [pc, #344]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b54      	ldr	r3, [pc, #336]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a52      	ldr	r2, [pc, #328]	; (8001598 <HAL_GPIO_Init+0x2ec>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a49      	ldr	r2, [pc, #292]	; (800159c <HAL_GPIO_Init+0x2f0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x202>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <HAL_GPIO_Init+0x2f4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x1fe>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a47      	ldr	r2, [pc, #284]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x1fa>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a46      	ldr	r2, [pc, #280]	; (80015a8 <HAL_GPIO_Init+0x2fc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x1f6>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <HAL_GPIO_Init+0x300>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x1f2>
 800149a:	2304      	movs	r3, #4
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 800149e:	2307      	movs	r3, #7
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014ae:	2300      	movs	r3, #0
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c0:	4935      	ldr	r1, [pc, #212]	; (8001598 <HAL_GPIO_Init+0x2ec>)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ce:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <HAL_GPIO_Init+0x304>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f2:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <HAL_GPIO_Init+0x304>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_GPIO_Init+0x304>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800151c:	4a24      	ldr	r2, [pc, #144]	; (80015b0 <HAL_GPIO_Init+0x304>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001546:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_GPIO_Init+0x304>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001570:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3301      	adds	r3, #1
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	f67f aea2 	bls.w	80012c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40013800 	.word	0x40013800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40013c00 	.word	0x40013c00

080015b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
 80015c0:	4613      	mov	r3, r2
 80015c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d0:	e003      	b.n	80015da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e8:	b08f      	sub	sp, #60	; 0x3c
 80015ea:	af0a      	add	r7, sp, #40	; 0x28
 80015ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e054      	b.n	80016a2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f007 fc40 	bl	8008e98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2203      	movs	r2, #3
 800161c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f003 fb58 	bl	8004cec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	687e      	ldr	r6, [r7, #4]
 8001644:	466d      	mov	r5, sp
 8001646:	f106 0410 	add.w	r4, r6, #16
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001652:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001656:	e885 0003 	stmia.w	r5, {r0, r1}
 800165a:	1d33      	adds	r3, r6, #4
 800165c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	f003 fad2 	bl	8004c08 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2101      	movs	r1, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fb4f 	bl	8004d0e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	687e      	ldr	r6, [r7, #4]
 8001678:	466d      	mov	r5, sp
 800167a:	f106 0410 	add.w	r4, r6, #16
 800167e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800168a:	e885 0003 	stmia.w	r5, {r0, r1}
 800168e:	1d33      	adds	r3, r6, #4
 8001690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f003 fcd8 	bl	8005048 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016aa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016aa:	b590      	push	{r4, r7, lr}
 80016ac:	b089      	sub	sp, #36	; 0x24
 80016ae:	af04      	add	r7, sp, #16
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	4608      	mov	r0, r1
 80016b4:	4611      	mov	r1, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	70fb      	strb	r3, [r7, #3]
 80016bc:	460b      	mov	r3, r1
 80016be:	70bb      	strb	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_HCD_HC_Init+0x28>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e076      	b.n	80017c0 <HAL_HCD_HC_Init+0x116>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	333d      	adds	r3, #61	; 0x3d
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3338      	adds	r3, #56	; 0x38
 80016fa:	787a      	ldrb	r2, [r7, #1]
 80016fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	3340      	adds	r3, #64	; 0x40
 800170c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800170e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	212c      	movs	r1, #44	; 0x2c
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4413      	add	r3, r2
 800171c:	3339      	adds	r3, #57	; 0x39
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	212c      	movs	r1, #44	; 0x2c
 8001728:	fb01 f303 	mul.w	r3, r1, r3
 800172c:	4413      	add	r3, r2
 800172e:	333f      	adds	r3, #63	; 0x3f
 8001730:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001734:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	78ba      	ldrb	r2, [r7, #2]
 800173a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800173e:	b2d0      	uxtb	r0, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	333a      	adds	r3, #58	; 0x3a
 800174c:	4602      	mov	r2, r0
 800174e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001750:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001754:	2b00      	cmp	r3, #0
 8001756:	da09      	bge.n	800176c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	212c      	movs	r1, #44	; 0x2c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	333b      	adds	r3, #59	; 0x3b
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e008      	b.n	800177e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	333b      	adds	r3, #59	; 0x3b
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	212c      	movs	r1, #44	; 0x2c
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	333c      	adds	r3, #60	; 0x3c
 800178c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001790:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	787c      	ldrb	r4, [r7, #1]
 8001798:	78ba      	ldrb	r2, [r7, #2]
 800179a:	78f9      	ldrb	r1, [r7, #3]
 800179c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4623      	mov	r3, r4
 80017ae:	f003 fdd1 	bl	8005354 <USB_HC_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_HCD_HC_Halt+0x1e>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e00f      	b.n	8001806 <HAL_HCD_HC_Halt+0x3e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f821 	bl	800583e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	4603      	mov	r3, r0
 8001820:	70fb      	strb	r3, [r7, #3]
 8001822:	460b      	mov	r3, r1
 8001824:	70bb      	strb	r3, [r7, #2]
 8001826:	4613      	mov	r3, r2
 8001828:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	212c      	movs	r1, #44	; 0x2c
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	333b      	adds	r3, #59	; 0x3b
 8001838:	78ba      	ldrb	r2, [r7, #2]
 800183a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	333f      	adds	r3, #63	; 0x3f
 800184a:	787a      	ldrb	r2, [r7, #1]
 800184c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800184e:	7c3b      	ldrb	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d112      	bne.n	800187a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	3342      	adds	r3, #66	; 0x42
 8001862:	2203      	movs	r2, #3
 8001864:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	212c      	movs	r1, #44	; 0x2c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	333d      	adds	r3, #61	; 0x3d
 8001874:	7f3a      	ldrb	r2, [r7, #28]
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e008      	b.n	800188c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	3342      	adds	r3, #66	; 0x42
 8001888:	2202      	movs	r2, #2
 800188a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b03      	cmp	r3, #3
 8001890:	f200 80c6 	bhi.w	8001a20 <HAL_HCD_HC_SubmitRequest+0x210>
 8001894:	a201      	add	r2, pc, #4	; (adr r2, 800189c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189a:	bf00      	nop
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	08001a0d 	.word	0x08001a0d
 80018a4:	08001911 	.word	0x08001911
 80018a8:	0800198f 	.word	0x0800198f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018ac:	7c3b      	ldrb	r3, [r7, #16]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	f040 80b8 	bne.w	8001a24 <HAL_HCD_HC_SubmitRequest+0x214>
 80018b4:	78bb      	ldrb	r3, [r7, #2]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 80b4 	bne.w	8001a24 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018bc:	8b3b      	ldrh	r3, [r7, #24]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	212c      	movs	r1, #44	; 0x2c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3355      	adds	r3, #85	; 0x55
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3355      	adds	r3, #85	; 0x55
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	3342      	adds	r3, #66	; 0x42
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018fa:	e093      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3342      	adds	r3, #66	; 0x42
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
      break;
 800190e:	e089      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001910:	78bb      	ldrb	r3, [r7, #2]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d11d      	bne.n	8001952 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3355      	adds	r3, #85	; 0x55
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3342      	adds	r3, #66	; 0x42
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800193c:	e073      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3342      	adds	r3, #66	; 0x42
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
      break;
 8001950:	e069      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	212c      	movs	r1, #44	; 0x2c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	3354      	adds	r3, #84	; 0x54
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	3342      	adds	r3, #66	; 0x42
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
      break;
 8001978:	e055      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3342      	adds	r3, #66	; 0x42
 8001988:	2202      	movs	r2, #2
 800198a:	701a      	strb	r2, [r3, #0]
      break;
 800198c:	e04b      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800198e:	78bb      	ldrb	r3, [r7, #2]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d11d      	bne.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3355      	adds	r3, #85	; 0x55
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3342      	adds	r3, #66	; 0x42
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019ba:	e034      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3342      	adds	r3, #66	; 0x42
 80019ca:	2202      	movs	r2, #2
 80019cc:	701a      	strb	r2, [r3, #0]
      break;
 80019ce:	e02a      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3354      	adds	r3, #84	; 0x54
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3342      	adds	r3, #66	; 0x42
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
      break;
 80019f6:	e016      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3342      	adds	r3, #66	; 0x42
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	e00c      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3342      	adds	r3, #66	; 0x42
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
      break;
 8001a1e:	e002      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a20:	bf00      	nop
 8001a22:	e000      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a24:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3344      	adds	r3, #68	; 0x44
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	8b3a      	ldrh	r2, [r7, #24]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	202c      	movs	r0, #44	; 0x2c
 8001a40:	fb00 f303 	mul.w	r3, r0, r3
 8001a44:	440b      	add	r3, r1
 8001a46:	334c      	adds	r3, #76	; 0x4c
 8001a48:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3360      	adds	r3, #96	; 0x60
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3350      	adds	r3, #80	; 0x50
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3339      	adds	r3, #57	; 0x39
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3361      	adds	r3, #97	; 0x61
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	222c      	movs	r2, #44	; 0x2c
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	3338      	adds	r3, #56	; 0x38
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	18d1      	adds	r1, r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f003 fd74 	bl	8005598 <USB_HC_StartXfer>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop

08001abc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fa75 	bl	8004fc2 <USB_GetMode>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	f040 80f6 	bne.w	8001ccc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fa59 	bl	8004f9c <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80ec 	beq.w	8001cca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fa50 	bl	8004f9c <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b06:	d104      	bne.n	8001b12 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fa40 	bl	8004f9c <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b26:	d104      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fa30 	bl	8004f9c <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b46:	d104      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fa20 	bl	8004f9c <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d103      	bne.n	8001b6e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fa12 	bl	8004f9c <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b82:	d11c      	bne.n	8001bbe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b8c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10f      	bne.n	8001bbe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	6938      	ldr	r0, [r7, #16]
 8001ba2:	f003 f901 	bl	8004da8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ba6:	6938      	ldr	r0, [r7, #16]
 8001ba8:	f003 f932 	bl	8004e10 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fb08 	bl	80051c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f007 f9eb 	bl	8008f94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 f9ea 	bl	8004f9c <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd2:	d102      	bne.n	8001bda <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f001 f89e 	bl	8002d16 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 f9dc 	bl	8004f9c <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d106      	bne.n	8001bfc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f007 f9b4 	bl	8008f5c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 f9cb 	bl	8004f9c <USB_ReadInterrupts>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d101      	bne.n	8001c14 <HAL_HCD_IRQHandler+0x158>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_HCD_IRQHandler+0x15a>
 8001c14:	2300      	movs	r3, #0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d012      	beq.n	8001c40 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0210 	bic.w	r2, r2, #16
 8001c28:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 ffa1 	bl	8002b72 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0210 	orr.w	r2, r2, #16
 8001c3e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 f9a9 	bl	8004f9c <USB_ReadInterrupts>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c54:	d13a      	bne.n	8001ccc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fdde 	bl	800581c <USB_HC_ReadInterrupt>
 8001c60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e025      	b.n	8001cb4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d018      	beq.n	8001cae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c92:	d106      	bne.n	8001ca2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8ab 	bl	8001df6 <HCD_HC_IN_IRQHandler>
 8001ca0:	e005      	b.n	8001cae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fbf9 	bl	80024a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3d4      	bcc.n	8001c68 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	e000      	b.n	8001ccc <HAL_HCD_IRQHandler+0x210>
      return;
 8001cca:	bf00      	nop
    }
  }
}
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_HCD_Start+0x16>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e013      	b.n	8001d10 <HAL_HCD_Start+0x3e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 faca 	bl	8005290 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 ffe2 	bl	8004cca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_HCD_Stop+0x16>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e00d      	b.n	8001d4a <HAL_HCD_Stop+0x32>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 feb8 	bl	8005ab0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fa6c 	bl	800523c <USB_ResetPort>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	3360      	adds	r3, #96	; 0x60
 8001d88:	781b      	ldrb	r3, [r3, #0]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3350      	adds	r3, #80	; 0x50
 8001db0:	681b      	ldr	r3, [r3, #0]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fab0 	bl	8005330 <USB_GetCurrentFrame>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fa8b 	bl	8005302 <USB_GetHostSpeed>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d11a      	bne.n	8001e5c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	461a      	mov	r2, r3
 8001e34:	2304      	movs	r3, #4
 8001e36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3361      	adds	r3, #97	; 0x61
 8001e46:	2206      	movs	r2, #6
 8001e48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fcf2 	bl	800583e <USB_HC_Halt>
 8001e5a:	e0af      	b.n	8001fbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e72:	d11b      	bne.n	8001eac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	461a      	mov	r2, r3
 8001e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	212c      	movs	r1, #44	; 0x2c
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	3361      	adds	r3, #97	; 0x61
 8001e96:	2207      	movs	r2, #7
 8001e98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fcca 	bl	800583e <USB_HC_Halt>
 8001eaa:	e087      	b.n	8001fbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d109      	bne.n	8001ed6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	6093      	str	r3, [r2, #8]
 8001ed4:	e072      	b.n	8001fbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d11a      	bne.n	8001f22 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2308      	movs	r3, #8
 8001efc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	212c      	movs	r1, #44	; 0x2c
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	3361      	adds	r3, #97	; 0x61
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fc8f 	bl	800583e <USB_HC_Halt>
 8001f20:	e04c      	b.n	8001fbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f38:	d11b      	bne.n	8001f72 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	461a      	mov	r2, r3
 8001f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3361      	adds	r3, #97	; 0x61
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fc67 	bl	800583e <USB_HC_Halt>
 8001f70:	e024      	b.n	8001fbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d119      	bne.n	8001fbc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3361      	adds	r3, #97	; 0x61
 8001fa8:	2206      	movs	r2, #6
 8001faa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 fc41 	bl	800583e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd2:	d112      	bne.n	8001ffa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fc2d 	bl	800583e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ff8:	e24e      	b.n	8002498 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	f040 80df 	bne.w	80021d0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d019      	beq.n	800204e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3348      	adds	r3, #72	; 0x48
 8002028:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	0159      	lsls	r1, r3, #5
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	440b      	add	r3, r1
 8002032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800203c:	1ad2      	subs	r2, r2, r3
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	202c      	movs	r0, #44	; 0x2c
 8002044:	fb00 f303 	mul.w	r3, r0, r3
 8002048:	440b      	add	r3, r1
 800204a:	3350      	adds	r3, #80	; 0x50
 800204c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3361      	adds	r3, #97	; 0x61
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	335c      	adds	r3, #92	; 0x5c
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	461a      	mov	r2, r3
 8002080:	2301      	movs	r3, #1
 8002082:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	333f      	adds	r3, #63	; 0x3f
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d009      	beq.n	80020ac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	333f      	adds	r3, #63	; 0x3f
 80020a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d111      	bne.n	80020d0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fbc1 	bl	800583e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	461a      	mov	r2, r3
 80020ca:	2310      	movs	r3, #16
 80020cc:	6093      	str	r3, [r2, #8]
 80020ce:	e03a      	b.n	8002146 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	333f      	adds	r3, #63	; 0x3f
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d009      	beq.n	80020f8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	333f      	adds	r3, #63	; 0x3f
 80020f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d126      	bne.n	8002146 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	0151      	lsls	r1, r2, #5
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	440a      	add	r2, r1
 800210e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002112:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002116:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3360      	adds	r3, #96	; 0x60
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	b2d9      	uxtb	r1, r3
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	202c      	movs	r0, #44	; 0x2c
 8002134:	fb00 f303 	mul.w	r3, r0, r3
 8002138:	4413      	add	r3, r2
 800213a:	3360      	adds	r3, #96	; 0x60
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f006 ff35 	bl	8008fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d12b      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3348      	adds	r3, #72	; 0x48
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	202c      	movs	r0, #44	; 0x2c
 8002164:	fb00 f202 	mul.w	r2, r0, r2
 8002168:	440a      	add	r2, r1
 800216a:	3240      	adds	r2, #64	; 0x40
 800216c:	8812      	ldrh	r2, [r2, #0]
 800216e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 818e 	beq.w	8002498 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3354      	adds	r3, #84	; 0x54
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	f083 0301 	eor.w	r3, r3, #1
 8002190:	b2d8      	uxtb	r0, r3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3354      	adds	r3, #84	; 0x54
 80021a0:	4602      	mov	r2, r0
 80021a2:	701a      	strb	r2, [r3, #0]
}
 80021a4:	e178      	b.n	8002498 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3354      	adds	r3, #84	; 0x54
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2d8      	uxtb	r0, r3
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3354      	adds	r3, #84	; 0x54
 80021ca:	4602      	mov	r2, r0
 80021cc:	701a      	strb	r2, [r3, #0]
}
 80021ce:	e163      	b.n	8002498 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	f040 80f6 	bne.w	80023d4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3361      	adds	r3, #97	; 0x61
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d109      	bne.n	8002210 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3360      	adds	r3, #96	; 0x60
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e0c9      	b.n	80023a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3361      	adds	r3, #97	; 0x61
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d109      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3360      	adds	r3, #96	; 0x60
 8002232:	2205      	movs	r2, #5
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e0b5      	b.n	80023a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3361      	adds	r3, #97	; 0x61
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b06      	cmp	r3, #6
 800224a:	d009      	beq.n	8002260 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3361      	adds	r3, #97	; 0x61
 800225a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800225c:	2b08      	cmp	r3, #8
 800225e:	d150      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	335c      	adds	r3, #92	; 0x5c
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	202c      	movs	r0, #44	; 0x2c
 8002278:	fb00 f303 	mul.w	r3, r0, r3
 800227c:	440b      	add	r3, r1
 800227e:	335c      	adds	r3, #92	; 0x5c
 8002280:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	335c      	adds	r3, #92	; 0x5c
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d912      	bls.n	80022bc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	335c      	adds	r3, #92	; 0x5c
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3360      	adds	r3, #96	; 0x60
 80022b6:	2204      	movs	r2, #4
 80022b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ba:	e073      	b.n	80023a4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3360      	adds	r3, #96	; 0x60
 80022ca:	2202      	movs	r2, #2
 80022cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022e4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022ec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002300:	e050      	b.n	80023a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3361      	adds	r3, #97	; 0x61
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d122      	bne.n	800235c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	3360      	adds	r3, #96	; 0x60
 8002324:	2202      	movs	r2, #2
 8002326:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800233e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002346:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e023      	b.n	80023a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3361      	adds	r3, #97	; 0x61
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b07      	cmp	r3, #7
 800236e:	d119      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	335c      	adds	r3, #92	; 0x5c
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	202c      	movs	r0, #44	; 0x2c
 8002388:	fb00 f303 	mul.w	r3, r0, r3
 800238c:	440b      	add	r3, r1
 800238e:	335c      	adds	r3, #92	; 0x5c
 8002390:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3360      	adds	r3, #96	; 0x60
 80023a0:	2204      	movs	r2, #4
 80023a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	461a      	mov	r2, r3
 80023b2:	2302      	movs	r3, #2
 80023b4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	b2d9      	uxtb	r1, r3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	202c      	movs	r0, #44	; 0x2c
 80023c0:	fb00 f303 	mul.w	r3, r0, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3360      	adds	r3, #96	; 0x60
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f006 fdef 	bl	8008fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023d2:	e061      	b.n	8002498 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d156      	bne.n	8002498 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	333f      	adds	r3, #63	; 0x3f
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d111      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	335c      	adds	r3, #92	; 0x5c
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f003 fa0f 	bl	800583e <USB_HC_Halt>
 8002420:	e031      	b.n	8002486 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	333f      	adds	r3, #63	; 0x3f
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	333f      	adds	r3, #63	; 0x3f
 8002444:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002446:	2b02      	cmp	r3, #2
 8002448:	d11d      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	335c      	adds	r3, #92	; 0x5c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d110      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3361      	adds	r3, #97	; 0x61
 8002472:	2203      	movs	r2, #3
 8002474:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f003 f9dc 	bl	800583e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4413      	add	r3, r2
 800248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002492:	461a      	mov	r2, r3
 8002494:	2310      	movs	r3, #16
 8002496:	6093      	str	r3, [r2, #8]
}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d11a      	bne.n	8002506 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	461a      	mov	r2, r3
 80024de:	2304      	movs	r3, #4
 80024e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3361      	adds	r3, #97	; 0x61
 80024f0:	2206      	movs	r2, #6
 80024f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 f99d 	bl	800583e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002504:	e331      	b.n	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b20      	cmp	r3, #32
 800251a:	d12e      	bne.n	800257a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	461a      	mov	r2, r3
 800252a:	2320      	movs	r3, #32
 800252c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	333d      	adds	r3, #61	; 0x3d
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	f040 8313 	bne.w	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	333d      	adds	r3, #61	; 0x3d
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3360      	adds	r3, #96	; 0x60
 8002564:	2202      	movs	r2, #2
 8002566:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f003 f963 	bl	800583e <USB_HC_Halt>
}
 8002578:	e2f7      	b.n	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002590:	d112      	bne.n	80025b8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	461a      	mov	r2, r3
 80025a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 f944 	bl	800583e <USB_HC_Halt>
}
 80025b6:	e2d8      	b.n	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d140      	bne.n	8002650 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	335c      	adds	r3, #92	; 0x5c
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d111      	bne.n	800261a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	333d      	adds	r3, #61	; 0x3d
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	2340      	movs	r3, #64	; 0x40
 8002618:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	461a      	mov	r2, r3
 8002628:	2301      	movs	r3, #1
 800262a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f003 f8f8 	bl	800583e <USB_HC_Halt>
}
 800264e:	e28c      	b.n	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d12c      	bne.n	80026c0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3361      	adds	r3, #97	; 0x61
 8002674:	2204      	movs	r2, #4
 8002676:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	333d      	adds	r3, #61	; 0x3d
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 f8c9 	bl	800583e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	2340      	movs	r3, #64	; 0x40
 80026bc:	6093      	str	r3, [r2, #8]
}
 80026be:	e254      	b.n	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d11a      	bne.n	800270c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	2308      	movs	r3, #8
 80026e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3361      	adds	r3, #97	; 0x61
 80026f6:	2205      	movs	r2, #5
 80026f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f003 f89a 	bl	800583e <USB_HC_Halt>
}
 800270a:	e22e      	b.n	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b10      	cmp	r3, #16
 8002720:	d140      	bne.n	80027a4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	335c      	adds	r3, #92	; 0x5c
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3361      	adds	r3, #97	; 0x61
 8002742:	2203      	movs	r2, #3
 8002744:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	333d      	adds	r3, #61	; 0x3d
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d112      	bne.n	8002780 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	333c      	adds	r3, #60	; 0x3c
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d108      	bne.n	8002780 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	333d      	adds	r3, #61	; 0x3d
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f003 f857 	bl	800583e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	2310      	movs	r3, #16
 80027a0:	6093      	str	r3, [r2, #8]
}
 80027a2:	e1e2      	b.n	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b80      	cmp	r3, #128	; 0x80
 80027b8:	d164      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d111      	bne.n	80027e6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	3361      	adds	r3, #97	; 0x61
 80027d0:	2206      	movs	r2, #6
 80027d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 f82d 	bl	800583e <USB_HC_Halt>
 80027e4:	e044      	b.n	8002870 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	335c      	adds	r3, #92	; 0x5c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	202c      	movs	r0, #44	; 0x2c
 80027fe:	fb00 f303 	mul.w	r3, r0, r3
 8002802:	440b      	add	r3, r1
 8002804:	335c      	adds	r3, #92	; 0x5c
 8002806:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	335c      	adds	r3, #92	; 0x5c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d920      	bls.n	800285e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	335c      	adds	r3, #92	; 0x5c
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3360      	adds	r3, #96	; 0x60
 800283c:	2204      	movs	r2, #4
 800283e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	b2d9      	uxtb	r1, r3
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	202c      	movs	r0, #44	; 0x2c
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	4413      	add	r3, r2
 8002850:	3360      	adds	r3, #96	; 0x60
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f006 fbaa 	bl	8008fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800285c:	e008      	b.n	8002870 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3360      	adds	r3, #96	; 0x60
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	6093      	str	r3, [r2, #8]
}
 8002882:	e172      	b.n	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d11b      	bne.n	80028d4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3361      	adds	r3, #97	; 0x61
 80028aa:	2208      	movs	r2, #8
 80028ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 ffc0 	bl	800583e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ca:	461a      	mov	r2, r3
 80028cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d0:	6093      	str	r3, [r2, #8]
}
 80028d2:	e14a      	b.n	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	f040 813f 	bne.w	8002b6a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d17d      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3360      	adds	r3, #96	; 0x60
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	333f      	adds	r3, #63	; 0x3f
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d00a      	beq.n	800293c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	333f      	adds	r3, #63	; 0x3f
 8002934:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002936:	2b03      	cmp	r3, #3
 8002938:	f040 8100 	bne.w	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d113      	bne.n	800296c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3355      	adds	r3, #85	; 0x55
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f083 0301 	eor.w	r3, r3, #1
 8002958:	b2d8      	uxtb	r0, r3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3355      	adds	r3, #85	; 0x55
 8002968:	4602      	mov	r2, r0
 800296a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b01      	cmp	r3, #1
 8002972:	f040 80e3 	bne.w	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	334c      	adds	r3, #76	; 0x4c
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80d8 	beq.w	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	334c      	adds	r3, #76	; 0x4c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	202c      	movs	r0, #44	; 0x2c
 80029a2:	fb00 f202 	mul.w	r2, r0, r2
 80029a6:	440a      	add	r2, r1
 80029a8:	3240      	adds	r2, #64	; 0x40
 80029aa:	8812      	ldrh	r2, [r2, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	3b01      	subs	r3, #1
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	202c      	movs	r0, #44	; 0x2c
 80029b6:	fb00 f202 	mul.w	r2, r0, r2
 80029ba:	440a      	add	r2, r1
 80029bc:	3240      	adds	r2, #64	; 0x40
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80b5 	beq.w	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	3355      	adds	r3, #85	; 0x55
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f083 0301 	eor.w	r3, r3, #1
 80029e6:	b2d8      	uxtb	r0, r3
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3355      	adds	r3, #85	; 0x55
 80029f6:	4602      	mov	r2, r0
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e09f      	b.n	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3361      	adds	r3, #97	; 0x61
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d109      	bne.n	8002a24 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3360      	adds	r3, #96	; 0x60
 8002a1e:	2202      	movs	r2, #2
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e08b      	b.n	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3361      	adds	r3, #97	; 0x61
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d109      	bne.n	8002a4c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3360      	adds	r3, #96	; 0x60
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e077      	b.n	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3361      	adds	r3, #97	; 0x61
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d109      	bne.n	8002a74 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3360      	adds	r3, #96	; 0x60
 8002a6e:	2205      	movs	r2, #5
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e063      	b.n	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b06      	cmp	r3, #6
 8002a86:	d009      	beq.n	8002a9c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d14f      	bne.n	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	335c      	adds	r3, #92	; 0x5c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	202c      	movs	r0, #44	; 0x2c
 8002ab4:	fb00 f303 	mul.w	r3, r0, r3
 8002ab8:	440b      	add	r3, r1
 8002aba:	335c      	adds	r3, #92	; 0x5c
 8002abc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d912      	bls.n	8002af8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3360      	adds	r3, #96	; 0x60
 8002af2:	2204      	movs	r2, #4
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e021      	b.n	8002b3c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	3360      	adds	r3, #96	; 0x60
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b20:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b28:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	b2d9      	uxtb	r1, r3
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	202c      	movs	r0, #44	; 0x2c
 8002b58:	fb00 f303 	mul.w	r3, r0, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3360      	adds	r3, #96	; 0x60
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f006 fa23 	bl	8008fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b6a:	bf00      	nop
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b08a      	sub	sp, #40	; 0x28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	0c5b      	lsrs	r3, r3, #17
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d004      	beq.n	8002bb8 <HCD_RXQLVL_IRQHandler+0x46>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	f000 80a9 	beq.w	8002d08 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bb6:	e0aa      	b.n	8002d0e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HCD_RXQLVL_IRQHandler+0x19a>
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3344      	adds	r3, #68	; 0x44
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 809b 	beq.w	8002d0c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3350      	adds	r3, #80	; 0x50
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	441a      	add	r2, r3
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	202c      	movs	r0, #44	; 0x2c
 8002bf0:	fb00 f303 	mul.w	r3, r0, r3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	334c      	adds	r3, #76	; 0x4c
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d87a      	bhi.n	8002cf4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3344      	adds	r3, #68	; 0x44
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	b292      	uxth	r2, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	f002 f968 	bl	8004eec <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3344      	adds	r3, #68	; 0x44
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	441a      	add	r2, r3
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	202c      	movs	r0, #44	; 0x2c
 8002c36:	fb00 f303 	mul.w	r3, r0, r3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3344      	adds	r3, #68	; 0x44
 8002c3e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3350      	adds	r3, #80	; 0x50
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	441a      	add	r2, r3
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	202c      	movs	r0, #44	; 0x2c
 8002c5a:	fb00 f303 	mul.w	r3, r0, r3
 8002c5e:	440b      	add	r3, r1
 8002c60:	3350      	adds	r3, #80	; 0x50
 8002c62:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	0cdb      	lsrs	r3, r3, #19
 8002c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c78:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3340      	adds	r3, #64	; 0x40
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d13c      	bne.n	8002d0c <HCD_RXQLVL_IRQHandler+0x19a>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d039      	beq.n	8002d0c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cb6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3354      	adds	r3, #84	; 0x54
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	f083 0301 	eor.w	r3, r3, #1
 8002cde:	b2d8      	uxtb	r0, r3
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3354      	adds	r3, #84	; 0x54
 8002cee:	4602      	mov	r2, r0
 8002cf0:	701a      	strb	r2, [r3, #0]
      break;
 8002cf2:	e00b      	b.n	8002d0c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3360      	adds	r3, #96	; 0x60
 8002d02:	2204      	movs	r2, #4
 8002d04:	701a      	strb	r2, [r3, #0]
      break;
 8002d06:	e001      	b.n	8002d0c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d08:	bf00      	nop
 8002d0a:	e000      	b.n	8002d0e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d0c:	bf00      	nop
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3728      	adds	r7, #40	; 0x28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d42:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d10b      	bne.n	8002d66 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d102      	bne.n	8002d5e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f006 f90d 	bl	8008f78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d132      	bne.n	8002dd6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f043 0308 	orr.w	r3, r3, #8
 8002d76:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d126      	bne.n	8002dd0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d113      	bne.n	8002db2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d94:	d106      	bne.n	8002da4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 fa13 	bl	80051c8 <USB_InitFSLSPClkSel>
 8002da2:	e011      	b.n	8002dc8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f002 fa0c 	bl	80051c8 <USB_InitFSLSPClkSel>
 8002db0:	e00a      	b.n	8002dc8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d106      	bne.n	8002dc8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dc6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f006 f8ff 	bl	8008fcc <HAL_HCD_PortEnabled_Callback>
 8002dce:	e002      	b.n	8002dd6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f006 f909 	bl	8008fe8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d103      	bne.n	8002de8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f043 0320 	orr.w	r3, r3, #32
 8002de6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dee:	461a      	mov	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e12b      	b.n	8003066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd fe2e 	bl	8000a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e60:	f001 fa20 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	; (8003070 <HAL_I2C_Init+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d807      	bhi.n	8002e80 <HAL_I2C_Init+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a80      	ldr	r2, [pc, #512]	; (8003074 <HAL_I2C_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e006      	b.n	8002e8e <HAL_I2C_Init+0x92>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a7d      	ldr	r2, [pc, #500]	; (8003078 <HAL_I2C_Init+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e7      	b.n	8003066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	; (800307c <HAL_I2C_Init+0x280>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9b      	lsrs	r3, r3, #18
 8002ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	; (8003070 <HAL_I2C_Init+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_I2C_Init+0xd4>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e009      	b.n	8002ee4 <HAL_I2C_Init+0xe8>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_I2C_Init+0x284>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	495c      	ldr	r1, [pc, #368]	; (8003070 <HAL_I2C_Init+0x274>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d819      	bhi.n	8002f38 <HAL_I2C_Init+0x13c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e59      	subs	r1, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f18:	400b      	ands	r3, r1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_I2C_Init+0x138>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	e051      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e04f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_I2C_Init+0x168>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e012      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_I2C_Init+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e58      	subs	r0, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6911      	ldr	r1, [r2, #16]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	000186a0 	.word	0x000186a0
 8003074:	001e847f 	.word	0x001e847f
 8003078:	003d08ff 	.word	0x003d08ff
 800307c:	431bde83 	.word	0x431bde83
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e128      	b.n	80032e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a90      	ldr	r2, [pc, #576]	; (80032f0 <HAL_I2S_Init+0x26c>)
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fd fd2f 	bl	8000b14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030cc:	f023 030f 	bic.w	r3, r3, #15
 80030d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2202      	movs	r2, #2
 80030d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d060      	beq.n	80031a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030ea:	2310      	movs	r3, #16
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e001      	b.n	80030f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030f0:	2320      	movs	r3, #32
 80030f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d802      	bhi.n	8003102 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003102:	2001      	movs	r0, #1
 8003104:	f001 fa18 	bl	8004538 <HAL_RCCEx_GetPeriphCLKFreq>
 8003108:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003112:	d125      	bne.n	8003160 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	fbb2 f2f3 	udiv	r2, r2, r3
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	3305      	adds	r3, #5
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	e01f      	b.n	800317e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	fbb2 f2f3 	udiv	r2, r2, r3
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	461a      	mov	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	3305      	adds	r3, #5
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e00e      	b.n	800317e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	3305      	adds	r3, #5
 800317c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4a5c      	ldr	r2, [pc, #368]	; (80032f4 <HAL_I2S_Init+0x270>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	08db      	lsrs	r3, r3, #3
 8003188:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	e003      	b.n	80031ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031a4:	2302      	movs	r3, #2
 80031a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d902      	bls.n	80031b8 <HAL_I2S_Init+0x134>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	2bff      	cmp	r3, #255	; 0xff
 80031b6:	d907      	bls.n	80031c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e08f      	b.n	80032e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	ea42 0103 	orr.w	r1, r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	430a      	orrs	r2, r1
 80031da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031e6:	f023 030f 	bic.w	r3, r3, #15
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6851      	ldr	r1, [r2, #4]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6892      	ldr	r2, [r2, #8]
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68d2      	ldr	r2, [r2, #12]
 80031f8:	4311      	orrs	r1, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6992      	ldr	r2, [r2, #24]
 80031fe:	430a      	orrs	r2, r1
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d161      	bne.n	80032d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a38      	ldr	r2, [pc, #224]	; (80032f8 <HAL_I2S_Init+0x274>)
 8003218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a37      	ldr	r2, [pc, #220]	; (80032fc <HAL_I2S_Init+0x278>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_I2S_Init+0x1a4>
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_I2S_Init+0x27c>)
 8003226:	e001      	b.n	800322c <HAL_I2S_Init+0x1a8>
 8003228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	4932      	ldr	r1, [pc, #200]	; (80032fc <HAL_I2S_Init+0x278>)
 8003234:	428a      	cmp	r2, r1
 8003236:	d101      	bne.n	800323c <HAL_I2S_Init+0x1b8>
 8003238:	4a31      	ldr	r2, [pc, #196]	; (8003300 <HAL_I2S_Init+0x27c>)
 800323a:	e001      	b.n	8003240 <HAL_I2S_Init+0x1bc>
 800323c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003240:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003244:	f023 030f 	bic.w	r3, r3, #15
 8003248:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2b      	ldr	r2, [pc, #172]	; (80032fc <HAL_I2S_Init+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_I2S_Init+0x1d4>
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_I2S_Init+0x27c>)
 8003256:	e001      	b.n	800325c <HAL_I2S_Init+0x1d8>
 8003258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800325c:	2202      	movs	r2, #2
 800325e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_I2S_Init+0x278>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_I2S_Init+0x1ea>
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_I2S_Init+0x27c>)
 800326c:	e001      	b.n	8003272 <HAL_I2S_Init+0x1ee>
 800326e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327e:	d003      	beq.n	8003288 <HAL_I2S_Init+0x204>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e001      	b.n	8003294 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800329e:	4313      	orrs	r3, r2
 80032a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <HAL_I2S_Init+0x278>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_I2S_Init+0x24c>
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_I2S_Init+0x27c>)
 80032ce:	e001      	b.n	80032d4 <HAL_I2S_Init+0x250>
 80032d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d4:	897a      	ldrh	r2, [r7, #10]
 80032d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	080033fb 	.word	0x080033fb
 80032f4:	cccccccd 	.word	0xcccccccd
 80032f8:	08003511 	.word	0x08003511
 80032fc:	40003800 	.word	0x40003800
 8003300:	40003400 	.word	0x40003400

08003304 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003384:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffb8 	bl	8003304 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	b292      	uxth	r2, r2
 80033b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	1c9a      	adds	r2, r3, #2
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10e      	bne.n	80033f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff93 	bl	8003318 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b04      	cmp	r3, #4
 8003414:	d13a      	bne.n	800348c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d109      	bne.n	8003434 <I2S_IRQHandler+0x3a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d102      	bne.n	8003434 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ffb4 	bl	800339c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d126      	bne.n	800348c <I2S_IRQHandler+0x92>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d11f      	bne.n	800348c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800345a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f043 0202 	orr.w	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff50 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b03      	cmp	r3, #3
 8003496:	d136      	bne.n	8003506 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d109      	bne.n	80034b6 <I2S_IRQHandler+0xbc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d102      	bne.n	80034b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff45 	bl	8003340 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d122      	bne.n	8003506 <I2S_IRQHandler+0x10c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d11b      	bne.n	8003506 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff13 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a92      	ldr	r2, [pc, #584]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800352a:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800352c:	e001      	b.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800352e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a8b      	ldr	r2, [pc, #556]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003548:	4b8a      	ldr	r3, [pc, #552]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800354a:	e001      	b.n	8003550 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355c:	d004      	beq.n	8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 8099 	bne.w	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d107      	bne.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f925 	bl	80037cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9c8 	bl	800392c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d13a      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d035      	beq.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6e      	ldr	r2, [pc, #440]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035ba:	4b6e      	ldr	r3, [pc, #440]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035bc:	e001      	b.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4969      	ldr	r1, [pc, #420]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ca:	428b      	cmp	r3, r1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035ce:	4b69      	ldr	r3, [pc, #420]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d0:	e001      	b.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0202 	orr.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fe88 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	f040 80c3 	bne.w	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80bd 	beq.w	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003642:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a49      	ldr	r2, [pc, #292]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800364e:	4b49      	ldr	r3, [pc, #292]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003650:	e001      	b.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4944      	ldr	r1, [pc, #272]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800365e:	428b      	cmp	r3, r1
 8003660:	d101      	bne.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003662:	4b44      	ldr	r3, [pc, #272]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003664:	e001      	b.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800366e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fe4a 	bl	800332c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003698:	e089      	b.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d107      	bne.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8be 	bl	8003830 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f8fd 	bl	80038c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d12f      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02a      	beq.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036fe:	e001      	b.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4919      	ldr	r1, [pc, #100]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800370c:	428b      	cmp	r3, r1
 800370e:	d101      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003712:	e001      	b.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003718:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800371c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fdfa 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b08      	cmp	r3, #8
 8003740:	d136      	bne.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d031      	beq.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003758:	e001      	b.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4902      	ldr	r1, [pc, #8]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003766:	428b      	cmp	r3, r1
 8003768:	d106      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800376a:	4b02      	ldr	r3, [pc, #8]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800376c:	e006      	b.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800376e:	bf00      	nop
 8003770:	40003800 	.word	0x40003800
 8003774:	40003400 	.word	0x40003400
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003780:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003790:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff fdc0 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ac:	e000      	b.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ae:	bf00      	nop
}
 80037b0:	bf00      	nop
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c99      	adds	r1, r3, #2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6251      	str	r1, [r2, #36]	; 0x24
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d113      	bne.n	8003826 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800380c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ffc9 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c99      	adds	r1, r3, #2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6251      	str	r1, [r2, #36]	; 0x24
 8003842:	8819      	ldrh	r1, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <I2SEx_TxISR_I2SExt+0x90>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <I2SEx_TxISR_I2SExt+0x22>
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003850:	e001      	b.n	8003856 <I2SEx_TxISR_I2SExt+0x26>
 8003852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003856:	460a      	mov	r2, r1
 8003858:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d121      	bne.n	80038b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <I2SEx_TxISR_I2SExt+0x90>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <I2SEx_TxISR_I2SExt+0x50>
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <I2SEx_TxISR_I2SExt+0x94>)
 800387e:	e001      	b.n	8003884 <I2SEx_TxISR_I2SExt+0x54>
 8003880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	490d      	ldr	r1, [pc, #52]	; (80038c0 <I2SEx_TxISR_I2SExt+0x90>)
 800388c:	428b      	cmp	r3, r1
 800388e:	d101      	bne.n	8003894 <I2SEx_TxISR_I2SExt+0x64>
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003892:	e001      	b.n	8003898 <I2SEx_TxISR_I2SExt+0x68>
 8003894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800389c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff81 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40003800 	.word	0x40003800
 80038c4:	40003400 	.word	0x40003400

080038c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68d8      	ldr	r0, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	1c99      	adds	r1, r3, #2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038e0:	b282      	uxth	r2, r0
 80038e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d113      	bne.n	8003924 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800390a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ff4a 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a20      	ldr	r2, [pc, #128]	; (80039bc <I2SEx_RxISR_I2SExt+0x90>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <I2SEx_RxISR_I2SExt+0x16>
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <I2SEx_RxISR_I2SExt+0x94>)
 8003940:	e001      	b.n	8003946 <I2SEx_RxISR_I2SExt+0x1a>
 8003942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003946:	68d8      	ldr	r0, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	1c99      	adds	r1, r3, #2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003952:	b282      	uxth	r2, r0
 8003954:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d121      	bne.n	80039b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <I2SEx_RxISR_I2SExt+0x90>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <I2SEx_RxISR_I2SExt+0x50>
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <I2SEx_RxISR_I2SExt+0x94>)
 800397a:	e001      	b.n	8003980 <I2SEx_RxISR_I2SExt+0x54>
 800397c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	490d      	ldr	r1, [pc, #52]	; (80039bc <I2SEx_RxISR_I2SExt+0x90>)
 8003988:	428b      	cmp	r3, r1
 800398a:	d101      	bne.n	8003990 <I2SEx_RxISR_I2SExt+0x64>
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <I2SEx_RxISR_I2SExt+0x94>)
 800398e:	e001      	b.n	8003994 <I2SEx_RxISR_I2SExt+0x68>
 8003990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003994:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003998:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff03 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40003800 	.word	0x40003800
 80039c0:	40003400 	.word	0x40003400

080039c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e267      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d075      	beq.n	8003ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039e2:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d00c      	beq.n	8003a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ee:	4b85      	ldr	r3, [pc, #532]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d112      	bne.n	8003a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039fa:	4b82      	ldr	r3, [pc, #520]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a06:	d10b      	bne.n	8003a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	4b7e      	ldr	r3, [pc, #504]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d05b      	beq.n	8003acc <HAL_RCC_OscConfig+0x108>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d157      	bne.n	8003acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e242      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a28:	d106      	bne.n	8003a38 <HAL_RCC_OscConfig+0x74>
 8003a2a:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a75      	ldr	r2, [pc, #468]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e01d      	b.n	8003a74 <HAL_RCC_OscConfig+0xb0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x98>
 8003a42:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6f      	ldr	r2, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6c      	ldr	r2, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0xb0>
 8003a5c:	4b69      	ldr	r3, [pc, #420]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a68      	ldr	r2, [pc, #416]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b66      	ldr	r3, [pc, #408]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a65      	ldr	r2, [pc, #404]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fb04 	bl	8001088 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fd fb00 	bl	8001088 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e207      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b5b      	ldr	r3, [pc, #364]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0xc0>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fd faf0 	bl	8001088 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fd faec 	bl	8001088 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e1f3      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	4b51      	ldr	r3, [pc, #324]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0xe8>
 8003aca:	e000      	b.n	8003ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d063      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ada:	4b4a      	ldr	r3, [pc, #296]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b47      	ldr	r3, [pc, #284]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d11c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af2:	4b44      	ldr	r3, [pc, #272]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	4b41      	ldr	r3, [pc, #260]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_RCC_OscConfig+0x152>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e1c7      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4937      	ldr	r1, [pc, #220]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2a:	e03a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b34:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <HAL_RCC_OscConfig+0x244>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fd faa5 	bl	8001088 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b42:	f7fd faa1 	bl	8001088 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e1a8      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b60:	4b28      	ldr	r3, [pc, #160]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4925      	ldr	r1, [pc, #148]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]
 8003b74:	e015      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <HAL_RCC_OscConfig+0x244>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fa84 	bl	8001088 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b84:	f7fd fa80 	bl	8001088 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e187      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d036      	beq.n	8003c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <HAL_RCC_OscConfig+0x248>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fd fa64 	bl	8001088 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc4:	f7fd fa60 	bl	8001088 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e167      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x200>
 8003be2:	e01b      	b.n	8003c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be4:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_OscConfig+0x248>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bea:	f7fd fa4d 	bl	8001088 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf0:	e00e      	b.n	8003c10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf2:	f7fd fa49 	bl	8001088 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d907      	bls.n	8003c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e150      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
 8003c04:	40023800 	.word	0x40023800
 8003c08:	42470000 	.word	0x42470000
 8003c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ea      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8097 	beq.w	8003d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2e:	4b81      	ldr	r3, [pc, #516]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10f      	bne.n	8003c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	4b7d      	ldr	r3, [pc, #500]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a7c      	ldr	r2, [pc, #496]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b7a      	ldr	r3, [pc, #488]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	4b77      	ldr	r3, [pc, #476]	; (8003e38 <HAL_RCC_OscConfig+0x474>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d118      	bne.n	8003c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c66:	4b74      	ldr	r3, [pc, #464]	; (8003e38 <HAL_RCC_OscConfig+0x474>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a73      	ldr	r2, [pc, #460]	; (8003e38 <HAL_RCC_OscConfig+0x474>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c72:	f7fd fa09 	bl	8001088 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7a:	f7fd fa05 	bl	8001088 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e10c      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <HAL_RCC_OscConfig+0x474>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <HAL_RCC_OscConfig+0x2ea>
 8003ca0:	4b64      	ldr	r3, [pc, #400]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a63      	ldr	r2, [pc, #396]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	e01c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x324>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x30c>
 8003cb6:	4b5f      	ldr	r3, [pc, #380]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a5e      	ldr	r2, [pc, #376]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc2:	4b5c      	ldr	r3, [pc, #368]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	4a5b      	ldr	r2, [pc, #364]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0x324>
 8003cd0:	4b58      	ldr	r3, [pc, #352]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a57      	ldr	r2, [pc, #348]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
 8003cdc:	4b55      	ldr	r3, [pc, #340]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	4a54      	ldr	r2, [pc, #336]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	f023 0304 	bic.w	r3, r3, #4
 8003ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd f9ca 	bl	8001088 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7fd f9c6 	bl	8001088 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e0cb      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0e:	4b49      	ldr	r3, [pc, #292]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0ee      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x334>
 8003d1a:	e014      	b.n	8003d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1c:	f7fd f9b4 	bl	8001088 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fd f9b0 	bl	8001088 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e0b5      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3a:	4b3e      	ldr	r3, [pc, #248]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ee      	bne.n	8003d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4c:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a38      	ldr	r2, [pc, #224]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80a1 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d05c      	beq.n	8003e28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d141      	bne.n	8003dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d76:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_RCC_OscConfig+0x478>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fd f984 	bl	8001088 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd f980 	bl	8001088 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e087      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	491b      	ldr	r1, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <HAL_RCC_OscConfig+0x478>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd2:	f7fd f959 	bl	8001088 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dda:	f7fd f955 	bl	8001088 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e05c      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x416>
 8003df8:	e054      	b.n	8003ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_RCC_OscConfig+0x478>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fd f942 	bl	8001088 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fd f93e 	bl	8001088 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e045      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x444>
 8003e26:	e03d      	b.n	8003ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e038      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_RCC_OscConfig+0x4ec>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d028      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d121      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d11a      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d111      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800

08003eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0cc      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b68      	ldr	r3, [pc, #416]	; (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d90c      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b65      	ldr	r3, [pc, #404]	; (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b63      	ldr	r3, [pc, #396]	; (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0b8      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f08:	4b59      	ldr	r3, [pc, #356]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a58      	ldr	r2, [pc, #352]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f20:	4b53      	ldr	r3, [pc, #332]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a52      	ldr	r2, [pc, #328]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f2c:	4b50      	ldr	r3, [pc, #320]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	494d      	ldr	r1, [pc, #308]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d044      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d119      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e07f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d003      	beq.n	8003f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f72:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e06f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	4b3b      	ldr	r3, [pc, #236]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e067      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f92:	4b37      	ldr	r3, [pc, #220]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f023 0203 	bic.w	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4934      	ldr	r1, [pc, #208]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa4:	f7fd f870 	bl	8001088 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fac:	f7fd f86c 	bl	8001088 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e04f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 020c 	and.w	r2, r3, #12
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1eb      	bne.n	8003fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d20c      	bcs.n	8003ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b22      	ldr	r3, [pc, #136]	; (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b20      	ldr	r3, [pc, #128]	; (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e032      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4916      	ldr	r1, [pc, #88]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	490e      	ldr	r1, [pc, #56]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800403a:	f000 f821 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 800403e:	4602      	mov	r2, r0
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	490a      	ldr	r1, [pc, #40]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	5ccb      	ldrb	r3, [r1, r3]
 800404e:	fa22 f303 	lsr.w	r3, r2, r3
 8004052:	4a09      	ldr	r2, [pc, #36]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fe70 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023c00 	.word	0x40023c00
 8004070:	40023800 	.word	0x40023800
 8004074:	08009ec0 	.word	0x08009ec0
 8004078:	20000000 	.word	0x20000000
 800407c:	20000004 	.word	0x20000004

08004080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004084:	b094      	sub	sp, #80	; 0x50
 8004086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	647b      	str	r3, [r7, #68]	; 0x44
 800408c:	2300      	movs	r3, #0
 800408e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004090:	2300      	movs	r3, #0
 8004092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004098:	4b79      	ldr	r3, [pc, #484]	; (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d00d      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x40>
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	f200 80e1 	bhi.w	800426c <HAL_RCC_GetSysClockFreq+0x1ec>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d003      	beq.n	80040ba <HAL_RCC_GetSysClockFreq+0x3a>
 80040b2:	e0db      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b73      	ldr	r3, [pc, #460]	; (8004284 <HAL_RCC_GetSysClockFreq+0x204>)
 80040b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040b8:	e0db      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ba:	4b73      	ldr	r3, [pc, #460]	; (8004288 <HAL_RCC_GetSysClockFreq+0x208>)
 80040bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040be:	e0d8      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c0:	4b6f      	ldr	r3, [pc, #444]	; (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ca:	4b6d      	ldr	r3, [pc, #436]	; (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d063      	beq.n	800419e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d6:	4b6a      	ldr	r3, [pc, #424]	; (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	2200      	movs	r2, #0
 80040de:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ea:	2300      	movs	r3, #0
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
 80040ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	f04f 0000 	mov.w	r0, #0
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	0159      	lsls	r1, r3, #5
 8004100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004104:	0150      	lsls	r0, r2, #5
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4621      	mov	r1, r4
 800410c:	1a51      	subs	r1, r2, r1
 800410e:	6139      	str	r1, [r7, #16]
 8004110:	4629      	mov	r1, r5
 8004112:	eb63 0301 	sbc.w	r3, r3, r1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004124:	4659      	mov	r1, fp
 8004126:	018b      	lsls	r3, r1, #6
 8004128:	4651      	mov	r1, sl
 800412a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800412e:	4651      	mov	r1, sl
 8004130:	018a      	lsls	r2, r1, #6
 8004132:	4651      	mov	r1, sl
 8004134:	ebb2 0801 	subs.w	r8, r2, r1
 8004138:	4659      	mov	r1, fp
 800413a:	eb63 0901 	sbc.w	r9, r3, r1
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800414a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800414e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004152:	4690      	mov	r8, r2
 8004154:	4699      	mov	r9, r3
 8004156:	4623      	mov	r3, r4
 8004158:	eb18 0303 	adds.w	r3, r8, r3
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	462b      	mov	r3, r5
 8004160:	eb49 0303 	adc.w	r3, r9, r3
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004172:	4629      	mov	r1, r5
 8004174:	024b      	lsls	r3, r1, #9
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800417c:	4621      	mov	r1, r4
 800417e:	024a      	lsls	r2, r1, #9
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004186:	2200      	movs	r2, #0
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
 800418a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800418c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004190:	f7fc f826 	bl	80001e0 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800419c:	e058      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419e:	4b38      	ldr	r3, [pc, #224]	; (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	2200      	movs	r2, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	4611      	mov	r1, r2
 80041aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041ae:	623b      	str	r3, [r7, #32]
 80041b0:	2300      	movs	r3, #0
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
 80041b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041b8:	4642      	mov	r2, r8
 80041ba:	464b      	mov	r3, r9
 80041bc:	f04f 0000 	mov.w	r0, #0
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	0159      	lsls	r1, r3, #5
 80041c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ca:	0150      	lsls	r0, r2, #5
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4641      	mov	r1, r8
 80041d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041d6:	4649      	mov	r1, r9
 80041d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041f0:	ebb2 040a 	subs.w	r4, r2, sl
 80041f4:	eb63 050b 	sbc.w	r5, r3, fp
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	00eb      	lsls	r3, r5, #3
 8004202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004206:	00e2      	lsls	r2, r4, #3
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	4643      	mov	r3, r8
 800420e:	18e3      	adds	r3, r4, r3
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	464b      	mov	r3, r9
 8004214:	eb45 0303 	adc.w	r3, r5, r3
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004226:	4629      	mov	r1, r5
 8004228:	028b      	lsls	r3, r1, #10
 800422a:	4621      	mov	r1, r4
 800422c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004230:	4621      	mov	r1, r4
 8004232:	028a      	lsls	r2, r1, #10
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800423a:	2200      	movs	r2, #0
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	61fa      	str	r2, [r7, #28]
 8004240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004244:	f7fb ffcc 	bl	80001e0 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4613      	mov	r3, r2
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800426a:	e002      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCC_GetSysClockFreq+0x204>)
 800426e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004274:	4618      	mov	r0, r3
 8004276:	3750      	adds	r7, #80	; 0x50
 8004278:	46bd      	mov	sp, r7
 800427a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	00f42400 	.word	0x00f42400
 8004288:	007a1200 	.word	0x007a1200

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000000 	.word	0x20000000

080042a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042a8:	f7ff fff0 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	; (80042c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	08009ed0 	.word	0x08009ed0

080042cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042d0:	f7ff ffdc 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0b5b      	lsrs	r3, r3, #13
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	08009ed0 	.word	0x08009ed0

080042f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	220f      	movs	r2, #15
 8004302:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCC_GetClockConfig+0x5c>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0203 	and.w	r2, r3, #3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <HAL_RCC_GetClockConfig+0x5c>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <HAL_RCC_GetClockConfig+0x5c>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <HAL_RCC_GetClockConfig+0x5c>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <HAL_RCC_GetClockConfig+0x60>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0207 	and.w	r2, r3, #7
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	40023c00 	.word	0x40023c00

08004358 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800437c:	2b00      	cmp	r3, #0
 800437e:	d038      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004380:	4b68      	ldr	r3, [pc, #416]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004386:	f7fc fe7f 	bl	8001088 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800438e:	f7fc fe7b 	bl	8001088 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0bd      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043a0:	4b61      	ldr	r3, [pc, #388]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	019b      	lsls	r3, r3, #6
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	071b      	lsls	r3, r3, #28
 80043be:	495a      	ldr	r1, [pc, #360]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043c6:	4b57      	ldr	r3, [pc, #348]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043cc:	f7fc fe5c 	bl	8001088 <HAL_GetTick>
 80043d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043d4:	f7fc fe58 	bl	8001088 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e09a      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e6:	4b50      	ldr	r3, [pc, #320]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8083 	beq.w	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	4b48      	ldr	r3, [pc, #288]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	4a47      	ldr	r2, [pc, #284]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440e:	6413      	str	r3, [r2, #64]	; 0x40
 8004410:	4b45      	ldr	r3, [pc, #276]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800441c:	4b43      	ldr	r3, [pc, #268]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a42      	ldr	r2, [pc, #264]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004426:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004428:	f7fc fe2e 	bl	8001088 <HAL_GetTick>
 800442c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004430:	f7fc fe2a 	bl	8001088 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e06c      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004442:	4b3a      	ldr	r3, [pc, #232]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800444e:	4b36      	ldr	r3, [pc, #216]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004456:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d02f      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x166>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d028      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800446c:	4b2e      	ldr	r3, [pc, #184]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004476:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800447c:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004482:	4a29      	ldr	r2, [pc, #164]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d114      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004494:	f7fc fdf8 	bl	8001088 <HAL_GetTick>
 8004498:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fc fdf4 	bl	8001088 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e034      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ee      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80044cc:	4b16      	ldr	r3, [pc, #88]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e0:	4911      	ldr	r1, [pc, #68]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
 80044e6:	e005      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044f2:	6093      	str	r3, [r2, #8]
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004500:	4909      	ldr	r1, [pc, #36]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	7d1a      	ldrb	r2, [r3, #20]
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004518:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	42470068 	.word	0x42470068
 8004528:	40023800 	.word	0x40023800
 800452c:	40007000 	.word	0x40007000
 8004530:	42470e40 	.word	0x42470e40
 8004534:	424711e0 	.word	0x424711e0

08004538 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d140      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d131      	bne.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800456c:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800456e:	617b      	str	r3, [r7, #20]
          break;
 8004570:	e031      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457e:	d109      	bne.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800458a:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	e008      	b.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004594:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459e:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ac:	099b      	lsrs	r3, r3, #6
 80045ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	fb02 f303 	mul.w	r3, r2, r3
 80045b8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c0:	0f1b      	lsrs	r3, r3, #28
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
          break;
 80045ce:	e002      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
          break;
 80045d4:	bf00      	nop
        }
      }
      break;
 80045d6:	bf00      	nop
    }
  }
  return frequency;
 80045d8:	697b      	ldr	r3, [r7, #20]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
 80045ec:	00bb8000 	.word	0x00bb8000
 80045f0:	007a1200 	.word	0x007a1200
 80045f4:	00f42400 	.word	0x00f42400

080045f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07b      	b.n	8004702 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	2b00      	cmp	r3, #0
 8004610:	d108      	bne.n	8004624 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461a:	d009      	beq.n	8004630 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	61da      	str	r2, [r3, #28]
 8004622:	e005      	b.n	8004630 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc fb30 	bl	8000cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004666:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	ea42 0103 	orr.w	r1, r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	f003 0104 	and.w	r1, r3, #4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f003 0210 	and.w	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e041      	b.n	80047a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f839 	bl	80047a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3304      	adds	r3, #4
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 f9c9 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d001      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e044      	b.n	800485e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1e      	ldr	r2, [pc, #120]	; (800486c <HAL_TIM_Base_Start_IT+0xb0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d018      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0x6c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d013      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0x6c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1a      	ldr	r2, [pc, #104]	; (8004870 <HAL_TIM_Base_Start_IT+0xb4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00e      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0x6c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_TIM_Base_Start_IT+0xb8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d009      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0x6c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a17      	ldr	r2, [pc, #92]	; (8004878 <HAL_TIM_Base_Start_IT+0xbc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0x6c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_TIM_Base_Start_IT+0xc0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d111      	bne.n	800484c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b06      	cmp	r3, #6
 8004838:	d010      	beq.n	800485c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	e007      	b.n	800485c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40014000 	.word	0x40014000

08004880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0202 	mvn.w	r2, #2
 80048ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8ee 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8e0 	bl	8004a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8f1 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d122      	bne.n	8004930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d11b      	bne.n	8004930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0204 	mvn.w	r2, #4
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8c4 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8b6 	bl	8004a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8c7 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b08      	cmp	r3, #8
 800493c:	d122      	bne.n	8004984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b08      	cmp	r3, #8
 800494a:	d11b      	bne.n	8004984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0208 	mvn.w	r2, #8
 8004954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2204      	movs	r2, #4
 800495a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f89a 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f88c 	bl	8004a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f89d 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	2b10      	cmp	r3, #16
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b10      	cmp	r3, #16
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2208      	movs	r2, #8
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f870 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f862 	bl	8004a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f873 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0201 	mvn.w	r2, #1
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc f800 	bl	8000a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8e2 	bl	8004bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f838 	bl	8004acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0220 	mvn.w	r2, #32
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8ac 	bl	8004be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a34      	ldr	r2, [pc, #208]	; (8004bc4 <TIM_Base_SetConfig+0xe4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00f      	beq.n	8004b18 <TIM_Base_SetConfig+0x38>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afe:	d00b      	beq.n	8004b18 <TIM_Base_SetConfig+0x38>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a31      	ldr	r2, [pc, #196]	; (8004bc8 <TIM_Base_SetConfig+0xe8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_Base_SetConfig+0x38>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a30      	ldr	r2, [pc, #192]	; (8004bcc <TIM_Base_SetConfig+0xec>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_Base_SetConfig+0x38>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a2f      	ldr	r2, [pc, #188]	; (8004bd0 <TIM_Base_SetConfig+0xf0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d108      	bne.n	8004b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a25      	ldr	r2, [pc, #148]	; (8004bc4 <TIM_Base_SetConfig+0xe4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01b      	beq.n	8004b6a <TIM_Base_SetConfig+0x8a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b38:	d017      	beq.n	8004b6a <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <TIM_Base_SetConfig+0xe8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d013      	beq.n	8004b6a <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <TIM_Base_SetConfig+0xec>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00f      	beq.n	8004b6a <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <TIM_Base_SetConfig+0xf0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00b      	beq.n	8004b6a <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <TIM_Base_SetConfig+0xf4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d007      	beq.n	8004b6a <TIM_Base_SetConfig+0x8a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <TIM_Base_SetConfig+0xf8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d003      	beq.n	8004b6a <TIM_Base_SetConfig+0x8a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <TIM_Base_SetConfig+0xfc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d108      	bne.n	8004b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <TIM_Base_SetConfig+0xe4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d103      	bne.n	8004bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	615a      	str	r2, [r3, #20]
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40014400 	.word	0x40014400
 8004bdc:	40014800 	.word	0x40014800

08004be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c08:	b084      	sub	sp, #16
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	f107 001c 	add.w	r0, r7, #28
 8004c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d122      	bne.n	8004c66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f9c0 	bl	8004fe0 <USB_CoreReset>
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	e01a      	b.n	8004c9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9b4 	bl	8004fe0 <USB_CoreReset>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8004c8e:	e005      	b.n	8004c9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10b      	bne.n	8004cba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f043 0206 	orr.w	r2, r3, #6
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cc6:	b004      	add	sp, #16
 8004cc8:	4770      	bx	lr

08004cca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f023 0201 	bic.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d115      	bne.n	8004d5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f7fc f9af 	bl	80010a0 <HAL_Delay>
      ms++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f93a 	bl	8004fc2 <USB_GetMode>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d01e      	beq.n	8004d92 <USB_SetCurrentMode+0x84>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b31      	cmp	r3, #49	; 0x31
 8004d58:	d9f0      	bls.n	8004d3c <USB_SetCurrentMode+0x2e>
 8004d5a:	e01a      	b.n	8004d92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d115      	bne.n	8004d8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f7fc f996 	bl	80010a0 <HAL_Delay>
      ms++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f921 	bl	8004fc2 <USB_GetMode>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <USB_SetCurrentMode+0x84>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b31      	cmp	r3, #49	; 0x31
 8004d8a:	d9f0      	bls.n	8004d6e <USB_SetCurrentMode+0x60>
 8004d8c:	e001      	b.n	8004d92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e005      	b.n	8004d9e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b32      	cmp	r3, #50	; 0x32
 8004d96:	d101      	bne.n	8004d9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3301      	adds	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <USB_FlushTxFifo+0x64>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d901      	bls.n	8004dc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e01b      	b.n	8004e00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	daf2      	bge.n	8004db6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	019b      	lsls	r3, r3, #6
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a08      	ldr	r2, [pc, #32]	; (8004e0c <USB_FlushTxFifo+0x64>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e006      	b.n	8004e00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d0f0      	beq.n	8004de0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	00030d40 	.word	0x00030d40

08004e10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <USB_FlushRxFifo+0x5c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e018      	b.n	8004e60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	daf2      	bge.n	8004e1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2210      	movs	r2, #16
 8004e3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3301      	adds	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <USB_FlushRxFifo+0x5c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e006      	b.n	8004e60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d0f0      	beq.n	8004e40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	00030d40 	.word	0x00030d40

08004e70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	460b      	mov	r3, r1
 8004e80:	71fb      	strb	r3, [r7, #7]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d123      	bne.n	8004ede <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e96:	88bb      	ldrh	r3, [r7, #4]
 8004e98:	3303      	adds	r3, #3
 8004e9a:	089b      	lsrs	r3, r3, #2
 8004e9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	e018      	b.n	8004ed6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	031a      	lsls	r2, r3, #12
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3e2      	bcc.n	8004ea4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3724      	adds	r7, #36	; 0x24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b08b      	sub	sp, #44	; 0x2c
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	089b      	lsrs	r3, r3, #2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f12:	2300      	movs	r3, #0
 8004f14:	623b      	str	r3, [r7, #32]
 8004f16:	e014      	b.n	8004f42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	3301      	adds	r3, #1
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	3301      	adds	r3, #1
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	3301      	adds	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	623b      	str	r3, [r7, #32]
 8004f42:	6a3a      	ldr	r2, [r7, #32]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3e6      	bcc.n	8004f18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f4a:	8bfb      	ldrh	r3, [r7, #30]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01e      	beq.n	8004f8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f107 0310 	add.w	r3, r7, #16
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	701a      	strb	r2, [r3, #0]
      i++;
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	3301      	adds	r3, #1
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f82:	8bfb      	ldrh	r3, [r7, #30]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f88:	8bfb      	ldrh	r3, [r7, #30]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1ea      	bne.n	8004f64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	372c      	adds	r7, #44	; 0x2c
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0301 	and.w	r3, r3, #1
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <USB_CoreReset+0x64>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e01b      	b.n	8005036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	daf2      	bge.n	8004fec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f043 0201 	orr.w	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3301      	adds	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <USB_CoreReset+0x64>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e006      	b.n	8005036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d0f0      	beq.n	8005016 <USB_CoreReset+0x36>

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	00030d40 	.word	0x00030d40

08005048 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005048:	b084      	sub	sp, #16
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005068:	461a      	mov	r2, r3
 800506a:	2300      	movs	r3, #0
 800506c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10a      	bne.n	80050ba <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050b2:	f043 0304 	orr.w	r3, r3, #4
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	e014      	b.n	80050e4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e009      	b.n	80050e4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050de:	f023 0304 	bic.w	r3, r3, #4
 80050e2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050e4:	2110      	movs	r1, #16
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fe5e 	bl	8004da8 <USB_FlushTxFifo>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fe8a 	bl	8004e10 <USB_FlushRxFifo>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	e015      	b.n	8005138 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005118:	461a      	mov	r2, r3
 800511a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800511e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3301      	adds	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	429a      	cmp	r2, r3
 800513e:	d3e5      	bcc.n	800510c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800514c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005160:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <USB_HostInit+0x16c>)
 8005166:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <USB_HostInit+0x170>)
 800516c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005170:	e009      	b.n	8005186 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <USB_HostInit+0x174>)
 800517c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a0f      	ldr	r2, [pc, #60]	; (80051c0 <USB_HostInit+0x178>)
 8005182:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f043 0210 	orr.w	r2, r3, #16
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <USB_HostInit+0x17c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051b0:	b004      	add	sp, #16
 80051b2:	4770      	bx	lr
 80051b4:	01000200 	.word	0x01000200
 80051b8:	00e00300 	.word	0x00e00300
 80051bc:	00600080 	.word	0x00600080
 80051c0:	004000e0 	.word	0x004000e0
 80051c4:	a3200008 	.word	0xa3200008

080051c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	68f9      	ldr	r1, [r7, #12]
 80051fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d107      	bne.n	800521a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005210:	461a      	mov	r2, r3
 8005212:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005216:	6053      	str	r3, [r2, #4]
 8005218:	e009      	b.n	800522e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d106      	bne.n	800522e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005226:	461a      	mov	r2, r3
 8005228:	f241 7370 	movw	r3, #6000	; 0x1770
 800522c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800525c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800526c:	2064      	movs	r0, #100	; 0x64
 800526e:	f7fb ff17 	bl	80010a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800527a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800527e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005280:	200a      	movs	r0, #10
 8005282:	f7fb ff0d 	bl	80010a0 <HAL_Delay>

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <USB_DriveVbus+0x44>
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d106      	bne.n	80052d4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052d2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052de:	d109      	bne.n	80052f4 <USB_DriveVbus+0x64>
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052f2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	0c5b      	lsrs	r3, r3, #17
 8005320:	f003 0303 	and.w	r3, r3, #3
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	b29b      	uxth	r3, r3
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	4608      	mov	r0, r1
 800535e:	4611      	mov	r1, r2
 8005360:	461a      	mov	r2, r3
 8005362:	4603      	mov	r3, r0
 8005364:	70fb      	strb	r3, [r7, #3]
 8005366:	460b      	mov	r3, r1
 8005368:	70bb      	strb	r3, [r7, #2]
 800536a:	4613      	mov	r3, r2
 800536c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005382:	461a      	mov	r2, r3
 8005384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005388:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800538a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800538e:	2b03      	cmp	r3, #3
 8005390:	d87e      	bhi.n	8005490 <USB_HC_Init+0x13c>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <USB_HC_Init+0x44>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053a9 	.word	0x080053a9
 800539c:	08005453 	.word	0x08005453
 80053a0:	080053a9 	.word	0x080053a9
 80053a4:	08005415 	.word	0x08005415
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b4:	461a      	mov	r2, r3
 80053b6:	f240 439d 	movw	r3, #1181	; 0x49d
 80053ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80053bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da10      	bge.n	80053e6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80053e4:	e057      	b.n	8005496 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d051      	beq.n	8005496 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	440a      	add	r2, r1
 8005408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800540c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005410:	60d3      	str	r3, [r2, #12]
      break;
 8005412:	e040      	b.n	8005496 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005420:	461a      	mov	r2, r3
 8005422:	f240 639d 	movw	r3, #1693	; 0x69d
 8005426:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005428:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800542c:	2b00      	cmp	r3, #0
 800542e:	da34      	bge.n	800549a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	78fa      	ldrb	r2, [r7, #3]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	440a      	add	r2, r1
 8005446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800544a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005450:	e023      	b.n	800549a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	461a      	mov	r2, r3
 8005460:	f240 2325 	movw	r3, #549	; 0x225
 8005464:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005466:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800546a:	2b00      	cmp	r3, #0
 800546c:	da17      	bge.n	800549e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4413      	add	r3, r2
 8005476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	440a      	add	r2, r1
 8005484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005488:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800548c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800548e:	e006      	b.n	800549e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	77fb      	strb	r3, [r7, #31]
      break;
 8005494:	e004      	b.n	80054a0 <USB_HC_Init+0x14c>
      break;
 8005496:	bf00      	nop
 8005498:	e002      	b.n	80054a0 <USB_HC_Init+0x14c>
      break;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <USB_HC_Init+0x14c>
      break;
 800549e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ba:	f043 0302 	orr.w	r3, r3, #2
 80054be:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	2101      	movs	r1, #1
 80054d0:	fa01 f303 	lsl.w	r3, r1, r3
 80054d4:	6939      	ldr	r1, [r7, #16]
 80054d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054da:	4313      	orrs	r3, r2
 80054dc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80054ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da03      	bge.n	80054fa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80054f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	e001      	b.n	80054fe <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff feff 	bl	8005302 <USB_GetHostSpeed>
 8005504:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005506:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800550a:	2b02      	cmp	r3, #2
 800550c:	d106      	bne.n	800551c <USB_HC_Init+0x1c8>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d003      	beq.n	800551c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e001      	b.n	8005520 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005520:	787b      	ldrb	r3, [r7, #1]
 8005522:	059b      	lsls	r3, r3, #22
 8005524:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005528:	78bb      	ldrb	r3, [r7, #2]
 800552a:	02db      	lsls	r3, r3, #11
 800552c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005530:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005532:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005536:	049b      	lsls	r3, r3, #18
 8005538:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800553c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800553e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005540:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005544:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	0159      	lsls	r1, r3, #5
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	440b      	add	r3, r1
 8005552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005556:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800555c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800555e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005562:	2b03      	cmp	r3, #3
 8005564:	d003      	beq.n	800556e <USB_HC_Init+0x21a>
 8005566:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10f      	bne.n	800558e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	78fa      	ldrb	r2, [r7, #3]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	440a      	add	r2, r1
 8005584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005588:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800558c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800558e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08c      	sub	sp, #48	; 0x30
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80055b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055b4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d02d      	beq.n	800561e <USB_HC_StartXfer+0x86>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	791b      	ldrb	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d129      	bne.n	800561e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d117      	bne.n	8005600 <USB_HC_StartXfer+0x68>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	79db      	ldrb	r3, [r3, #7]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <USB_HC_StartXfer+0x48>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	79db      	ldrb	r3, [r3, #7]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d10f      	bne.n	8005600 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	6a3a      	ldr	r2, [r7, #32]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <USB_HC_StartXfer+0x86>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	795b      	ldrb	r3, [r3, #5]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d107      	bne.n	800561e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	4619      	mov	r1, r3
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fa0f 	bl	8005a38 <USB_DoPing>
      return HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	e0f8      	b.n	8005810 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d018      	beq.n	8005658 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	8912      	ldrh	r2, [r2, #8]
 800562e:	4413      	add	r3, r2
 8005630:	3b01      	subs	r3, #1
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	8912      	ldrh	r2, [r2, #8]
 8005636:	fbb3 f3f2 	udiv	r3, r3, r2
 800563a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800563c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800563e:	8b7b      	ldrh	r3, [r7, #26]
 8005640:	429a      	cmp	r2, r3
 8005642:	d90b      	bls.n	800565c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005644:	8b7b      	ldrh	r3, [r7, #26]
 8005646:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	8912      	ldrh	r2, [r2, #8]
 800564e:	fb03 f202 	mul.w	r2, r3, r2
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	611a      	str	r2, [r3, #16]
 8005656:	e001      	b.n	800565c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005658:	2301      	movs	r3, #1
 800565a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	78db      	ldrb	r3, [r3, #3]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005664:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	8912      	ldrh	r2, [r2, #8]
 800566a:	fb03 f202 	mul.w	r2, r3, r2
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	611a      	str	r2, [r3, #16]
 8005672:	e003      	b.n	800567c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005686:	04d9      	lsls	r1, r3, #19
 8005688:	4b63      	ldr	r3, [pc, #396]	; (8005818 <USB_HC_StartXfer+0x280>)
 800568a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800568c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	7a9b      	ldrb	r3, [r3, #10]
 8005692:	075b      	lsls	r3, r3, #29
 8005694:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005698:	69f9      	ldr	r1, [r7, #28]
 800569a:	0148      	lsls	r0, r1, #5
 800569c:	6a39      	ldr	r1, [r7, #32]
 800569e:	4401      	add	r1, r0
 80056a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	68d9      	ldr	r1, [r3, #12]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056be:	460a      	mov	r2, r1
 80056c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bf0c      	ite	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	2300      	movne	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	6a3a      	ldr	r2, [r7, #32]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	4413      	add	r3, r2
 8005702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	7e7b      	ldrb	r3, [r7, #25]
 800570a:	075b      	lsls	r3, r3, #29
 800570c:	69f9      	ldr	r1, [r7, #28]
 800570e:	0148      	lsls	r0, r1, #5
 8005710:	6a39      	ldr	r1, [r7, #32]
 8005712:	4401      	add	r1, r0
 8005714:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	4413      	add	r3, r2
 8005724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005732:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	78db      	ldrb	r3, [r3, #3]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	e003      	b.n	800574e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800574c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005754:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005762:	461a      	mov	r2, r3
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e04e      	b.n	8005810 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	78db      	ldrb	r3, [r3, #3]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d149      	bne.n	800580e <USB_HC_StartXfer+0x276>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d045      	beq.n	800580e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	79db      	ldrb	r3, [r3, #7]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d830      	bhi.n	80057ec <USB_HC_StartXfer+0x254>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <USB_HC_StartXfer+0x1f8>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057a1 	.word	0x080057a1
 8005794:	080057c5 	.word	0x080057c5
 8005798:	080057a1 	.word	0x080057a1
 800579c:	080057c5 	.word	0x080057c5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	3303      	adds	r3, #3
 80057a6:	089b      	lsrs	r3, r3, #2
 80057a8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80057aa:	8afa      	ldrh	r2, [r7, #22]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d91c      	bls.n	80057f0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80057c2:	e015      	b.n	80057f0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	3303      	adds	r3, #3
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80057ce:	8afa      	ldrh	r2, [r7, #22]
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	429a      	cmp	r2, r3
 80057dc:	d90a      	bls.n	80057f4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80057ea:	e003      	b.n	80057f4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80057ec:	bf00      	nop
 80057ee:	e002      	b.n	80057f6 <USB_HC_StartXfer+0x25e>
        break;
 80057f0:	bf00      	nop
 80057f2:	e000      	b.n	80057f6 <USB_HC_StartXfer+0x25e>
        break;
 80057f4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	68d9      	ldr	r1, [r3, #12]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	785a      	ldrb	r2, [r3, #1]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	b29b      	uxth	r3, r3
 8005804:	2000      	movs	r0, #0
 8005806:	9000      	str	r0, [sp, #0]
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff fb31 	bl	8004e70 <USB_WritePacket>
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3728      	adds	r7, #40	; 0x28
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	1ff80000 	.word	0x1ff80000

0800581c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	b29b      	uxth	r3, r3
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800583e:	b480      	push	{r7}
 8005840:	b089      	sub	sp, #36	; 0x24
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	0c9b      	lsrs	r3, r3, #18
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	0fdb      	lsrs	r3, r3, #31
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b20      	cmp	r3, #32
 800588c:	d104      	bne.n	8005898 <USB_HC_Halt+0x5a>
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	e0c8      	b.n	8005a2a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <USB_HC_Halt+0x66>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d163      	bne.n	800596c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058c2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 80ab 	bne.w	8005a28 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d133      	bne.n	8005946 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	440a      	add	r2, r1
 8005914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800591c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800592a:	d81d      	bhi.n	8005968 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800593e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005942:	d0ec      	beq.n	800591e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005944:	e070      	b.n	8005a28 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	440a      	add	r2, r1
 800595c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005964:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005966:	e05f      	b.n	8005a28 <USB_HC_Halt+0x1ea>
            break;
 8005968:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800596a:	e05d      	b.n	8005a28 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	440a      	add	r2, r1
 8005982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800598a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d133      	bne.n	8005a04 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059da:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059e8:	d81d      	bhi.n	8005a26 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a00:	d0ec      	beq.n	80059dc <USB_HC_Halt+0x19e>
 8005a02:	e011      	b.n	8005a28 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	0151      	lsls	r1, r2, #5
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	440a      	add	r2, r1
 8005a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	e000      	b.n	8005a28 <USB_HC_Halt+0x1ea>
          break;
 8005a26:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3724      	adds	r7, #36	; 0x24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
	...

08005a38 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	04da      	lsls	r2, r3, #19
 8005a54:	4b15      	ldr	r3, [pc, #84]	; (8005aac <USB_DoPing+0x74>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a68:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a80:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a88:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a96:	461a      	mov	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	1ff80000 	.word	0x1ff80000

08005ab0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff f911 	bl	8004cec <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aca:	2110      	movs	r1, #16
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff f96b 	bl	8004da8 <USB_FlushTxFifo>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff f997 	bl	8004e10 <USB_FlushRxFifo>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e01f      	b.n	8005b32 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b26:	461a      	mov	r2, r3
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b0f      	cmp	r3, #15
 8005b36:	d9dc      	bls.n	8005af2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	e034      	b.n	8005ba8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b54:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b72:	461a      	mov	r2, r3
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b84:	d80c      	bhi.n	8005ba0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9c:	d0ec      	beq.n	8005b78 <USB_StopHost+0xc8>
 8005b9e:	e000      	b.n	8005ba2 <USB_StopHost+0xf2>
        break;
 8005ba0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b0f      	cmp	r3, #15
 8005bac:	d9c7      	bls.n	8005b3e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bc2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff f880 	bl	8004cca <USB_EnableGlobalInt>

  return ret;
 8005bca:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b089      	sub	sp, #36	; 0x24
 8005bd8:	af04      	add	r7, sp, #16
 8005bda:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005bdc:	2301      	movs	r3, #1
 8005bde:	2202      	movs	r2, #2
 8005be0:	2102      	movs	r1, #2
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fc66 	bl	80064b4 <USBH_FindInterface>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	2bff      	cmp	r3, #255	; 0xff
 8005bf0:	d002      	beq.n	8005bf8 <USBH_CDC_InterfaceInit+0x24>
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d901      	bls.n	8005bfc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e13d      	b.n	8005e78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fc3b 	bl	800647c <USBH_SelectInterface>
 8005c06:	4603      	mov	r3, r0
 8005c08:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005c0a:	7bbb      	ldrb	r3, [r7, #14]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005c10:	2302      	movs	r3, #2
 8005c12:	e131      	b.n	8005e78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005c1a:	2050      	movs	r0, #80	; 0x50
 8005c1c:	f003 fc0a 	bl	8009434 <malloc>
 8005c20:	4603      	mov	r3, r0
 8005c22:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005c34:	2302      	movs	r3, #2
 8005c36:	e11f      	b.n	8005e78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005c38:	2250      	movs	r2, #80	; 0x50
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	68b8      	ldr	r0, [r7, #8]
 8005c3e:	f003 fc09 	bl	8009454 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	211a      	movs	r1, #26
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	b25b      	sxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da15      	bge.n	8005c86 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	211a      	movs	r1, #26
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	4413      	add	r3, r2
 8005c66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	211a      	movs	r1, #26
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c80:	881a      	ldrh	r2, [r3, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f001 ff2c 	bl	8007aea <USBH_AllocPipe>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	7819      	ldrb	r1, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	7858      	ldrb	r0, [r3, #1]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	8952      	ldrh	r2, [r2, #10]
 8005cb2:	9202      	str	r2, [sp, #8]
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	9201      	str	r2, [sp, #4]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	4623      	mov	r3, r4
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 fee4 	bl	8007a8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f003 fb09 	bl	80092e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	210a      	movs	r1, #10
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fbeb 	bl	80064b4 <USBH_FindInterface>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2bff      	cmp	r3, #255	; 0xff
 8005ce6:	d002      	beq.n	8005cee <USBH_CDC_InterfaceInit+0x11a>
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d901      	bls.n	8005cf2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e0c2      	b.n	8005e78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	211a      	movs	r1, #26
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	b25b      	sxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da16      	bge.n	8005d38 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	211a      	movs	r1, #26
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	4413      	add	r3, r2
 8005d16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	211a      	movs	r1, #26
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d30:	881a      	ldrh	r2, [r3, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	835a      	strh	r2, [r3, #26]
 8005d36:	e015      	b.n	8005d64 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	211a      	movs	r1, #26
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d48:	781a      	ldrb	r2, [r3, #0]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	211a      	movs	r1, #26
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d5e:	881a      	ldrh	r2, [r3, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	211a      	movs	r1, #26
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	4413      	add	r3, r2
 8005d70:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	b25b      	sxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	da16      	bge.n	8005daa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	211a      	movs	r1, #26
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	211a      	movs	r1, #26
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005da2:	881a      	ldrh	r2, [r3, #0]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	835a      	strh	r2, [r3, #26]
 8005da8:	e015      	b.n	8005dd6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	211a      	movs	r1, #26
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	211a      	movs	r1, #26
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005dd0:	881a      	ldrh	r2, [r3, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	7b9b      	ldrb	r3, [r3, #14]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 fe84 	bl	8007aea <USBH_AllocPipe>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	7bdb      	ldrb	r3, [r3, #15]
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 fe7a 	bl	8007aea <USBH_AllocPipe>
 8005df6:	4603      	mov	r3, r0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	7b59      	ldrb	r1, [r3, #13]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	7b98      	ldrb	r0, [r3, #14]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	8b12      	ldrh	r2, [r2, #24]
 8005e16:	9202      	str	r2, [sp, #8]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	9201      	str	r2, [sp, #4]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	4623      	mov	r3, r4
 8005e20:	4602      	mov	r2, r0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 fe32 	bl	8007a8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	7b19      	ldrb	r1, [r3, #12]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	7bd8      	ldrb	r0, [r3, #15]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	8b52      	ldrh	r2, [r2, #26]
 8005e40:	9202      	str	r2, [sp, #8]
 8005e42:	2202      	movs	r2, #2
 8005e44:	9201      	str	r2, [sp, #4]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	4623      	mov	r3, r4
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 fe1d 	bl	8007a8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	7b5b      	ldrb	r3, [r3, #13]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f003 fa3e 	bl	80092e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	7b1b      	ldrb	r3, [r3, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f003 fa37 	bl	80092e4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd90      	pop	{r4, r7, pc}

08005e80 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00e      	beq.n	8005eb8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 fe12 	bl	8007aca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 fe3d 	bl	8007b2c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	7b1b      	ldrb	r3, [r3, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	7b1b      	ldrb	r3, [r3, #12]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 fdff 	bl	8007aca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	7b1b      	ldrb	r3, [r3, #12]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 fe2a 	bl	8007b2c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	7b5b      	ldrb	r3, [r3, #13]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	7b5b      	ldrb	r3, [r3, #13]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fdec 	bl	8007aca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	7b5b      	ldrb	r3, [r3, #13]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 fe17 	bl	8007b2c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f003 fa93 	bl	8009444 <free>
    phost->pActiveClass->pData = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f24:	2200      	movs	r2, #0
 8005f26:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3340      	adds	r3, #64	; 0x40
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f8b1 	bl	80060b2 <GetLineCoding>
 8005f50:	4603      	mov	r3, r0
 8005f52:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005f54:	7afb      	ldrb	r3, [r7, #11]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d105      	bne.n	8005f66 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f60:	2102      	movs	r1, #2
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005f66:	7afb      	ldrb	r3, [r7, #11]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d877      	bhi.n	8006084 <USBH_CDC_Process+0x114>
 8005f94:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <USBH_CDC_Process+0x2c>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08005fb1 	.word	0x08005fb1
 8005fa0:	08005fb7 	.word	0x08005fb7
 8005fa4:	08005fe7 	.word	0x08005fe7
 8005fa8:	0800605b 	.word	0x0800605b
 8005fac:	08006069 	.word	0x08006069
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb4:	e06d      	b.n	8006092 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f897 	bl	80060f0 <SetLineCoding>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005fd4:	e058      	b.n	8006088 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d055      	beq.n	8006088 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005fe4:	e050      	b.n	8006088 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	3340      	adds	r3, #64	; 0x40
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f860 	bl	80060b2 <GetLineCoding>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ff6:	7bbb      	ldrb	r3, [r7, #14]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d126      	bne.n	800604a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600e:	791b      	ldrb	r3, [r3, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d13b      	bne.n	800608c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006020:	429a      	cmp	r2, r3
 8006022:	d133      	bne.n	800608c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006030:	429a      	cmp	r2, r3
 8006032:	d12b      	bne.n	800608c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800603e:	429a      	cmp	r2, r3
 8006040:	d124      	bne.n	800608c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f958 	bl	80062f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006048:	e020      	b.n	800608c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800604a:	7bbb      	ldrb	r3, [r7, #14]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d01d      	beq.n	800608c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2204      	movs	r2, #4
 8006054:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006058:	e018      	b.n	800608c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f867 	bl	800612e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f8da 	bl	800621a <CDC_ProcessReception>
      break;
 8006066:	e014      	b.n	8006092 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006068:	2100      	movs	r1, #0
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 ffef 	bl	800704e <USBH_ClrFeature>
 8006070:	4603      	mov	r3, r0
 8006072:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006082:	e005      	b.n	8006090 <USBH_CDC_Process+0x120>

    default:
      break;
 8006084:	bf00      	nop
 8006086:	e004      	b.n	8006092 <USBH_CDC_Process+0x122>
      break;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <USBH_CDC_Process+0x122>
      break;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <USBH_CDC_Process+0x122>
      break;
 8006090:	bf00      	nop

  }

  return status;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	22a1      	movs	r2, #161	; 0xa1
 80060c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2221      	movs	r2, #33	; 0x21
 80060c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2207      	movs	r2, #7
 80060d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2207      	movs	r2, #7
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fa81 	bl	80075e8 <USBH_CtlReq>
 80060e6:	4603      	mov	r3, r0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2221      	movs	r2, #33	; 0x21
 80060fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2207      	movs	r2, #7
 8006116:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2207      	movs	r2, #7
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fa62 	bl	80075e8 <USBH_CtlReq>
 8006124:	4603      	mov	r3, r0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b086      	sub	sp, #24
 8006132:	af02      	add	r7, sp, #8
 8006134:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006140:	2300      	movs	r3, #0
 8006142:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800614a:	2b01      	cmp	r3, #1
 800614c:	d002      	beq.n	8006154 <CDC_ProcessTransmission+0x26>
 800614e:	2b02      	cmp	r3, #2
 8006150:	d023      	beq.n	800619a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006152:	e05e      	b.n	8006212 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	8b12      	ldrh	r2, [r2, #24]
 800615c:	4293      	cmp	r3, r2
 800615e:	d90b      	bls.n	8006178 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	69d9      	ldr	r1, [r3, #28]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8b1a      	ldrh	r2, [r3, #24]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	7b5b      	ldrb	r3, [r3, #13]
 800616c:	2001      	movs	r0, #1
 800616e:	9000      	str	r0, [sp, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fc48 	bl	8007a06 <USBH_BulkSendData>
 8006176:	e00b      	b.n	8006190 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	7b5b      	ldrb	r3, [r3, #13]
 8006186:	2001      	movs	r0, #1
 8006188:	9000      	str	r0, [sp, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 fc3b 	bl	8007a06 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006198:	e03b      	b.n	8006212 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	7b5b      	ldrb	r3, [r3, #13]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f003 f875 	bl	8009290 <USBH_LL_GetURBState>
 80061a6:	4603      	mov	r3, r0
 80061a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d128      	bne.n	8006202 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	8b12      	ldrh	r2, [r2, #24]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d90e      	bls.n	80061da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	8b12      	ldrh	r2, [r2, #24]
 80061c4:	1a9a      	subs	r2, r3, r2
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	8b12      	ldrh	r2, [r2, #24]
 80061d2:	441a      	add	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	61da      	str	r2, [r3, #28]
 80061d8:	e002      	b.n	80061e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061f0:	e00e      	b.n	8006210 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f868 	bl	80062d0 <USBH_CDC_TransmitCallback>
      break;
 8006200:	e006      	b.n	8006210 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006202:	7afb      	ldrb	r3, [r7, #11]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d103      	bne.n	8006210 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006210:	bf00      	nop
  }
}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b086      	sub	sp, #24
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800622c:	2300      	movs	r3, #0
 800622e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006236:	2b03      	cmp	r3, #3
 8006238:	d002      	beq.n	8006240 <CDC_ProcessReception+0x26>
 800623a:	2b04      	cmp	r3, #4
 800623c:	d00e      	beq.n	800625c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800623e:	e043      	b.n	80062c8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	6a19      	ldr	r1, [r3, #32]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	8b5a      	ldrh	r2, [r3, #26]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	7b1b      	ldrb	r3, [r3, #12]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fbff 	bl	8007a50 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2204      	movs	r2, #4
 8006256:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800625a:	e035      	b.n	80062c8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	7b1b      	ldrb	r3, [r3, #12]
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f003 f814 	bl	8009290 <USBH_LL_GetURBState>
 8006268:	4603      	mov	r3, r0
 800626a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800626c:	7cfb      	ldrb	r3, [r7, #19]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d129      	bne.n	80062c6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	7b1b      	ldrb	r3, [r3, #12]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f002 ff77 	bl	800916c <USBH_LL_GetLastXferSize>
 800627e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	429a      	cmp	r2, r3
 8006288:	d016      	beq.n	80062b8 <CDC_ProcessReception+0x9e>
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	8b5b      	ldrh	r3, [r3, #26]
 800628e:	461a      	mov	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4293      	cmp	r3, r2
 8006294:	d910      	bls.n	80062b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1ad2      	subs	r2, r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	441a      	add	r2, r3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2203      	movs	r2, #3
 80062b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062b6:	e006      	b.n	80062c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f80f 	bl	80062e4 <USBH_CDC_ReceiveCallback>
      break;
 80062c6:	bf00      	nop
  }
}
 80062c8:	bf00      	nop
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006320:	2302      	movs	r3, #2
 8006322:	e029      	b.n	8006378 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	79fa      	ldrb	r2, [r7, #7]
 8006328:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f81f 	bl	8006380 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f002 fe47 	bl	8009004 <USBH_LL_Init>

  return USBH_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	e009      	b.n	80063a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	33e0      	adds	r3, #224	; 0xe0
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	2200      	movs	r2, #0
 800639e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3301      	adds	r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b0f      	cmp	r3, #15
 80063aa:	d9f2      	bls.n	8006392 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e009      	b.n	80063c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80063bc:	2200      	movs	r2, #0
 80063be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3301      	adds	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063cc:	d3f1      	bcc.n	80063b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2240      	movs	r2, #64	; 0x40
 80063f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d016      	beq.n	800646a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10e      	bne.n	8006464 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	33de      	adds	r3, #222	; 0xde
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
 8006462:	e004      	b.n	800646e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006464:	2302      	movs	r3, #2
 8006466:	73fb      	strb	r3, [r7, #15]
 8006468:	e001      	b.n	800646e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800646a:	2302      	movs	r3, #2
 800646c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006492:	78fa      	ldrb	r2, [r7, #3]
 8006494:	429a      	cmp	r2, r3
 8006496:	d204      	bcs.n	80064a2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80064a0:	e001      	b.n	80064a6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80064a2:	2302      	movs	r3, #2
 80064a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	4608      	mov	r0, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	461a      	mov	r2, r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	70fb      	strb	r3, [r7, #3]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70bb      	strb	r3, [r7, #2]
 80064ca:	4613      	mov	r3, r2
 80064cc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80064dc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80064de:	e025      	b.n	800652c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	221a      	movs	r2, #26
 80064e4:	fb02 f303 	mul.w	r3, r2, r3
 80064e8:	3308      	adds	r3, #8
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	3302      	adds	r3, #2
 80064f0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	795b      	ldrb	r3, [r3, #5]
 80064f6:	78fa      	ldrb	r2, [r7, #3]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d002      	beq.n	8006502 <USBH_FindInterface+0x4e>
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2bff      	cmp	r3, #255	; 0xff
 8006500:	d111      	bne.n	8006526 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006506:	78ba      	ldrb	r2, [r7, #2]
 8006508:	429a      	cmp	r2, r3
 800650a:	d002      	beq.n	8006512 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800650c:	78bb      	ldrb	r3, [r7, #2]
 800650e:	2bff      	cmp	r3, #255	; 0xff
 8006510:	d109      	bne.n	8006526 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006516:	787a      	ldrb	r2, [r7, #1]
 8006518:	429a      	cmp	r2, r3
 800651a:	d002      	beq.n	8006522 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800651c:	787b      	ldrb	r3, [r7, #1]
 800651e:	2bff      	cmp	r3, #255	; 0xff
 8006520:	d101      	bne.n	8006526 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	e006      	b.n	8006534 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006526:	7dfb      	ldrb	r3, [r7, #23]
 8006528:	3301      	adds	r3, #1
 800652a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d9d6      	bls.n	80064e0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006532:	23ff      	movs	r3, #255	; 0xff
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f002 fd97 	bl	800907c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800654e:	2101      	movs	r1, #1
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f002 feb0 	bl	80092b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af04      	add	r7, sp, #16
 8006566:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006568:	2302      	movs	r3, #2
 800656a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	d102      	bne.n	8006582 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2203      	movs	r2, #3
 8006580:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b0b      	cmp	r3, #11
 800658a:	f200 81be 	bhi.w	800690a <USBH_Process+0x3aa>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <USBH_Process+0x34>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065c5 	.word	0x080065c5
 8006598:	080065f7 	.word	0x080065f7
 800659c:	0800665f 	.word	0x0800665f
 80065a0:	080068a5 	.word	0x080068a5
 80065a4:	0800690b 	.word	0x0800690b
 80065a8:	08006703 	.word	0x08006703
 80065ac:	0800684b 	.word	0x0800684b
 80065b0:	08006739 	.word	0x08006739
 80065b4:	08006759 	.word	0x08006759
 80065b8:	08006779 	.word	0x08006779
 80065bc:	080067bd 	.word	0x080067bd
 80065c0:	0800688d 	.word	0x0800688d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 819e 	beq.w	800690e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80065d8:	20c8      	movs	r0, #200	; 0xc8
 80065da:	f002 feb3 	bl	8009344 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f002 fda9 	bl	8009136 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80065f4:	e18b      	b.n	800690e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d107      	bne.n	8006610 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800660e:	e18d      	b.n	800692c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800661a:	d914      	bls.n	8006646 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006622:	3301      	adds	r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006632:	2b03      	cmp	r3, #3
 8006634:	d903      	bls.n	800663e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	220d      	movs	r2, #13
 800663a:	701a      	strb	r2, [r3, #0]
      break;
 800663c:	e176      	b.n	800692c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
      break;
 8006644:	e172      	b.n	800692c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800664c:	f103 020a 	add.w	r2, r3, #10
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006656:	200a      	movs	r0, #10
 8006658:	f002 fe74 	bl	8009344 <USBH_Delay>
      break;
 800665c:	e166      	b.n	800692c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800666e:	2104      	movs	r1, #4
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006674:	2064      	movs	r0, #100	; 0x64
 8006676:	f002 fe65 	bl	8009344 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fd34 	bl	80090e8 <USBH_LL_GetSpeed>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2205      	movs	r2, #5
 800668e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006690:	2100      	movs	r1, #0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fa29 	bl	8007aea <USBH_AllocPipe>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80066a0:	2180      	movs	r1, #128	; 0x80
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fa21 	bl	8007aea <USBH_AllocPipe>
 80066a8:	4603      	mov	r3, r0
 80066aa:	461a      	mov	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7919      	ldrb	r1, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80066c4:	b292      	uxth	r2, r2
 80066c6:	9202      	str	r2, [sp, #8]
 80066c8:	2200      	movs	r2, #0
 80066ca:	9201      	str	r2, [sp, #4]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	4603      	mov	r3, r0
 80066d0:	2280      	movs	r2, #128	; 0x80
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 f9da 	bl	8007a8c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	7959      	ldrb	r1, [r3, #5]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80066ec:	b292      	uxth	r2, r2
 80066ee:	9202      	str	r2, [sp, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	9201      	str	r2, [sp, #4]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4603      	mov	r3, r0
 80066f8:	2200      	movs	r2, #0
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 f9c6 	bl	8007a8c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006700:	e114      	b.n	800692c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f918 	bl	8006938 <USBH_HandleEnum>
 8006708:	4603      	mov	r3, r0
 800670a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 80fe 	bne.w	8006912 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006724:	2b01      	cmp	r3, #1
 8006726:	d103      	bne.n	8006730 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2208      	movs	r2, #8
 800672c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800672e:	e0f0      	b.n	8006912 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2207      	movs	r2, #7
 8006734:	701a      	strb	r2, [r3, #0]
      break;
 8006736:	e0ec      	b.n	8006912 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80e9 	beq.w	8006916 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800674a:	2101      	movs	r1, #1
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2208      	movs	r2, #8
 8006754:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006756:	e0de      	b.n	8006916 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800675e:	b29b      	uxth	r3, r3
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fc2c 	bl	8006fc0 <USBH_SetCfg>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 80d5 	bne.w	800691a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2209      	movs	r2, #9
 8006774:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006776:	e0d0      	b.n	800691a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d016      	beq.n	80067b4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006786:	2101      	movs	r1, #1
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fc3c 	bl	8007006 <USBH_SetFeature>
 800678e:	4603      	mov	r3, r0
 8006790:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	220a      	movs	r2, #10
 800679e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067a0:	e0bd      	b.n	800691e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	f040 80b9 	bne.w	800691e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	220a      	movs	r2, #10
 80067b0:	701a      	strb	r2, [r3, #0]
      break;
 80067b2:	e0b4      	b.n	800691e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	220a      	movs	r2, #10
 80067b8:	701a      	strb	r2, [r3, #0]
      break;
 80067ba:	e0b0      	b.n	800691e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80ad 	beq.w	8006922 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
 80067d4:	e016      	b.n	8006804 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	32de      	adds	r2, #222	; 0xde
 80067dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e0:	791a      	ldrb	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d108      	bne.n	80067fe <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80067ec:	7bfa      	ldrb	r2, [r7, #15]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	32de      	adds	r2, #222	; 0xde
 80067f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80067fc:	e005      	b.n	800680a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	3301      	adds	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0e5      	beq.n	80067d6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d016      	beq.n	8006842 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2206      	movs	r2, #6
 800682a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006832:	2103      	movs	r1, #3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006838:	e073      	b.n	8006922 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	220d      	movs	r2, #13
 800683e:	701a      	strb	r2, [r3, #0]
      break;
 8006840:	e06f      	b.n	8006922 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	220d      	movs	r2, #13
 8006846:	701a      	strb	r2, [r3, #0]
      break;
 8006848:	e06b      	b.n	8006922 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d017      	beq.n	8006884 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
 8006860:	4603      	mov	r3, r0
 8006862:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d103      	bne.n	8006874 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	220b      	movs	r2, #11
 8006870:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006872:	e058      	b.n	8006926 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d154      	bne.n	8006926 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	220d      	movs	r2, #13
 8006880:	701a      	strb	r2, [r3, #0]
      break;
 8006882:	e050      	b.n	8006926 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	220d      	movs	r2, #13
 8006888:	701a      	strb	r2, [r3, #0]
      break;
 800688a:	e04c      	b.n	8006926 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d049      	beq.n	800692a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
      }
      break;
 80068a2:	e042      	b.n	800692a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fd67 	bl	8006380 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d009      	beq.n	80068d0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068e0:	2105      	movs	r1, #5
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d107      	bne.n	8006902 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fe20 	bl	8006540 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006900:	e014      	b.n	800692c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f002 fbba 	bl	800907c <USBH_LL_Start>
      break;
 8006908:	e010      	b.n	800692c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800690a:	bf00      	nop
 800690c:	e00e      	b.n	800692c <USBH_Process+0x3cc>
      break;
 800690e:	bf00      	nop
 8006910:	e00c      	b.n	800692c <USBH_Process+0x3cc>
      break;
 8006912:	bf00      	nop
 8006914:	e00a      	b.n	800692c <USBH_Process+0x3cc>
    break;
 8006916:	bf00      	nop
 8006918:	e008      	b.n	800692c <USBH_Process+0x3cc>
      break;
 800691a:	bf00      	nop
 800691c:	e006      	b.n	800692c <USBH_Process+0x3cc>
      break;
 800691e:	bf00      	nop
 8006920:	e004      	b.n	800692c <USBH_Process+0x3cc>
      break;
 8006922:	bf00      	nop
 8006924:	e002      	b.n	800692c <USBH_Process+0x3cc>
      break;
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <USBH_Process+0x3cc>
      break;
 800692a:	bf00      	nop
  }
  return USBH_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop

08006938 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af04      	add	r7, sp, #16
 800693e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006944:	2301      	movs	r3, #1
 8006946:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	2b07      	cmp	r3, #7
 800694e:	f200 81c1 	bhi.w	8006cd4 <USBH_HandleEnum+0x39c>
 8006952:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <USBH_HandleEnum+0x20>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	08006979 	.word	0x08006979
 800695c:	08006a37 	.word	0x08006a37
 8006960:	08006aa1 	.word	0x08006aa1
 8006964:	08006b2f 	.word	0x08006b2f
 8006968:	08006b99 	.word	0x08006b99
 800696c:	08006c09 	.word	0x08006c09
 8006970:	08006c4f 	.word	0x08006c4f
 8006974:	08006c95 	.word	0x08006c95
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006978:	2108      	movs	r1, #8
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa50 	bl	8006e20 <USBH_Get_DevDesc>
 8006980:	4603      	mov	r3, r0
 8006982:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d130      	bne.n	80069ec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7919      	ldrb	r1, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80069ae:	b292      	uxth	r2, r2
 80069b0:	9202      	str	r2, [sp, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	9201      	str	r2, [sp, #4]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	4603      	mov	r3, r0
 80069ba:	2280      	movs	r2, #128	; 0x80
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 f865 	bl	8007a8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	7959      	ldrb	r1, [r3, #5]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069d6:	b292      	uxth	r2, r2
 80069d8:	9202      	str	r2, [sp, #8]
 80069da:	2200      	movs	r2, #0
 80069dc:	9201      	str	r2, [sp, #4]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	4603      	mov	r3, r0
 80069e2:	2200      	movs	r2, #0
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 f851 	bl	8007a8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80069ea:	e175      	b.n	8006cd8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	f040 8172 	bne.w	8006cd8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069fa:	3301      	adds	r3, #1
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d903      	bls.n	8006a16 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	220d      	movs	r2, #13
 8006a12:	701a      	strb	r2, [r3, #0]
      break;
 8006a14:	e160      	b.n	8006cd8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	795b      	ldrb	r3, [r3, #5]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 f885 	bl	8007b2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	791b      	ldrb	r3, [r3, #4]
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 f87f 	bl	8007b2c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
      break;
 8006a34:	e150      	b.n	8006cd8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006a36:	2112      	movs	r1, #18
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f9f1 	bl	8006e20 <USBH_Get_DevDesc>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d103      	bne.n	8006a50 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006a4e:	e145      	b.n	8006cdc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	f040 8142 	bne.w	8006cdc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a5e:	3301      	adds	r3, #1
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d903      	bls.n	8006a7a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	220d      	movs	r2, #13
 8006a76:	701a      	strb	r2, [r3, #0]
      break;
 8006a78:	e130      	b.n	8006cdc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	795b      	ldrb	r3, [r3, #5]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 f853 	bl	8007b2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f84d 	bl	8007b2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
      break;
 8006a9e:	e11d      	b.n	8006cdc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa68 	bl	8006f78 <USBH_SetAddress>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d132      	bne.n	8006b18 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006ab2:	2002      	movs	r0, #2
 8006ab4:	f002 fc46 	bl	8009344 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	7919      	ldrb	r1, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ada:	b292      	uxth	r2, r2
 8006adc:	9202      	str	r2, [sp, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	9201      	str	r2, [sp, #4]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2280      	movs	r2, #128	; 0x80
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 ffcf 	bl	8007a8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	7959      	ldrb	r1, [r3, #5]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b02:	b292      	uxth	r2, r2
 8006b04:	9202      	str	r2, [sp, #8]
 8006b06:	2200      	movs	r2, #0
 8006b08:	9201      	str	r2, [sp, #4]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2200      	movs	r2, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 ffbb 	bl	8007a8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b16:	e0e3      	b.n	8006ce0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	f040 80e0 	bne.w	8006ce0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	220d      	movs	r2, #13
 8006b24:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	705a      	strb	r2, [r3, #1]
      break;
 8006b2c:	e0d8      	b.n	8006ce0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006b2e:	2109      	movs	r1, #9
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f99d 	bl	8006e70 <USBH_Get_CfgDesc>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d103      	bne.n	8006b48 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2204      	movs	r2, #4
 8006b44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b46:	e0cd      	b.n	8006ce4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	f040 80ca 	bne.w	8006ce4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b56:	3301      	adds	r3, #1
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d903      	bls.n	8006b72 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	220d      	movs	r2, #13
 8006b6e:	701a      	strb	r2, [r3, #0]
      break;
 8006b70:	e0b8      	b.n	8006ce4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	795b      	ldrb	r3, [r3, #5]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 ffd7 	bl	8007b2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	791b      	ldrb	r3, [r3, #4]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 ffd1 	bl	8007b2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	701a      	strb	r2, [r3, #0]
      break;
 8006b96:	e0a5      	b.n	8006ce4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f965 	bl	8006e70 <USBH_Get_CfgDesc>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006baa:	7bbb      	ldrb	r3, [r7, #14]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d103      	bne.n	8006bb8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2205      	movs	r2, #5
 8006bb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006bb6:	e097      	b.n	8006ce8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	f040 8094 	bne.w	8006ce8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d903      	bls.n	8006be2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	220d      	movs	r2, #13
 8006bde:	701a      	strb	r2, [r3, #0]
      break;
 8006be0:	e082      	b.n	8006ce8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	795b      	ldrb	r3, [r3, #5]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 ff9f 	bl	8007b2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	791b      	ldrb	r3, [r3, #4]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 ff99 	bl	8007b2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
      break;
 8006c06:	e06f      	b.n	8006ce8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d019      	beq.n	8006c46 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c1e:	23ff      	movs	r3, #255	; 0xff
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f949 	bl	8006eb8 <USBH_Get_StringDesc>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2206      	movs	r2, #6
 8006c34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c36:	e059      	b.n	8006cec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d156      	bne.n	8006cec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2206      	movs	r2, #6
 8006c42:	705a      	strb	r2, [r3, #1]
      break;
 8006c44:	e052      	b.n	8006cec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2206      	movs	r2, #6
 8006c4a:	705a      	strb	r2, [r3, #1]
      break;
 8006c4c:	e04e      	b.n	8006cec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d019      	beq.n	8006c8c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006c64:	23ff      	movs	r3, #255	; 0xff
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f926 	bl	8006eb8 <USBH_Get_StringDesc>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2207      	movs	r2, #7
 8006c7a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c7c:	e038      	b.n	8006cf0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d135      	bne.n	8006cf0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2207      	movs	r2, #7
 8006c88:	705a      	strb	r2, [r3, #1]
      break;
 8006c8a:	e031      	b.n	8006cf0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2207      	movs	r2, #7
 8006c90:	705a      	strb	r2, [r3, #1]
      break;
 8006c92:	e02d      	b.n	8006cf0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d017      	beq.n	8006cce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006caa:	23ff      	movs	r3, #255	; 0xff
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f903 	bl	8006eb8 <USBH_Get_StringDesc>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006cc0:	e018      	b.n	8006cf4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d115      	bne.n	8006cf4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
      break;
 8006ccc:	e012      	b.n	8006cf4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd2:	e00f      	b.n	8006cf4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006cd4:	bf00      	nop
 8006cd6:	e00e      	b.n	8006cf6 <USBH_HandleEnum+0x3be>
      break;
 8006cd8:	bf00      	nop
 8006cda:	e00c      	b.n	8006cf6 <USBH_HandleEnum+0x3be>
      break;
 8006cdc:	bf00      	nop
 8006cde:	e00a      	b.n	8006cf6 <USBH_HandleEnum+0x3be>
      break;
 8006ce0:	bf00      	nop
 8006ce2:	e008      	b.n	8006cf6 <USBH_HandleEnum+0x3be>
      break;
 8006ce4:	bf00      	nop
 8006ce6:	e006      	b.n	8006cf6 <USBH_HandleEnum+0x3be>
      break;
 8006ce8:	bf00      	nop
 8006cea:	e004      	b.n	8006cf6 <USBH_HandleEnum+0x3be>
      break;
 8006cec:	bf00      	nop
 8006cee:	e002      	b.n	8006cf6 <USBH_HandleEnum+0x3be>
      break;
 8006cf0:	bf00      	nop
 8006cf2:	e000      	b.n	8006cf6 <USBH_HandleEnum+0x3be>
      break;
 8006cf4:	bf00      	nop
  }
  return Status;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f804 	bl	8006d42 <USBH_HandleSof>
}
 8006d3a:	bf00      	nop
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b0b      	cmp	r3, #11
 8006d52:	d10a      	bne.n	8006d6a <USBH_HandleSof+0x28>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d005      	beq.n	8006d6a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006d82:	bf00      	nop
}
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006d9e:	bf00      	nop
}
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f002 f95a 	bl	80090b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	791b      	ldrb	r3, [r3, #4]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fe91 	bl	8007b2c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	795b      	ldrb	r3, [r3, #5]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fe8b 	bl	8007b2c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e3e:	2100      	movs	r1, #0
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f864 	bl	8006f0e <USBH_GetDescriptor>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e5c:	78fa      	ldrb	r2, [r7, #3]
 8006e5e:	b292      	uxth	r2, r2
 8006e60:	4619      	mov	r1, r3
 8006e62:	f000 f918 	bl	8007096 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	331c      	adds	r3, #28
 8006e80:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006e82:	887b      	ldrh	r3, [r7, #2]
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f83d 	bl	8006f0e <USBH_GetDescriptor>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006e9e:	887b      	ldrh	r3, [r7, #2]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f987 	bl	80071b8 <USBH_ParseCfgDesc>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	607a      	str	r2, [r7, #4]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	72fb      	strb	r3, [r7, #11]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006ed4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006edc:	893b      	ldrh	r3, [r7, #8]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f812 	bl	8006f0e <USBH_GetDescriptor>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d107      	bne.n	8006f04 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006efa:	893a      	ldrh	r2, [r7, #8]
 8006efc:	6879      	ldr	r1, [r7, #4]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fb24 	bl	800754c <USBH_ParseStringDesc>
  }

  return status;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	607b      	str	r3, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	72fb      	strb	r3, [r7, #11]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	789b      	ldrb	r3, [r3, #2]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d11c      	bne.n	8006f62 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2206      	movs	r2, #6
 8006f38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	893a      	ldrh	r2, [r7, #8]
 8006f3e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006f40:	893b      	ldrh	r3, [r7, #8]
 8006f42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f4a:	d104      	bne.n	8006f56 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f240 4209 	movw	r2, #1033	; 0x409
 8006f52:	829a      	strh	r2, [r3, #20]
 8006f54:	e002      	b.n	8006f5c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8b3a      	ldrh	r2, [r7, #24]
 8006f60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006f62:	8b3b      	ldrh	r3, [r7, #24]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fb3d 	bl	80075e8 <USBH_CtlReq>
 8006f6e:	4603      	mov	r3, r0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	789b      	ldrb	r3, [r3, #2]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d10f      	bne.n	8006fac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2205      	movs	r2, #5
 8006f96:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006fac:	2200      	movs	r2, #0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fb19 	bl	80075e8 <USBH_CtlReq>
 8006fb6:	4603      	mov	r3, r0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	789b      	ldrb	r3, [r3, #2]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d10e      	bne.n	8006ff2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2209      	movs	r2, #9
 8006fde:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	887a      	ldrh	r2, [r7, #2]
 8006fe4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 faf6 	bl	80075e8 <USBH_CtlReq>
 8006ffc:	4603      	mov	r3, r0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	789b      	ldrb	r3, [r3, #2]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d10f      	bne.n	800703a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2203      	movs	r2, #3
 8007024:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007026:	78fb      	ldrb	r3, [r7, #3]
 8007028:	b29a      	uxth	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fad2 	bl	80075e8 <USBH_CtlReq>
 8007044:	4603      	mov	r3, r0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	789b      	ldrb	r3, [r3, #2]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d10f      	bne.n	8007082 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007082:	2200      	movs	r2, #0
 8007084:	2100      	movs	r1, #0
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 faae 	bl	80075e8 <USBH_CtlReq>
 800708c:	4603      	mov	r3, r0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	4613      	mov	r3, r2
 80070a2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	785a      	ldrb	r2, [r3, #1]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	3302      	adds	r3, #2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3303      	adds	r3, #3
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	4313      	orrs	r3, r2
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	791a      	ldrb	r2, [r3, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	795a      	ldrb	r2, [r3, #5]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	799a      	ldrb	r2, [r3, #6]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	79da      	ldrb	r2, [r3, #7]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	79db      	ldrb	r3, [r3, #7]
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	dc11      	bgt.n	800711c <USBH_ParseDevDesc+0x86>
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	db16      	blt.n	800712a <USBH_ParseDevDesc+0x94>
 80070fc:	3b08      	subs	r3, #8
 80070fe:	2201      	movs	r2, #1
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <USBH_ParseDevDesc+0x8a>
 800711a:	e006      	b.n	800712a <USBH_ParseDevDesc+0x94>
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d104      	bne.n	800712a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	79da      	ldrb	r2, [r3, #7]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	71da      	strb	r2, [r3, #7]
      break;
 8007128:	e003      	b.n	8007132 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2240      	movs	r2, #64	; 0x40
 800712e:	71da      	strb	r2, [r3, #7]
      break;
 8007130:	bf00      	nop
  }

  if (length > 8U)
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d939      	bls.n	80071ac <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	3308      	adds	r3, #8
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	b29a      	uxth	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	3309      	adds	r3, #9
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	b29b      	uxth	r3, r3
 800714c:	4313      	orrs	r3, r2
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	330a      	adds	r3, #10
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	b29a      	uxth	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	330b      	adds	r3, #11
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	b29b      	uxth	r3, r3
 8007168:	4313      	orrs	r3, r2
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	330c      	adds	r3, #12
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b29a      	uxth	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	330d      	adds	r3, #13
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	b29b      	uxth	r3, r3
 8007184:	4313      	orrs	r3, r2
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	7b9a      	ldrb	r2, [r3, #14]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	7bda      	ldrb	r2, [r3, #15]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	7c1a      	ldrb	r2, [r3, #16]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	7c5a      	ldrb	r2, [r3, #17]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	745a      	strb	r2, [r3, #17]
  }
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08c      	sub	sp, #48	; 0x30
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	785a      	ldrb	r2, [r3, #1]
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	3302      	adds	r3, #2
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	3303      	adds	r3, #3
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	b29b      	uxth	r3, r3
 800720c:	4313      	orrs	r3, r2
 800720e:	b29b      	uxth	r3, r3
 8007210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007214:	bf28      	it	cs
 8007216:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800721a:	b29a      	uxth	r2, r3
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	791a      	ldrb	r2, [r3, #4]
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	795a      	ldrb	r2, [r3, #5]
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	799a      	ldrb	r2, [r3, #6]
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	79da      	ldrb	r2, [r3, #7]
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	7a1a      	ldrb	r2, [r3, #8]
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b09      	cmp	r3, #9
 800724e:	d002      	beq.n	8007256 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	2209      	movs	r2, #9
 8007254:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	2b09      	cmp	r3, #9
 800725a:	f240 809d 	bls.w	8007398 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800725e:	2309      	movs	r3, #9
 8007260:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007266:	e081      	b.n	800736c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007268:	f107 0316 	add.w	r3, r7, #22
 800726c:	4619      	mov	r1, r3
 800726e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007270:	f000 f99f 	bl	80075b2 <USBH_GetNextDesc>
 8007274:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b04      	cmp	r3, #4
 800727c:	d176      	bne.n	800736c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b09      	cmp	r3, #9
 8007284:	d002      	beq.n	800728c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	2209      	movs	r2, #9
 800728a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800728c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007290:	221a      	movs	r2, #26
 8007292:	fb02 f303 	mul.w	r3, r2, r3
 8007296:	3308      	adds	r3, #8
 8007298:	6a3a      	ldr	r2, [r7, #32]
 800729a:	4413      	add	r3, r2
 800729c:	3302      	adds	r3, #2
 800729e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80072a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a2:	69f8      	ldr	r0, [r7, #28]
 80072a4:	f000 f87e 	bl	80073a4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80072b2:	e043      	b.n	800733c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80072b4:	f107 0316 	add.w	r3, r7, #22
 80072b8:	4619      	mov	r1, r3
 80072ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072bc:	f000 f979 	bl	80075b2 <USBH_GetNextDesc>
 80072c0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d138      	bne.n	800733c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	795b      	ldrb	r3, [r3, #5]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d10f      	bne.n	80072f2 <USBH_ParseCfgDesc+0x13a>
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	799b      	ldrb	r3, [r3, #6]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d10b      	bne.n	80072f2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	79db      	ldrb	r3, [r3, #7]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10f      	bne.n	8007302 <USBH_ParseCfgDesc+0x14a>
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b09      	cmp	r3, #9
 80072e8:	d00b      	beq.n	8007302 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	2209      	movs	r2, #9
 80072ee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80072f0:	e007      	b.n	8007302 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b07      	cmp	r3, #7
 80072f8:	d004      	beq.n	8007304 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	2207      	movs	r2, #7
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	e000      	b.n	8007304 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007302:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007308:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800730c:	3201      	adds	r2, #1
 800730e:	00d2      	lsls	r2, r2, #3
 8007310:	211a      	movs	r1, #26
 8007312:	fb01 f303 	mul.w	r3, r1, r3
 8007316:	4413      	add	r3, r2
 8007318:	3308      	adds	r3, #8
 800731a:	6a3a      	ldr	r2, [r7, #32]
 800731c:	4413      	add	r3, r2
 800731e:	3304      	adds	r3, #4
 8007320:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007324:	69b9      	ldr	r1, [r7, #24]
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f86b 	bl	8007402 <USBH_ParseEPDesc>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007332:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007336:	3301      	adds	r3, #1
 8007338:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	791b      	ldrb	r3, [r3, #4]
 8007340:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007344:	429a      	cmp	r2, r3
 8007346:	d204      	bcs.n	8007352 <USBH_ParseCfgDesc+0x19a>
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	885a      	ldrh	r2, [r3, #2]
 800734c:	8afb      	ldrh	r3, [r7, #22]
 800734e:	429a      	cmp	r2, r3
 8007350:	d8b0      	bhi.n	80072b4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	791b      	ldrb	r3, [r3, #4]
 8007356:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800735a:	429a      	cmp	r2, r3
 800735c:	d201      	bcs.n	8007362 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800735e:	2303      	movs	r3, #3
 8007360:	e01c      	b.n	800739c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007366:	3301      	adds	r3, #1
 8007368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800736c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007370:	2b01      	cmp	r3, #1
 8007372:	d805      	bhi.n	8007380 <USBH_ParseCfgDesc+0x1c8>
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	885a      	ldrh	r2, [r3, #2]
 8007378:	8afb      	ldrh	r3, [r7, #22]
 800737a:	429a      	cmp	r2, r3
 800737c:	f63f af74 	bhi.w	8007268 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	791b      	ldrb	r3, [r3, #4]
 8007384:	2b02      	cmp	r3, #2
 8007386:	bf28      	it	cs
 8007388:	2302      	movcs	r3, #2
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007390:	429a      	cmp	r2, r3
 8007392:	d201      	bcs.n	8007398 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007394:	2303      	movs	r3, #3
 8007396:	e001      	b.n	800739c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800739c:	4618      	mov	r0, r3
 800739e:	3730      	adds	r7, #48	; 0x30
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781a      	ldrb	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	785a      	ldrb	r2, [r3, #1]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	789a      	ldrb	r2, [r3, #2]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	78da      	ldrb	r2, [r3, #3]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	791a      	ldrb	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	795a      	ldrb	r2, [r3, #5]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	799a      	ldrb	r2, [r3, #6]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	79da      	ldrb	r2, [r3, #7]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	7a1a      	ldrb	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	721a      	strb	r2, [r3, #8]
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007402:	b480      	push	{r7}
 8007404:	b087      	sub	sp, #28
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	785a      	ldrb	r2, [r3, #1]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	789a      	ldrb	r2, [r3, #2]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	78da      	ldrb	r2, [r3, #3]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3304      	adds	r3, #4
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	b29a      	uxth	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3305      	adds	r3, #5
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b29b      	uxth	r3, r3
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	b29b      	uxth	r3, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	b29a      	uxth	r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	799a      	ldrb	r2, [r3, #6]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	889b      	ldrh	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d102      	bne.n	8007464 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800745e:	2303      	movs	r3, #3
 8007460:	75fb      	strb	r3, [r7, #23]
 8007462:	e033      	b.n	80074cc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	889b      	ldrh	r3, [r3, #4]
 8007468:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800746c:	f023 0307 	bic.w	r3, r3, #7
 8007470:	b29a      	uxth	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	889b      	ldrh	r3, [r3, #4]
 800747a:	b21a      	sxth	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	b299      	uxth	r1, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3305      	adds	r3, #5
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	b29b      	uxth	r3, r3
 8007490:	430b      	orrs	r3, r1
 8007492:	b29b      	uxth	r3, r3
 8007494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007498:	2b00      	cmp	r3, #0
 800749a:	d110      	bne.n	80074be <USBH_ParseEPDesc+0xbc>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3304      	adds	r3, #4
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b299      	uxth	r1, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3305      	adds	r3, #5
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	430b      	orrs	r3, r1
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ba:	b21b      	sxth	r3, r3
 80074bc:	e001      	b.n	80074c2 <USBH_ParseEPDesc+0xc0>
 80074be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074c2:	4313      	orrs	r3, r2
 80074c4:	b21b      	sxth	r3, r3
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d116      	bne.n	8007504 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	78db      	ldrb	r3, [r3, #3]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d005      	beq.n	80074ee <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	78db      	ldrb	r3, [r3, #3]
 80074e6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d127      	bne.n	800753e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	799b      	ldrb	r3, [r3, #6]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <USBH_ParseEPDesc+0xfc>
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	799b      	ldrb	r3, [r3, #6]
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d91f      	bls.n	800753e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80074fe:	2303      	movs	r3, #3
 8007500:	75fb      	strb	r3, [r7, #23]
 8007502:	e01c      	b.n	800753e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	78db      	ldrb	r3, [r3, #3]
 8007508:	f003 0303 	and.w	r3, r3, #3
 800750c:	2b01      	cmp	r3, #1
 800750e:	d10a      	bne.n	8007526 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	799b      	ldrb	r3, [r3, #6]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <USBH_ParseEPDesc+0x11e>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	799b      	ldrb	r3, [r3, #6]
 800751c:	2b10      	cmp	r3, #16
 800751e:	d90e      	bls.n	800753e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007520:	2303      	movs	r3, #3
 8007522:	75fb      	strb	r3, [r7, #23]
 8007524:	e00b      	b.n	800753e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	78db      	ldrb	r3, [r3, #3]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	2b03      	cmp	r3, #3
 8007530:	d105      	bne.n	800753e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	799b      	ldrb	r3, [r3, #6]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800753a:	2303      	movs	r3, #3
 800753c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800753e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007540:	4618      	mov	r0, r3
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	4613      	mov	r3, r2
 8007558:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d120      	bne.n	80075a6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	1e9a      	subs	r2, r3, #2
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	4293      	cmp	r3, r2
 800756e:	bf28      	it	cs
 8007570:	4613      	movcs	r3, r2
 8007572:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3302      	adds	r3, #2
 8007578:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800757a:	2300      	movs	r3, #0
 800757c:	82fb      	strh	r3, [r7, #22]
 800757e:	e00b      	b.n	8007598 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007580:	8afb      	ldrh	r3, [r7, #22]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	781a      	ldrb	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	3301      	adds	r3, #1
 8007590:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007592:	8afb      	ldrh	r3, [r7, #22]
 8007594:	3302      	adds	r3, #2
 8007596:	82fb      	strh	r3, [r7, #22]
 8007598:	8afa      	ldrh	r2, [r7, #22]
 800759a:	8abb      	ldrh	r3, [r7, #20]
 800759c:	429a      	cmp	r2, r3
 800759e:	d3ef      	bcc.n	8007580 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
  }
}
 80075a6:	bf00      	nop
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	881a      	ldrh	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4413      	add	r3, r2
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4413      	add	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075da:	68fb      	ldr	r3, [r7, #12]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	789b      	ldrb	r3, [r3, #2]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d002      	beq.n	8007608 <USBH_CtlReq+0x20>
 8007602:	2b02      	cmp	r3, #2
 8007604:	d00f      	beq.n	8007626 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007606:	e027      	b.n	8007658 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2202      	movs	r2, #2
 800761e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007620:	2301      	movs	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
      break;
 8007624:	e018      	b.n	8007658 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f81c 	bl	8007664 <USBH_HandleControl>
 800762c:	4603      	mov	r3, r0
 800762e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <USBH_CtlReq+0x54>
 8007636:	7dfb      	ldrb	r3, [r7, #23]
 8007638:	2b03      	cmp	r3, #3
 800763a:	d106      	bne.n	800764a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2201      	movs	r2, #1
 8007640:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	761a      	strb	r2, [r3, #24]
      break;
 8007648:	e005      	b.n	8007656 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	2b02      	cmp	r3, #2
 800764e:	d102      	bne.n	8007656 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	709a      	strb	r2, [r3, #2]
      break;
 8007656:	bf00      	nop
  }
  return status;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af02      	add	r7, sp, #8
 800766a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800766c:	2301      	movs	r3, #1
 800766e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007670:	2300      	movs	r3, #0
 8007672:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7e1b      	ldrb	r3, [r3, #24]
 8007678:	3b01      	subs	r3, #1
 800767a:	2b0a      	cmp	r3, #10
 800767c:	f200 8156 	bhi.w	800792c <USBH_HandleControl+0x2c8>
 8007680:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <USBH_HandleControl+0x24>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	080076b5 	.word	0x080076b5
 800768c:	080076cf 	.word	0x080076cf
 8007690:	08007739 	.word	0x08007739
 8007694:	0800775f 	.word	0x0800775f
 8007698:	08007797 	.word	0x08007797
 800769c:	080077c1 	.word	0x080077c1
 80076a0:	08007813 	.word	0x08007813
 80076a4:	08007835 	.word	0x08007835
 80076a8:	08007871 	.word	0x08007871
 80076ac:	08007897 	.word	0x08007897
 80076b0:	080078d5 	.word	0x080078d5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f103 0110 	add.w	r1, r3, #16
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	795b      	ldrb	r3, [r3, #5]
 80076be:	461a      	mov	r2, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f943 	bl	800794c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	761a      	strb	r2, [r3, #24]
      break;
 80076cc:	e139      	b.n	8007942 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	795b      	ldrb	r3, [r3, #5]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fddb 	bl	8009290 <USBH_LL_GetURBState>
 80076da:	4603      	mov	r3, r0
 80076dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d11e      	bne.n	8007722 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	7c1b      	ldrb	r3, [r3, #16]
 80076e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	8adb      	ldrh	r3, [r3, #22]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80076f6:	7b7b      	ldrb	r3, [r7, #13]
 80076f8:	2b80      	cmp	r3, #128	; 0x80
 80076fa:	d103      	bne.n	8007704 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2203      	movs	r2, #3
 8007700:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007702:	e115      	b.n	8007930 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2205      	movs	r2, #5
 8007708:	761a      	strb	r2, [r3, #24]
      break;
 800770a:	e111      	b.n	8007930 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800770c:	7b7b      	ldrb	r3, [r7, #13]
 800770e:	2b80      	cmp	r3, #128	; 0x80
 8007710:	d103      	bne.n	800771a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2209      	movs	r2, #9
 8007716:	761a      	strb	r2, [r3, #24]
      break;
 8007718:	e10a      	b.n	8007930 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2207      	movs	r2, #7
 800771e:	761a      	strb	r2, [r3, #24]
      break;
 8007720:	e106      	b.n	8007930 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	2b04      	cmp	r3, #4
 8007726:	d003      	beq.n	8007730 <USBH_HandleControl+0xcc>
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	2b02      	cmp	r3, #2
 800772c:	f040 8100 	bne.w	8007930 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	220b      	movs	r2, #11
 8007734:	761a      	strb	r2, [r3, #24]
      break;
 8007736:	e0fb      	b.n	8007930 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6899      	ldr	r1, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	899a      	ldrh	r2, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	791b      	ldrb	r3, [r3, #4]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f93a 	bl	80079ca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2204      	movs	r2, #4
 800775a:	761a      	strb	r2, [r3, #24]
      break;
 800775c:	e0f1      	b.n	8007942 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	791b      	ldrb	r3, [r3, #4]
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fd93 	bl	8009290 <USBH_LL_GetURBState>
 800776a:	4603      	mov	r3, r0
 800776c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d102      	bne.n	800777a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2209      	movs	r2, #9
 8007778:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b05      	cmp	r3, #5
 800777e:	d102      	bne.n	8007786 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007780:	2303      	movs	r3, #3
 8007782:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007784:	e0d6      	b.n	8007934 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b04      	cmp	r3, #4
 800778a:	f040 80d3 	bne.w	8007934 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	220b      	movs	r2, #11
 8007792:	761a      	strb	r2, [r3, #24]
      break;
 8007794:	e0ce      	b.n	8007934 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6899      	ldr	r1, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	899a      	ldrh	r2, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	795b      	ldrb	r3, [r3, #5]
 80077a2:	2001      	movs	r0, #1
 80077a4:	9000      	str	r0, [sp, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f8ea 	bl	8007980 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2206      	movs	r2, #6
 80077bc:	761a      	strb	r2, [r3, #24]
      break;
 80077be:	e0c0      	b.n	8007942 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	795b      	ldrb	r3, [r3, #5]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 fd62 	bl	8009290 <USBH_LL_GetURBState>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d103      	bne.n	80077de <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2207      	movs	r2, #7
 80077da:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077dc:	e0ac      	b.n	8007938 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b05      	cmp	r3, #5
 80077e2:	d105      	bne.n	80077f0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	220c      	movs	r2, #12
 80077e8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80077ea:	2303      	movs	r3, #3
 80077ec:	73fb      	strb	r3, [r7, #15]
      break;
 80077ee:	e0a3      	b.n	8007938 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d103      	bne.n	80077fe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2205      	movs	r2, #5
 80077fa:	761a      	strb	r2, [r3, #24]
      break;
 80077fc:	e09c      	b.n	8007938 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b04      	cmp	r3, #4
 8007802:	f040 8099 	bne.w	8007938 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	220b      	movs	r2, #11
 800780a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800780c:	2302      	movs	r3, #2
 800780e:	73fb      	strb	r3, [r7, #15]
      break;
 8007810:	e092      	b.n	8007938 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	791b      	ldrb	r3, [r3, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	2100      	movs	r1, #0
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f8d5 	bl	80079ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007826:	b29a      	uxth	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2208      	movs	r2, #8
 8007830:	761a      	strb	r2, [r3, #24]

      break;
 8007832:	e086      	b.n	8007942 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	791b      	ldrb	r3, [r3, #4]
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 fd28 	bl	8009290 <USBH_LL_GetURBState>
 8007840:	4603      	mov	r3, r0
 8007842:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d105      	bne.n	8007856 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	220d      	movs	r2, #13
 800784e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007854:	e072      	b.n	800793c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b04      	cmp	r3, #4
 800785a:	d103      	bne.n	8007864 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	220b      	movs	r2, #11
 8007860:	761a      	strb	r2, [r3, #24]
      break;
 8007862:	e06b      	b.n	800793c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	2b05      	cmp	r3, #5
 8007868:	d168      	bne.n	800793c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800786a:	2303      	movs	r3, #3
 800786c:	73fb      	strb	r3, [r7, #15]
      break;
 800786e:	e065      	b.n	800793c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	795b      	ldrb	r3, [r3, #5]
 8007874:	2201      	movs	r2, #1
 8007876:	9200      	str	r2, [sp, #0]
 8007878:	2200      	movs	r2, #0
 800787a:	2100      	movs	r1, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f87f 	bl	8007980 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007888:	b29a      	uxth	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	220a      	movs	r2, #10
 8007892:	761a      	strb	r2, [r3, #24]
      break;
 8007894:	e055      	b.n	8007942 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	795b      	ldrb	r3, [r3, #5]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 fcf7 	bl	8009290 <USBH_LL_GetURBState>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d105      	bne.n	80078b8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	220d      	movs	r2, #13
 80078b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078b6:	e043      	b.n	8007940 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d103      	bne.n	80078c6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2209      	movs	r2, #9
 80078c2:	761a      	strb	r2, [r3, #24]
      break;
 80078c4:	e03c      	b.n	8007940 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d139      	bne.n	8007940 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	220b      	movs	r2, #11
 80078d0:	761a      	strb	r2, [r3, #24]
      break;
 80078d2:	e035      	b.n	8007940 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	7e5b      	ldrb	r3, [r3, #25]
 80078d8:	3301      	adds	r3, #1
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	765a      	strb	r2, [r3, #25]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7e5b      	ldrb	r3, [r3, #25]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d806      	bhi.n	80078f6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80078f4:	e025      	b.n	8007942 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078fc:	2106      	movs	r1, #6
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	795b      	ldrb	r3, [r3, #5]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f90c 	bl	8007b2c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f906 	bl	8007b2c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007926:	2302      	movs	r3, #2
 8007928:	73fb      	strb	r3, [r7, #15]
      break;
 800792a:	e00a      	b.n	8007942 <USBH_HandleControl+0x2de>

    default:
      break;
 800792c:	bf00      	nop
 800792e:	e008      	b.n	8007942 <USBH_HandleControl+0x2de>
      break;
 8007930:	bf00      	nop
 8007932:	e006      	b.n	8007942 <USBH_HandleControl+0x2de>
      break;
 8007934:	bf00      	nop
 8007936:	e004      	b.n	8007942 <USBH_HandleControl+0x2de>
      break;
 8007938:	bf00      	nop
 800793a:	e002      	b.n	8007942 <USBH_HandleControl+0x2de>
      break;
 800793c:	bf00      	nop
 800793e:	e000      	b.n	8007942 <USBH_HandleControl+0x2de>
      break;
 8007940:	bf00      	nop
  }

  return status;
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af04      	add	r7, sp, #16
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800795a:	79f9      	ldrb	r1, [r7, #7]
 800795c:	2300      	movs	r3, #0
 800795e:	9303      	str	r3, [sp, #12]
 8007960:	2308      	movs	r3, #8
 8007962:	9302      	str	r3, [sp, #8]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	2300      	movs	r3, #0
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	2300      	movs	r3, #0
 800796e:	2200      	movs	r2, #0
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f001 fc5c 	bl	800922e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af04      	add	r7, sp, #16
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	4611      	mov	r1, r2
 800798c:	461a      	mov	r2, r3
 800798e:	460b      	mov	r3, r1
 8007990:	80fb      	strh	r3, [r7, #6]
 8007992:	4613      	mov	r3, r2
 8007994:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079a4:	7979      	ldrb	r1, [r7, #5]
 80079a6:	7e3b      	ldrb	r3, [r7, #24]
 80079a8:	9303      	str	r3, [sp, #12]
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	9302      	str	r3, [sp, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	2301      	movs	r3, #1
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	2300      	movs	r3, #0
 80079b8:	2200      	movs	r2, #0
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f001 fc37 	bl	800922e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b088      	sub	sp, #32
 80079ce:	af04      	add	r7, sp, #16
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	4611      	mov	r1, r2
 80079d6:	461a      	mov	r2, r3
 80079d8:	460b      	mov	r3, r1
 80079da:	80fb      	strh	r3, [r7, #6]
 80079dc:	4613      	mov	r3, r2
 80079de:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079e0:	7979      	ldrb	r1, [r7, #5]
 80079e2:	2300      	movs	r3, #0
 80079e4:	9303      	str	r3, [sp, #12]
 80079e6:	88fb      	ldrh	r3, [r7, #6]
 80079e8:	9302      	str	r3, [sp, #8]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	2301      	movs	r3, #1
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	2300      	movs	r3, #0
 80079f4:	2201      	movs	r2, #1
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f001 fc19 	bl	800922e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80079fc:	2300      	movs	r3, #0

}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b088      	sub	sp, #32
 8007a0a:	af04      	add	r7, sp, #16
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	4611      	mov	r1, r2
 8007a12:	461a      	mov	r2, r3
 8007a14:	460b      	mov	r3, r1
 8007a16:	80fb      	strh	r3, [r7, #6]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a2a:	7979      	ldrb	r1, [r7, #5]
 8007a2c:	7e3b      	ldrb	r3, [r7, #24]
 8007a2e:	9303      	str	r3, [sp, #12]
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	9302      	str	r3, [sp, #8]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	2301      	movs	r3, #1
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	2200      	movs	r2, #0
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f001 fbf4 	bl	800922e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af04      	add	r7, sp, #16
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	460b      	mov	r3, r1
 8007a60:	80fb      	strh	r3, [r7, #6]
 8007a62:	4613      	mov	r3, r2
 8007a64:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a66:	7979      	ldrb	r1, [r7, #5]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9303      	str	r3, [sp, #12]
 8007a6c:	88fb      	ldrh	r3, [r7, #6]
 8007a6e:	9302      	str	r3, [sp, #8]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	2301      	movs	r3, #1
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	2302      	movs	r3, #2
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f001 fbd6 	bl	800922e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af04      	add	r7, sp, #16
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	4608      	mov	r0, r1
 8007a96:	4611      	mov	r1, r2
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	70fb      	strb	r3, [r7, #3]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70bb      	strb	r3, [r7, #2]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007aa6:	7878      	ldrb	r0, [r7, #1]
 8007aa8:	78ba      	ldrb	r2, [r7, #2]
 8007aaa:	78f9      	ldrb	r1, [r7, #3]
 8007aac:	8b3b      	ldrh	r3, [r7, #24]
 8007aae:	9302      	str	r3, [sp, #8]
 8007ab0:	7d3b      	ldrb	r3, [r7, #20]
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	7c3b      	ldrb	r3, [r7, #16]
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	4603      	mov	r3, r0
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 fb69 	bl	8009192 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 fb88 	bl	80091f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	460b      	mov	r3, r1
 8007af4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f836 	bl	8007b68 <USBH_GetFreePipe>
 8007afc:	4603      	mov	r3, r0
 8007afe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b00:	89fb      	ldrh	r3, [r7, #14]
 8007b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00a      	beq.n	8007b20 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	89fb      	ldrh	r3, [r7, #14]
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	33e0      	adds	r3, #224	; 0xe0
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	440b      	add	r3, r1
 8007b1e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007b20:	89fb      	ldrh	r3, [r7, #14]
 8007b22:	b2db      	uxtb	r3, r3
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	2b0f      	cmp	r3, #15
 8007b3c:	d80d      	bhi.n	8007b5a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	33e0      	adds	r3, #224	; 0xe0
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	33e0      	adds	r3, #224	; 0xe0
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007b74:	2300      	movs	r3, #0
 8007b76:	73fb      	strb	r3, [r7, #15]
 8007b78:	e00f      	b.n	8007b9a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	33e0      	adds	r3, #224	; 0xe0
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d102      	bne.n	8007b94 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	e007      	b.n	8007ba4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	3301      	adds	r3, #1
 8007b98:	73fb      	strb	r3, [r7, #15]
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	2b0f      	cmp	r3, #15
 8007b9e:	d9ec      	bls.n	8007b7a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3b04      	subs	r3, #4
 8007bc0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3b04      	subs	r3, #4
 8007bce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f023 0201 	bic.w	r2, r3, #1
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3b04      	subs	r3, #4
 8007bde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007be0:	4a0c      	ldr	r2, [pc, #48]	; (8007c14 <pxPortInitialiseStack+0x64>)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3b14      	subs	r3, #20
 8007bea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3b04      	subs	r3, #4
 8007bf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f06f 0202 	mvn.w	r2, #2
 8007bfe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3b20      	subs	r3, #32
 8007c04:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007c06:	68fb      	ldr	r3, [r7, #12]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	08007c19 	.word	0x08007c19

08007c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007c22:	4b12      	ldr	r3, [pc, #72]	; (8007c6c <prvTaskExitError+0x54>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c2a:	d00a      	beq.n	8007c42 <prvTaskExitError+0x2a>
        __asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	60fb      	str	r3, [r7, #12]
    }
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <prvTaskExitError+0x28>
        __asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	60bb      	str	r3, [r7, #8]
    }
 8007c54:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007c56:	bf00      	nop
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0fc      	beq.n	8007c58 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	2000002c 	.word	0x2000002c

08007c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <pxCurrentTCBConst2>)
 8007c72:	6819      	ldr	r1, [r3, #0]
 8007c74:	6808      	ldr	r0, [r1, #0]
 8007c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7a:	f380 8809 	msr	PSP, r0
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f04f 0000 	mov.w	r0, #0
 8007c86:	f380 8811 	msr	BASEPRI, r0
 8007c8a:	4770      	bx	lr
 8007c8c:	f3af 8000 	nop.w

08007c90 <pxCurrentTCBConst2>:
 8007c90:	20012e60 	.word	0x20012e60
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop

08007c98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007c98:	4808      	ldr	r0, [pc, #32]	; (8007cbc <prvPortStartFirstTask+0x24>)
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	6800      	ldr	r0, [r0, #0]
 8007c9e:	f380 8808 	msr	MSP, r0
 8007ca2:	f04f 0000 	mov.w	r0, #0
 8007ca6:	f380 8814 	msr	CONTROL, r0
 8007caa:	b662      	cpsie	i
 8007cac:	b661      	cpsie	f
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	df00      	svc	0
 8007cb8:	bf00      	nop
 8007cba:	0000      	.short	0x0000
 8007cbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop

08007cc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cca:	4b46      	ldr	r3, [pc, #280]	; (8007de4 <xPortStartScheduler+0x120>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a46      	ldr	r2, [pc, #280]	; (8007de8 <xPortStartScheduler+0x124>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d10a      	bne.n	8007cea <xPortStartScheduler+0x26>
        __asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	613b      	str	r3, [r7, #16]
    }
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cea:	4b3e      	ldr	r3, [pc, #248]	; (8007de4 <xPortStartScheduler+0x120>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a3f      	ldr	r2, [pc, #252]	; (8007dec <xPortStartScheduler+0x128>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d10a      	bne.n	8007d0a <xPortStartScheduler+0x46>
        __asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	60fb      	str	r3, [r7, #12]
    }
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d0a:	4b39      	ldr	r3, [pc, #228]	; (8007df0 <xPortStartScheduler+0x12c>)
 8007d0c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	22ff      	movs	r2, #255	; 0xff
 8007d1a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	4b31      	ldr	r3, [pc, #196]	; (8007df4 <xPortStartScheduler+0x130>)
 8007d30:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d32:	4b31      	ldr	r3, [pc, #196]	; (8007df8 <xPortStartScheduler+0x134>)
 8007d34:	2207      	movs	r2, #7
 8007d36:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d38:	e009      	b.n	8007d4e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8007d3a:	4b2f      	ldr	r3, [pc, #188]	; (8007df8 <xPortStartScheduler+0x134>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	4a2d      	ldr	r2, [pc, #180]	; (8007df8 <xPortStartScheduler+0x134>)
 8007d42:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d4e:	78fb      	ldrb	r3, [r7, #3]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d56:	2b80      	cmp	r3, #128	; 0x80
 8007d58:	d0ef      	beq.n	8007d3a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d5a:	4b27      	ldr	r3, [pc, #156]	; (8007df8 <xPortStartScheduler+0x134>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f1c3 0307 	rsb	r3, r3, #7
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d00a      	beq.n	8007d7c <xPortStartScheduler+0xb8>
        __asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	60bb      	str	r3, [r7, #8]
    }
 8007d78:	bf00      	nop
 8007d7a:	e7fe      	b.n	8007d7a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d7c:	4b1e      	ldr	r3, [pc, #120]	; (8007df8 <xPortStartScheduler+0x134>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	021b      	lsls	r3, r3, #8
 8007d82:	4a1d      	ldr	r2, [pc, #116]	; (8007df8 <xPortStartScheduler+0x134>)
 8007d84:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d86:	4b1c      	ldr	r3, [pc, #112]	; (8007df8 <xPortStartScheduler+0x134>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d8e:	4a1a      	ldr	r2, [pc, #104]	; (8007df8 <xPortStartScheduler+0x134>)
 8007d90:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007d9a:	4b18      	ldr	r3, [pc, #96]	; (8007dfc <xPortStartScheduler+0x138>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a17      	ldr	r2, [pc, #92]	; (8007dfc <xPortStartScheduler+0x138>)
 8007da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007da4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007da6:	4b15      	ldr	r3, [pc, #84]	; (8007dfc <xPortStartScheduler+0x138>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a14      	ldr	r2, [pc, #80]	; (8007dfc <xPortStartScheduler+0x138>)
 8007dac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007db0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007db2:	f000 f8db 	bl	8007f6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007db6:	4b12      	ldr	r3, [pc, #72]	; (8007e00 <xPortStartScheduler+0x13c>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007dbc:	f000 f8fa 	bl	8007fb4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007dc0:	4b10      	ldr	r3, [pc, #64]	; (8007e04 <xPortStartScheduler+0x140>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a0f      	ldr	r2, [pc, #60]	; (8007e04 <xPortStartScheduler+0x140>)
 8007dc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007dca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007dcc:	f7ff ff64 	bl	8007c98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007dd0:	f000 fef6 	bl	8008bc0 <vTaskSwitchContext>
    prvTaskExitError();
 8007dd4:	f7ff ff20 	bl	8007c18 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	e000ed00 	.word	0xe000ed00
 8007de8:	410fc271 	.word	0x410fc271
 8007dec:	410fc270 	.word	0x410fc270
 8007df0:	e000e400 	.word	0xe000e400
 8007df4:	2000023c 	.word	0x2000023c
 8007df8:	20000240 	.word	0x20000240
 8007dfc:	e000ed20 	.word	0xe000ed20
 8007e00:	2000002c 	.word	0x2000002c
 8007e04:	e000ef34 	.word	0xe000ef34

08007e08 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
        __asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	607b      	str	r3, [r7, #4]
    }
 8007e20:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007e22:	4b0f      	ldr	r3, [pc, #60]	; (8007e60 <vPortEnterCritical+0x58>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3301      	adds	r3, #1
 8007e28:	4a0d      	ldr	r2, [pc, #52]	; (8007e60 <vPortEnterCritical+0x58>)
 8007e2a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007e2c:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <vPortEnterCritical+0x58>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d10f      	bne.n	8007e54 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e34:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <vPortEnterCritical+0x5c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <vPortEnterCritical+0x4c>
        __asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	603b      	str	r3, [r7, #0]
    }
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <vPortEnterCritical+0x4a>
    }
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	2000002c 	.word	0x2000002c
 8007e64:	e000ed04 	.word	0xe000ed04

08007e68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <vPortExitCritical+0x50>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <vPortExitCritical+0x24>
        __asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	607b      	str	r3, [r7, #4]
    }
 8007e88:	bf00      	nop
 8007e8a:	e7fe      	b.n	8007e8a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <vPortExitCritical+0x50>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	4a09      	ldr	r2, [pc, #36]	; (8007eb8 <vPortExitCritical+0x50>)
 8007e94:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007e96:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <vPortExitCritical+0x50>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d105      	bne.n	8007eaa <vPortExitCritical+0x42>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007ea8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	2000002c 	.word	0x2000002c
 8007ebc:	00000000 	.word	0x00000000

08007ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007ec0:	f3ef 8009 	mrs	r0, PSP
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	4b15      	ldr	r3, [pc, #84]	; (8007f20 <pxCurrentTCBConst>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	f01e 0f10 	tst.w	lr, #16
 8007ed0:	bf08      	it	eq
 8007ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eda:	6010      	str	r0, [r2, #0]
 8007edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ee4:	f380 8811 	msr	BASEPRI, r0
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f000 fe66 	bl	8008bc0 <vTaskSwitchContext>
 8007ef4:	f04f 0000 	mov.w	r0, #0
 8007ef8:	f380 8811 	msr	BASEPRI, r0
 8007efc:	bc09      	pop	{r0, r3}
 8007efe:	6819      	ldr	r1, [r3, #0]
 8007f00:	6808      	ldr	r0, [r1, #0]
 8007f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f06:	f01e 0f10 	tst.w	lr, #16
 8007f0a:	bf08      	it	eq
 8007f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f10:	f380 8809 	msr	PSP, r0
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	f3af 8000 	nop.w

08007f20 <pxCurrentTCBConst>:
 8007f20:	20012e60 	.word	0x20012e60
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop

08007f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
        __asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	607b      	str	r3, [r7, #4]
    }
 8007f40:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007f42:	f000 fd27 	bl	8008994 <xTaskIncrementTick>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f4c:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <SysTick_Handler+0x40>)
 8007f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	2300      	movs	r3, #0
 8007f56:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	f383 8811 	msr	BASEPRI, r3
    }
 8007f5e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	e000ed04 	.word	0xe000ed04

08007f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <vPortSetupTimerInterrupt+0x34>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f76:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <vPortSetupTimerInterrupt+0x38>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <vPortSetupTimerInterrupt+0x3c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <vPortSetupTimerInterrupt+0x40>)
 8007f82:	fba2 2303 	umull	r2, r3, r2, r3
 8007f86:	099b      	lsrs	r3, r3, #6
 8007f88:	4a09      	ldr	r2, [pc, #36]	; (8007fb0 <vPortSetupTimerInterrupt+0x44>)
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f8e:	4b04      	ldr	r3, [pc, #16]	; (8007fa0 <vPortSetupTimerInterrupt+0x34>)
 8007f90:	2207      	movs	r2, #7
 8007f92:	601a      	str	r2, [r3, #0]
}
 8007f94:	bf00      	nop
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	e000e010 	.word	0xe000e010
 8007fa4:	e000e018 	.word	0xe000e018
 8007fa8:	20000000 	.word	0x20000000
 8007fac:	10624dd3 	.word	0x10624dd3
 8007fb0:	e000e014 	.word	0xe000e014

08007fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fc4 <vPortEnableVFP+0x10>
 8007fb8:	6801      	ldr	r1, [r0, #0]
 8007fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fbe:	6001      	str	r1, [r0, #0]
 8007fc0:	4770      	bx	lr
 8007fc2:	0000      	.short	0x0000
 8007fc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop

08007fcc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	; 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007fd8:	f000 fbd2 	bl	8008780 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007fdc:	4b53      	ldr	r3, [pc, #332]	; (800812c <pvPortMalloc+0x160>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007fe4:	f000 f908 	bl	80081f8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d012      	beq.n	8008014 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007fee:	2208      	movs	r2, #8
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	43db      	mvns	r3, r3
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d804      	bhi.n	8008010 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	4413      	add	r3, r2
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	e001      	b.n	8008014 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	db70      	blt.n	80080fc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d06d      	beq.n	80080fc <pvPortMalloc+0x130>
 8008020:	4b43      	ldr	r3, [pc, #268]	; (8008130 <pvPortMalloc+0x164>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d868      	bhi.n	80080fc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800802a:	4b42      	ldr	r3, [pc, #264]	; (8008134 <pvPortMalloc+0x168>)
 800802c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800802e:	4b41      	ldr	r3, [pc, #260]	; (8008134 <pvPortMalloc+0x168>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008034:	e004      	b.n	8008040 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d903      	bls.n	8008052 <pvPortMalloc+0x86>
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f1      	bne.n	8008036 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008052:	4b36      	ldr	r3, [pc, #216]	; (800812c <pvPortMalloc+0x160>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008058:	429a      	cmp	r2, r3
 800805a:	d04f      	beq.n	80080fc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2208      	movs	r2, #8
 8008062:	4413      	add	r3, r2
 8008064:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	1ad2      	subs	r2, r2, r3
 8008076:	2308      	movs	r3, #8
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	429a      	cmp	r2, r3
 800807c:	d91f      	bls.n	80080be <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800807e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <pvPortMalloc+0xda>
        __asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	613b      	str	r3, [r7, #16]
    }
 80080a2:	bf00      	nop
 80080a4:	e7fe      	b.n	80080a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	1ad2      	subs	r2, r2, r3
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080b8:	6978      	ldr	r0, [r7, #20]
 80080ba:	f000 f8f9 	bl	80082b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080be:	4b1c      	ldr	r3, [pc, #112]	; (8008130 <pvPortMalloc+0x164>)
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	4a19      	ldr	r2, [pc, #100]	; (8008130 <pvPortMalloc+0x164>)
 80080ca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080cc:	4b18      	ldr	r3, [pc, #96]	; (8008130 <pvPortMalloc+0x164>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	4b19      	ldr	r3, [pc, #100]	; (8008138 <pvPortMalloc+0x16c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d203      	bcs.n	80080e0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080d8:	4b15      	ldr	r3, [pc, #84]	; (8008130 <pvPortMalloc+0x164>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a16      	ldr	r2, [pc, #88]	; (8008138 <pvPortMalloc+0x16c>)
 80080de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <pvPortMalloc+0x170>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3301      	adds	r3, #1
 80080f8:	4a10      	ldr	r2, [pc, #64]	; (800813c <pvPortMalloc+0x170>)
 80080fa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80080fc:	f000 fb4e 	bl	800879c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <pvPortMalloc+0x154>
        __asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	60fb      	str	r3, [r7, #12]
    }
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <pvPortMalloc+0x152>
    return pvReturn;
 8008120:	69fb      	ldr	r3, [r7, #28]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3728      	adds	r7, #40	; 0x28
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20012e4c 	.word	0x20012e4c
 8008130:	20012e50 	.word	0x20012e50
 8008134:	20012e44 	.word	0x20012e44
 8008138:	20012e54 	.word	0x20012e54
 800813c:	20012e58 	.word	0x20012e58

08008140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d049      	beq.n	80081e6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008152:	2308      	movs	r3, #8
 8008154:	425b      	negs	r3, r3
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4413      	add	r3, r2
 800815a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	db0a      	blt.n	800817e <vPortFree+0x3e>
        __asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	60fb      	str	r3, [r7, #12]
    }
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <vPortFree+0x5c>
        __asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	60bb      	str	r3, [r7, #8]
    }
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	0fdb      	lsrs	r3, r3, #31
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01c      	beq.n	80081e6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d118      	bne.n	80081e6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80081c0:	f000 fade 	bl	8008780 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <vPortFree+0xb0>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4413      	add	r3, r2
 80081ce:	4a08      	ldr	r2, [pc, #32]	; (80081f0 <vPortFree+0xb0>)
 80081d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081d2:	6938      	ldr	r0, [r7, #16]
 80081d4:	f000 f86c 	bl	80082b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <vPortFree+0xb4>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	4a05      	ldr	r2, [pc, #20]	; (80081f4 <vPortFree+0xb4>)
 80081e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80081e2:	f000 fadb 	bl	800879c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80081e6:	bf00      	nop
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20012e50 	.word	0x20012e50
 80081f4:	20012e5c 	.word	0x20012e5c

080081f8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081fe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008202:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008204:	4b25      	ldr	r3, [pc, #148]	; (800829c <prvHeapInit+0xa4>)
 8008206:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00c      	beq.n	800822c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3307      	adds	r3, #7
 8008216:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0307 	bic.w	r3, r3, #7
 800821e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	4a1d      	ldr	r2, [pc, #116]	; (800829c <prvHeapInit+0xa4>)
 8008228:	4413      	add	r3, r2
 800822a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008230:	4a1b      	ldr	r2, [pc, #108]	; (80082a0 <prvHeapInit+0xa8>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008236:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <prvHeapInit+0xa8>)
 8008238:	2200      	movs	r2, #0
 800823a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008244:	2208      	movs	r2, #8
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	1a9b      	subs	r3, r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0307 	bic.w	r3, r3, #7
 8008252:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4a13      	ldr	r2, [pc, #76]	; (80082a4 <prvHeapInit+0xac>)
 8008258:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800825a:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <prvHeapInit+0xac>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2200      	movs	r2, #0
 8008260:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008262:	4b10      	ldr	r3, [pc, #64]	; (80082a4 <prvHeapInit+0xac>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	1ad2      	subs	r2, r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008278:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <prvHeapInit+0xac>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <prvHeapInit+0xb0>)
 8008286:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	4a07      	ldr	r2, [pc, #28]	; (80082ac <prvHeapInit+0xb4>)
 800828e:	6013      	str	r3, [r2, #0]
}
 8008290:	bf00      	nop
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	20000244 	.word	0x20000244
 80082a0:	20012e44 	.word	0x20012e44
 80082a4:	20012e4c 	.word	0x20012e4c
 80082a8:	20012e54 	.word	0x20012e54
 80082ac:	20012e50 	.word	0x20012e50

080082b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082b8:	4b28      	ldr	r3, [pc, #160]	; (800835c <prvInsertBlockIntoFreeList+0xac>)
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	e002      	b.n	80082c4 <prvInsertBlockIntoFreeList+0x14>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d8f7      	bhi.n	80082be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	4413      	add	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d108      	bne.n	80082f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	441a      	add	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	441a      	add	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d118      	bne.n	8008338 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	4b15      	ldr	r3, [pc, #84]	; (8008360 <prvInsertBlockIntoFreeList+0xb0>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	429a      	cmp	r2, r3
 8008310:	d00d      	beq.n	800832e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	441a      	add	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	e008      	b.n	8008340 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800832e:	4b0c      	ldr	r3, [pc, #48]	; (8008360 <prvInsertBlockIntoFreeList+0xb0>)
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	e003      	b.n	8008340 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d002      	beq.n	800834e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	20012e44 	.word	0x20012e44
 8008360:	20012e4c 	.word	0x20012e4c

08008364 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f103 0208 	add.w	r2, r3, #8
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800837c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f103 0208 	add.w	r2, r3, #8
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f103 0208 	add.w	r2, r3, #8
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6892      	ldr	r2, [r2, #8]
 80083d4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	6852      	ldr	r2, [r2, #4]
 80083de:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d103      	bne.n	80083f2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	1e5a      	subs	r2, r3, #1
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008412:	b580      	push	{r7, lr}
 8008414:	b08c      	sub	sp, #48	; 0x30
 8008416:	af04      	add	r7, sp, #16
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	4613      	mov	r3, r2
 8008420:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff fdd0 	bl	8007fcc <pvPortMalloc>
 800842c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d013      	beq.n	800845c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008434:	2058      	movs	r0, #88	; 0x58
 8008436:	f7ff fdc9 	bl	8007fcc <pvPortMalloc>
 800843a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d008      	beq.n	8008454 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008442:	2258      	movs	r2, #88	; 0x58
 8008444:	2100      	movs	r1, #0
 8008446:	69f8      	ldr	r0, [r7, #28]
 8008448:	f001 f804 	bl	8009454 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	631a      	str	r2, [r3, #48]	; 0x30
 8008452:	e005      	b.n	8008460 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f7ff fe73 	bl	8008140 <vPortFree>
 800845a:	e001      	b.n	8008460 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800845c:	2300      	movs	r3, #0
 800845e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d013      	beq.n	800848e <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008466:	88fa      	ldrh	r2, [r7, #6]
 8008468:	2300      	movs	r3, #0
 800846a:	9303      	str	r3, [sp, #12]
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	9302      	str	r3, [sp, #8]
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f80e 	bl	800849e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008482:	69f8      	ldr	r0, [r7, #28]
 8008484:	f000 f89a 	bl	80085bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008488:	2301      	movs	r3, #1
 800848a:	61bb      	str	r3, [r7, #24]
 800848c:	e002      	b.n	8008494 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800848e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008492:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008494:	69bb      	ldr	r3, [r7, #24]
    }
 8008496:	4618      	mov	r0, r3
 8008498:	3720      	adds	r7, #32
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b088      	sub	sp, #32
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	461a      	mov	r2, r3
 80084b6:	21a5      	movs	r1, #165	; 0xa5
 80084b8:	f000 ffcc 	bl	8009454 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084c6:	3b01      	subs	r3, #1
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	f023 0307 	bic.w	r3, r3, #7
 80084d4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00a      	beq.n	80084f6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	617b      	str	r3, [r7, #20]
    }
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01e      	beq.n	800853a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084fc:	2300      	movs	r3, #0
 80084fe:	61fb      	str	r3, [r7, #28]
 8008500:	e012      	b.n	8008528 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	4413      	add	r3, r2
 8008508:	7819      	ldrb	r1, [r3, #0]
 800850a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	4413      	add	r3, r2
 8008510:	3334      	adds	r3, #52	; 0x34
 8008512:	460a      	mov	r2, r1
 8008514:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	4413      	add	r3, r2
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d006      	beq.n	8008530 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	3301      	adds	r3, #1
 8008526:	61fb      	str	r3, [r7, #28]
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	2b09      	cmp	r3, #9
 800852c:	d9e9      	bls.n	8008502 <prvInitialiseNewTask+0x64>
 800852e:	e000      	b.n	8008532 <prvInitialiseNewTask+0x94>
            {
                break;
 8008530:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	2200      	movs	r2, #0
 8008536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	2b04      	cmp	r3, #4
 800853e:	d90a      	bls.n	8008556 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	613b      	str	r3, [r7, #16]
    }
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	2b04      	cmp	r3, #4
 800855a:	d901      	bls.n	8008560 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800855c:	2304      	movs	r3, #4
 800855e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008564:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800856a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	3304      	adds	r3, #4
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff ff17 	bl	80083a4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	3318      	adds	r3, #24
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff ff12 	bl	80083a4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008584:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	f1c3 0205 	rsb	r2, r3, #5
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008594:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	68f9      	ldr	r1, [r7, #12]
 800859a:	69b8      	ldr	r0, [r7, #24]
 800859c:	f7ff fb08 	bl	8007bb0 <pxPortInitialiseStack>
 80085a0:	4602      	mov	r2, r0
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80085b2:	bf00      	nop
 80085b4:	3720      	adds	r7, #32
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80085c4:	f7ff fc20 	bl	8007e08 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80085c8:	4b40      	ldr	r3, [pc, #256]	; (80086cc <prvAddNewTaskToReadyList+0x110>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3301      	adds	r3, #1
 80085ce:	4a3f      	ldr	r2, [pc, #252]	; (80086cc <prvAddNewTaskToReadyList+0x110>)
 80085d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80085d2:	4b3f      	ldr	r3, [pc, #252]	; (80086d0 <prvAddNewTaskToReadyList+0x114>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d109      	bne.n	80085ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80085da:	4a3d      	ldr	r2, [pc, #244]	; (80086d0 <prvAddNewTaskToReadyList+0x114>)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085e0:	4b3a      	ldr	r3, [pc, #232]	; (80086cc <prvAddNewTaskToReadyList+0x110>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d110      	bne.n	800860a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80085e8:	f000 fb5e 	bl	8008ca8 <prvInitialiseTaskLists>
 80085ec:	e00d      	b.n	800860a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80085ee:	4b39      	ldr	r3, [pc, #228]	; (80086d4 <prvAddNewTaskToReadyList+0x118>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085f6:	4b36      	ldr	r3, [pc, #216]	; (80086d0 <prvAddNewTaskToReadyList+0x114>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	429a      	cmp	r2, r3
 8008602:	d802      	bhi.n	800860a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008604:	4a32      	ldr	r2, [pc, #200]	; (80086d0 <prvAddNewTaskToReadyList+0x114>)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800860a:	4b33      	ldr	r3, [pc, #204]	; (80086d8 <prvAddNewTaskToReadyList+0x11c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	4a31      	ldr	r2, [pc, #196]	; (80086d8 <prvAddNewTaskToReadyList+0x11c>)
 8008612:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008614:	4b30      	ldr	r3, [pc, #192]	; (80086d8 <prvAddNewTaskToReadyList+0x11c>)
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	2201      	movs	r2, #1
 8008622:	409a      	lsls	r2, r3
 8008624:	4b2d      	ldr	r3, [pc, #180]	; (80086dc <prvAddNewTaskToReadyList+0x120>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4313      	orrs	r3, r2
 800862a:	4a2c      	ldr	r2, [pc, #176]	; (80086dc <prvAddNewTaskToReadyList+0x120>)
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008632:	492b      	ldr	r1, [pc, #172]	; (80086e0 <prvAddNewTaskToReadyList+0x124>)
 8008634:	4613      	mov	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	440b      	add	r3, r1
 800863e:	3304      	adds	r3, #4
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	609a      	str	r2, [r3, #8]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60da      	str	r2, [r3, #12]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	3204      	adds	r2, #4
 800865a:	605a      	str	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	1d1a      	adds	r2, r3, #4
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	609a      	str	r2, [r3, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4a1b      	ldr	r2, [pc, #108]	; (80086e0 <prvAddNewTaskToReadyList+0x124>)
 8008672:	441a      	add	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	615a      	str	r2, [r3, #20]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867c:	4918      	ldr	r1, [pc, #96]	; (80086e0 <prvAddNewTaskToReadyList+0x124>)
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	440b      	add	r3, r1
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1c59      	adds	r1, r3, #1
 800868c:	4814      	ldr	r0, [pc, #80]	; (80086e0 <prvAddNewTaskToReadyList+0x124>)
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4403      	add	r3, r0
 8008698:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800869a:	f7ff fbe5 	bl	8007e68 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800869e:	4b0d      	ldr	r3, [pc, #52]	; (80086d4 <prvAddNewTaskToReadyList+0x118>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00e      	beq.n	80086c4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <prvAddNewTaskToReadyList+0x114>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d207      	bcs.n	80086c4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80086b4:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <prvAddNewTaskToReadyList+0x128>)
 80086b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	20012f38 	.word	0x20012f38
 80086d0:	20012e60 	.word	0x20012e60
 80086d4:	20012f44 	.word	0x20012f44
 80086d8:	20012f54 	.word	0x20012f54
 80086dc:	20012f40 	.word	0x20012f40
 80086e0:	20012e64 	.word	0x20012e64
 80086e4:	e000ed04 	.word	0xe000ed04

080086e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80086ee:	4b1d      	ldr	r3, [pc, #116]	; (8008764 <vTaskStartScheduler+0x7c>)
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	2300      	movs	r3, #0
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	2300      	movs	r3, #0
 80086f8:	2282      	movs	r2, #130	; 0x82
 80086fa:	491b      	ldr	r1, [pc, #108]	; (8008768 <vTaskStartScheduler+0x80>)
 80086fc:	481b      	ldr	r0, [pc, #108]	; (800876c <vTaskStartScheduler+0x84>)
 80086fe:	f7ff fe88 	bl	8008412 <xTaskCreate>
 8008702:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d116      	bne.n	8008738 <vTaskStartScheduler+0x50>
        __asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	60bb      	str	r3, [r7, #8]
    }
 800871c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800871e:	4b14      	ldr	r3, [pc, #80]	; (8008770 <vTaskStartScheduler+0x88>)
 8008720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008724:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8008726:	4b13      	ldr	r3, [pc, #76]	; (8008774 <vTaskStartScheduler+0x8c>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800872c:	4b12      	ldr	r3, [pc, #72]	; (8008778 <vTaskStartScheduler+0x90>)
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8008732:	f7ff fac7 	bl	8007cc4 <xPortStartScheduler>
 8008736:	e00e      	b.n	8008756 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800873e:	d10a      	bne.n	8008756 <vTaskStartScheduler+0x6e>
        __asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	607b      	str	r3, [r7, #4]
    }
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <vTaskStartScheduler+0x94>)
 8008758:	681b      	ldr	r3, [r3, #0]
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20012f5c 	.word	0x20012f5c
 8008768:	08009eb8 	.word	0x08009eb8
 800876c:	08008c79 	.word	0x08008c79
 8008770:	20012f58 	.word	0x20012f58
 8008774:	20012f44 	.word	0x20012f44
 8008778:	20012f3c 	.word	0x20012f3c
 800877c:	20000030 	.word	0x20000030

08008780 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008784:	4b04      	ldr	r3, [pc, #16]	; (8008798 <vTaskSuspendAll+0x18>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3301      	adds	r3, #1
 800878a:	4a03      	ldr	r2, [pc, #12]	; (8008798 <vTaskSuspendAll+0x18>)
 800878c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800878e:	bf00      	nop
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	20012f60 	.word	0x20012f60

0800879c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80087aa:	4b71      	ldr	r3, [pc, #452]	; (8008970 <xTaskResumeAll+0x1d4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	607b      	str	r3, [r7, #4]
    }
 80087c4:	bf00      	nop
 80087c6:	e7fe      	b.n	80087c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80087c8:	f7ff fb1e 	bl	8007e08 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80087cc:	4b68      	ldr	r3, [pc, #416]	; (8008970 <xTaskResumeAll+0x1d4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	4a67      	ldr	r2, [pc, #412]	; (8008970 <xTaskResumeAll+0x1d4>)
 80087d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d6:	4b66      	ldr	r3, [pc, #408]	; (8008970 <xTaskResumeAll+0x1d4>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f040 80c0 	bne.w	8008960 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087e0:	4b64      	ldr	r3, [pc, #400]	; (8008974 <xTaskResumeAll+0x1d8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80bb 	beq.w	8008960 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087ea:	e08a      	b.n	8008902 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ec:	4b62      	ldr	r3, [pc, #392]	; (8008978 <xTaskResumeAll+0x1dc>)
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f8:	613b      	str	r3, [r7, #16]
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	6a12      	ldr	r2, [r2, #32]
 8008802:	609a      	str	r2, [r3, #8]
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	69d2      	ldr	r2, [r2, #28]
 800880c:	605a      	str	r2, [r3, #4]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	3318      	adds	r3, #24
 8008816:	429a      	cmp	r2, r3
 8008818:	d103      	bne.n	8008822 <xTaskResumeAll+0x86>
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	6a1a      	ldr	r2, [r3, #32]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	605a      	str	r2, [r3, #4]
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	2200      	movs	r2, #0
 8008826:	629a      	str	r2, [r3, #40]	; 0x28
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	1e5a      	subs	r2, r3, #1
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	68d2      	ldr	r2, [r2, #12]
 8008840:	609a      	str	r2, [r3, #8]
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	6892      	ldr	r2, [r2, #8]
 800884a:	605a      	str	r2, [r3, #4]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	3304      	adds	r3, #4
 8008854:	429a      	cmp	r2, r3
 8008856:	d103      	bne.n	8008860 <xTaskResumeAll+0xc4>
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	605a      	str	r2, [r3, #4]
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	2200      	movs	r2, #0
 8008864:	615a      	str	r2, [r3, #20]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	1e5a      	subs	r2, r3, #1
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	2201      	movs	r2, #1
 8008876:	409a      	lsls	r2, r3
 8008878:	4b40      	ldr	r3, [pc, #256]	; (800897c <xTaskResumeAll+0x1e0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4313      	orrs	r3, r2
 800887e:	4a3f      	ldr	r2, [pc, #252]	; (800897c <xTaskResumeAll+0x1e0>)
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008886:	493e      	ldr	r1, [pc, #248]	; (8008980 <xTaskResumeAll+0x1e4>)
 8008888:	4613      	mov	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	3304      	adds	r3, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60bb      	str	r3, [r7, #8]
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	609a      	str	r2, [r3, #8]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	60da      	str	r2, [r3, #12]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	3204      	adds	r2, #4
 80088ae:	605a      	str	r2, [r3, #4]
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	1d1a      	adds	r2, r3, #4
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	609a      	str	r2, [r3, #8]
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4a2e      	ldr	r2, [pc, #184]	; (8008980 <xTaskResumeAll+0x1e4>)
 80088c6:	441a      	add	r2, r3
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	615a      	str	r2, [r3, #20]
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d0:	492b      	ldr	r1, [pc, #172]	; (8008980 <xTaskResumeAll+0x1e4>)
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	440b      	add	r3, r1
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	1c59      	adds	r1, r3, #1
 80088e0:	4827      	ldr	r0, [pc, #156]	; (8008980 <xTaskResumeAll+0x1e4>)
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4403      	add	r3, r0
 80088ec:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	4b24      	ldr	r3, [pc, #144]	; (8008984 <xTaskResumeAll+0x1e8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d302      	bcc.n	8008902 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80088fc:	4b22      	ldr	r3, [pc, #136]	; (8008988 <xTaskResumeAll+0x1ec>)
 80088fe:	2201      	movs	r2, #1
 8008900:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008902:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <xTaskResumeAll+0x1dc>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f47f af70 	bne.w	80087ec <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8008912:	f000 fa47 	bl	8008da4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008916:	4b1d      	ldr	r3, [pc, #116]	; (800898c <xTaskResumeAll+0x1f0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d010      	beq.n	8008944 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8008922:	f000 f837 	bl	8008994 <xTaskIncrementTick>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800892c:	4b16      	ldr	r3, [pc, #88]	; (8008988 <xTaskResumeAll+0x1ec>)
 800892e:	2201      	movs	r2, #1
 8008930:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	3b01      	subs	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f1      	bne.n	8008922 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800893e:	4b13      	ldr	r3, [pc, #76]	; (800898c <xTaskResumeAll+0x1f0>)
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8008944:	4b10      	ldr	r3, [pc, #64]	; (8008988 <xTaskResumeAll+0x1ec>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8008950:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <xTaskResumeAll+0x1f4>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008960:	f7ff fa82 	bl	8007e68 <vPortExitCritical>

    return xAlreadyYielded;
 8008964:	69bb      	ldr	r3, [r7, #24]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20012f60 	.word	0x20012f60
 8008974:	20012f38 	.word	0x20012f38
 8008978:	20012ef8 	.word	0x20012ef8
 800897c:	20012f40 	.word	0x20012f40
 8008980:	20012e64 	.word	0x20012e64
 8008984:	20012e60 	.word	0x20012e60
 8008988:	20012f4c 	.word	0x20012f4c
 800898c:	20012f48 	.word	0x20012f48
 8008990:	e000ed04 	.word	0xe000ed04

08008994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08a      	sub	sp, #40	; 0x28
 8008998:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800899a:	2300      	movs	r3, #0
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800899e:	4b7d      	ldr	r3, [pc, #500]	; (8008b94 <xTaskIncrementTick+0x200>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f040 80ec 	bne.w	8008b80 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089a8:	4b7b      	ldr	r3, [pc, #492]	; (8008b98 <xTaskIncrementTick+0x204>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3301      	adds	r3, #1
 80089ae:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80089b0:	4a79      	ldr	r2, [pc, #484]	; (8008b98 <xTaskIncrementTick+0x204>)
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d120      	bne.n	80089fe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80089bc:	4b77      	ldr	r3, [pc, #476]	; (8008b9c <xTaskIncrementTick+0x208>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <xTaskIncrementTick+0x48>
        __asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	607b      	str	r3, [r7, #4]
    }
 80089d8:	bf00      	nop
 80089da:	e7fe      	b.n	80089da <xTaskIncrementTick+0x46>
 80089dc:	4b6f      	ldr	r3, [pc, #444]	; (8008b9c <xTaskIncrementTick+0x208>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	61fb      	str	r3, [r7, #28]
 80089e2:	4b6f      	ldr	r3, [pc, #444]	; (8008ba0 <xTaskIncrementTick+0x20c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a6d      	ldr	r2, [pc, #436]	; (8008b9c <xTaskIncrementTick+0x208>)
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	4a6d      	ldr	r2, [pc, #436]	; (8008ba0 <xTaskIncrementTick+0x20c>)
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	4b6c      	ldr	r3, [pc, #432]	; (8008ba4 <xTaskIncrementTick+0x210>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	4a6b      	ldr	r2, [pc, #428]	; (8008ba4 <xTaskIncrementTick+0x210>)
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	f000 f9d3 	bl	8008da4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80089fe:	4b6a      	ldr	r3, [pc, #424]	; (8008ba8 <xTaskIncrementTick+0x214>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6a3a      	ldr	r2, [r7, #32]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	f0c0 80a6 	bcc.w	8008b56 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a0a:	4b64      	ldr	r3, [pc, #400]	; (8008b9c <xTaskIncrementTick+0x208>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d104      	bne.n	8008a1e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a14:	4b64      	ldr	r3, [pc, #400]	; (8008ba8 <xTaskIncrementTick+0x214>)
 8008a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a1a:	601a      	str	r2, [r3, #0]
                    break;
 8008a1c:	e09b      	b.n	8008b56 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a1e:	4b5f      	ldr	r3, [pc, #380]	; (8008b9c <xTaskIncrementTick+0x208>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8008a2e:	6a3a      	ldr	r2, [r7, #32]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d203      	bcs.n	8008a3e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008a36:	4a5c      	ldr	r2, [pc, #368]	; (8008ba8 <xTaskIncrementTick+0x214>)
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008a3c:	e08b      	b.n	8008b56 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	613b      	str	r3, [r7, #16]
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	68d2      	ldr	r2, [r2, #12]
 8008a4c:	609a      	str	r2, [r3, #8]
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	6892      	ldr	r2, [r2, #8]
 8008a56:	605a      	str	r2, [r3, #4]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d103      	bne.n	8008a6c <xTaskIncrementTick+0xd8>
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	68da      	ldr	r2, [r3, #12]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	605a      	str	r2, [r3, #4]
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	615a      	str	r2, [r3, #20]
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	1e5a      	subs	r2, r3, #1
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d01e      	beq.n	8008ac2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	6a12      	ldr	r2, [r2, #32]
 8008a92:	609a      	str	r2, [r3, #8]
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	69d2      	ldr	r2, [r2, #28]
 8008a9c:	605a      	str	r2, [r3, #4]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	3318      	adds	r3, #24
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d103      	bne.n	8008ab2 <xTaskIncrementTick+0x11e>
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	6a1a      	ldr	r2, [r3, #32]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	605a      	str	r2, [r3, #4]
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	1e5a      	subs	r2, r3, #1
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	409a      	lsls	r2, r3
 8008aca:	4b38      	ldr	r3, [pc, #224]	; (8008bac <xTaskIncrementTick+0x218>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	4a36      	ldr	r2, [pc, #216]	; (8008bac <xTaskIncrementTick+0x218>)
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad8:	4935      	ldr	r1, [pc, #212]	; (8008bb0 <xTaskIncrementTick+0x21c>)
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	440b      	add	r3, r1
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60bb      	str	r3, [r7, #8]
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	609a      	str	r2, [r3, #8]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	60da      	str	r2, [r3, #12]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	3204      	adds	r2, #4
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	1d1a      	adds	r2, r3, #4
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	609a      	str	r2, [r3, #8]
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4a26      	ldr	r2, [pc, #152]	; (8008bb0 <xTaskIncrementTick+0x21c>)
 8008b18:	441a      	add	r2, r3
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	615a      	str	r2, [r3, #20]
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b22:	4923      	ldr	r1, [pc, #140]	; (8008bb0 <xTaskIncrementTick+0x21c>)
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	1c59      	adds	r1, r3, #1
 8008b32:	481f      	ldr	r0, [pc, #124]	; (8008bb0 <xTaskIncrementTick+0x21c>)
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4403      	add	r3, r0
 8008b3e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b44:	4b1b      	ldr	r3, [pc, #108]	; (8008bb4 <xTaskIncrementTick+0x220>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	f67f af5d 	bls.w	8008a0a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8008b50:	2301      	movs	r3, #1
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b54:	e759      	b.n	8008a0a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b56:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <xTaskIncrementTick+0x220>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5c:	4914      	ldr	r1, [pc, #80]	; (8008bb0 <xTaskIncrementTick+0x21c>)
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	440b      	add	r3, r1
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d901      	bls.n	8008b72 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <xTaskIncrementTick+0x224>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7e:	e004      	b.n	8008b8a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008b80:	4b0e      	ldr	r3, [pc, #56]	; (8008bbc <xTaskIncrementTick+0x228>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a0d      	ldr	r2, [pc, #52]	; (8008bbc <xTaskIncrementTick+0x228>)
 8008b88:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3728      	adds	r7, #40	; 0x28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	20012f60 	.word	0x20012f60
 8008b98:	20012f3c 	.word	0x20012f3c
 8008b9c:	20012ef0 	.word	0x20012ef0
 8008ba0:	20012ef4 	.word	0x20012ef4
 8008ba4:	20012f50 	.word	0x20012f50
 8008ba8:	20012f58 	.word	0x20012f58
 8008bac:	20012f40 	.word	0x20012f40
 8008bb0:	20012e64 	.word	0x20012e64
 8008bb4:	20012e60 	.word	0x20012e60
 8008bb8:	20012f4c 	.word	0x20012f4c
 8008bbc:	20012f48 	.word	0x20012f48

08008bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bc6:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <vTaskSwitchContext+0xa4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008bce:	4b26      	ldr	r3, [pc, #152]	; (8008c68 <vTaskSwitchContext+0xa8>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008bd4:	e03f      	b.n	8008c56 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8008bd6:	4b24      	ldr	r3, [pc, #144]	; (8008c68 <vTaskSwitchContext+0xa8>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bdc:	4b23      	ldr	r3, [pc, #140]	; (8008c6c <vTaskSwitchContext+0xac>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	fab3 f383 	clz	r3, r3
 8008be8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008bea:	7afb      	ldrb	r3, [r7, #11]
 8008bec:	f1c3 031f 	rsb	r3, r3, #31
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	491f      	ldr	r1, [pc, #124]	; (8008c70 <vTaskSwitchContext+0xb0>)
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	440b      	add	r3, r1
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <vTaskSwitchContext+0x5c>
        __asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	607b      	str	r3, [r7, #4]
    }
 8008c18:	bf00      	nop
 8008c1a:	e7fe      	b.n	8008c1a <vTaskSwitchContext+0x5a>
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4a12      	ldr	r2, [pc, #72]	; (8008c70 <vTaskSwitchContext+0xb0>)
 8008c28:	4413      	add	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	605a      	str	r2, [r3, #4]
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d104      	bne.n	8008c4c <vTaskSwitchContext+0x8c>
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	605a      	str	r2, [r3, #4]
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	4a08      	ldr	r2, [pc, #32]	; (8008c74 <vTaskSwitchContext+0xb4>)
 8008c54:	6013      	str	r3, [r2, #0]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20012f60 	.word	0x20012f60
 8008c68:	20012f4c 	.word	0x20012f4c
 8008c6c:	20012f40 	.word	0x20012f40
 8008c70:	20012e64 	.word	0x20012e64
 8008c74:	20012e60 	.word	0x20012e60

08008c78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008c80:	f000 f852 	bl	8008d28 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c84:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <prvIdleTask+0x28>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d9f9      	bls.n	8008c80 <prvIdleTask+0x8>
            {
                taskYIELD();
 8008c8c:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <prvIdleTask+0x2c>)
 8008c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8008c9c:	e7f0      	b.n	8008c80 <prvIdleTask+0x8>
 8008c9e:	bf00      	nop
 8008ca0:	20012e64 	.word	0x20012e64
 8008ca4:	e000ed04 	.word	0xe000ed04

08008ca8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cae:	2300      	movs	r3, #0
 8008cb0:	607b      	str	r3, [r7, #4]
 8008cb2:	e00c      	b.n	8008cce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4a12      	ldr	r2, [pc, #72]	; (8008d08 <prvInitialiseTaskLists+0x60>)
 8008cc0:	4413      	add	r3, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fb4e 	bl	8008364 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d9ef      	bls.n	8008cb4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008cd4:	480d      	ldr	r0, [pc, #52]	; (8008d0c <prvInitialiseTaskLists+0x64>)
 8008cd6:	f7ff fb45 	bl	8008364 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008cda:	480d      	ldr	r0, [pc, #52]	; (8008d10 <prvInitialiseTaskLists+0x68>)
 8008cdc:	f7ff fb42 	bl	8008364 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008ce0:	480c      	ldr	r0, [pc, #48]	; (8008d14 <prvInitialiseTaskLists+0x6c>)
 8008ce2:	f7ff fb3f 	bl	8008364 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8008ce6:	480c      	ldr	r0, [pc, #48]	; (8008d18 <prvInitialiseTaskLists+0x70>)
 8008ce8:	f7ff fb3c 	bl	8008364 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8008cec:	480b      	ldr	r0, [pc, #44]	; (8008d1c <prvInitialiseTaskLists+0x74>)
 8008cee:	f7ff fb39 	bl	8008364 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <prvInitialiseTaskLists+0x78>)
 8008cf4:	4a05      	ldr	r2, [pc, #20]	; (8008d0c <prvInitialiseTaskLists+0x64>)
 8008cf6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cf8:	4b0a      	ldr	r3, [pc, #40]	; (8008d24 <prvInitialiseTaskLists+0x7c>)
 8008cfa:	4a05      	ldr	r2, [pc, #20]	; (8008d10 <prvInitialiseTaskLists+0x68>)
 8008cfc:	601a      	str	r2, [r3, #0]
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20012e64 	.word	0x20012e64
 8008d0c:	20012ec8 	.word	0x20012ec8
 8008d10:	20012edc 	.word	0x20012edc
 8008d14:	20012ef8 	.word	0x20012ef8
 8008d18:	20012f0c 	.word	0x20012f0c
 8008d1c:	20012f24 	.word	0x20012f24
 8008d20:	20012ef0 	.word	0x20012ef0
 8008d24:	20012ef4 	.word	0x20012ef4

08008d28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d2e:	e019      	b.n	8008d64 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008d30:	f7ff f86a 	bl	8007e08 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d34:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <prvCheckTasksWaitingTermination+0x50>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff fb3c 	bl	80083be <uxListRemove>
                --uxCurrentNumberOfTasks;
 8008d46:	4b0d      	ldr	r3, [pc, #52]	; (8008d7c <prvCheckTasksWaitingTermination+0x54>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	4a0b      	ldr	r2, [pc, #44]	; (8008d7c <prvCheckTasksWaitingTermination+0x54>)
 8008d4e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <prvCheckTasksWaitingTermination+0x58>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	4a0a      	ldr	r2, [pc, #40]	; (8008d80 <prvCheckTasksWaitingTermination+0x58>)
 8008d58:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008d5a:	f7ff f885 	bl	8007e68 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f810 	bl	8008d84 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d64:	4b06      	ldr	r3, [pc, #24]	; (8008d80 <prvCheckTasksWaitingTermination+0x58>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e1      	bne.n	8008d30 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008d6c:	bf00      	nop
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20012f0c 	.word	0x20012f0c
 8008d7c:	20012f38 	.word	0x20012f38
 8008d80:	20012f20 	.word	0x20012f20

08008d84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff f9d5 	bl	8008140 <vPortFree>
            vPortFree( pxTCB );
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff f9d2 	bl	8008140 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <prvResetNextTaskUnblockTime+0x30>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d104      	bne.n	8008dbc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <prvResetNextTaskUnblockTime+0x34>)
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008db8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008dba:	e005      	b.n	8008dc8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008dbc:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <prvResetNextTaskUnblockTime+0x30>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a04      	ldr	r2, [pc, #16]	; (8008dd8 <prvResetNextTaskUnblockTime+0x34>)
 8008dc6:	6013      	str	r3, [r2, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20012ef0 	.word	0x20012ef0
 8008dd8:	20012f58 	.word	0x20012f58

08008ddc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008de0:	2201      	movs	r2, #1
 8008de2:	490e      	ldr	r1, [pc, #56]	; (8008e1c <MX_USB_HOST_Init+0x40>)
 8008de4:	480e      	ldr	r0, [pc, #56]	; (8008e20 <MX_USB_HOST_Init+0x44>)
 8008de6:	f7fd fa91 	bl	800630c <USBH_Init>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008df0:	f7f7 fe1a 	bl	8000a28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008df4:	490b      	ldr	r1, [pc, #44]	; (8008e24 <MX_USB_HOST_Init+0x48>)
 8008df6:	480a      	ldr	r0, [pc, #40]	; (8008e20 <MX_USB_HOST_Init+0x44>)
 8008df8:	f7fd fb16 	bl	8006428 <USBH_RegisterClass>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e02:	f7f7 fe11 	bl	8000a28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e06:	4806      	ldr	r0, [pc, #24]	; (8008e20 <MX_USB_HOST_Init+0x44>)
 8008e08:	f7fd fb9a 	bl	8006540 <USBH_Start>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e12:	f7f7 fe09 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e16:	bf00      	nop
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	08008e3d 	.word	0x08008e3d
 8008e20:	20012f64 	.word	0x20012f64
 8008e24:	2000000c 	.word	0x2000000c

08008e28 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e2c:	4802      	ldr	r0, [pc, #8]	; (8008e38 <MX_USB_HOST_Process+0x10>)
 8008e2e:	f7fd fb97 	bl	8006560 <USBH_Process>
}
 8008e32:	bf00      	nop
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20012f64 	.word	0x20012f64

08008e3c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d819      	bhi.n	8008e84 <USBH_UserProcess+0x48>
 8008e50:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <USBH_UserProcess+0x1c>)
 8008e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e56:	bf00      	nop
 8008e58:	08008e85 	.word	0x08008e85
 8008e5c:	08008e75 	.word	0x08008e75
 8008e60:	08008e85 	.word	0x08008e85
 8008e64:	08008e7d 	.word	0x08008e7d
 8008e68:	08008e6d 	.word	0x08008e6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e6c:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <USBH_UserProcess+0x58>)
 8008e6e:	2203      	movs	r2, #3
 8008e70:	701a      	strb	r2, [r3, #0]
  break;
 8008e72:	e008      	b.n	8008e86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008e74:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <USBH_UserProcess+0x58>)
 8008e76:	2202      	movs	r2, #2
 8008e78:	701a      	strb	r2, [r3, #0]
  break;
 8008e7a:	e004      	b.n	8008e86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008e7c:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <USBH_UserProcess+0x58>)
 8008e7e:	2201      	movs	r2, #1
 8008e80:	701a      	strb	r2, [r3, #0]
  break;
 8008e82:	e000      	b.n	8008e86 <USBH_UserProcess+0x4a>

  default:
  break;
 8008e84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008e86:	bf00      	nop
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	2001333c 	.word	0x2001333c

08008e98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08a      	sub	sp, #40	; 0x28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ea0:	f107 0314 	add.w	r3, r7, #20
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	605a      	str	r2, [r3, #4]
 8008eaa:	609a      	str	r2, [r3, #8]
 8008eac:	60da      	str	r2, [r3, #12]
 8008eae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eb8:	d147      	bne.n	8008f4a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eba:	2300      	movs	r3, #0
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	4b25      	ldr	r3, [pc, #148]	; (8008f54 <HAL_HCD_MspInit+0xbc>)
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	4a24      	ldr	r2, [pc, #144]	; (8008f54 <HAL_HCD_MspInit+0xbc>)
 8008ec4:	f043 0301 	orr.w	r3, r3, #1
 8008ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8008eca:	4b22      	ldr	r3, [pc, #136]	; (8008f54 <HAL_HCD_MspInit+0xbc>)
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	613b      	str	r3, [r7, #16]
 8008ed4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008edc:	2300      	movs	r3, #0
 8008ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ee4:	f107 0314 	add.w	r3, r7, #20
 8008ee8:	4619      	mov	r1, r3
 8008eea:	481b      	ldr	r0, [pc, #108]	; (8008f58 <HAL_HCD_MspInit+0xc0>)
 8008eec:	f7f8 f9de 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ef0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008efe:	2303      	movs	r3, #3
 8008f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f02:	230a      	movs	r3, #10
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f06:	f107 0314 	add.w	r3, r7, #20
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4812      	ldr	r0, [pc, #72]	; (8008f58 <HAL_HCD_MspInit+0xc0>)
 8008f0e:	f7f8 f9cd 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f12:	4b10      	ldr	r3, [pc, #64]	; (8008f54 <HAL_HCD_MspInit+0xbc>)
 8008f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f16:	4a0f      	ldr	r2, [pc, #60]	; (8008f54 <HAL_HCD_MspInit+0xbc>)
 8008f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1c:	6353      	str	r3, [r2, #52]	; 0x34
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <HAL_HCD_MspInit+0xbc>)
 8008f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f26:	4a0b      	ldr	r2, [pc, #44]	; (8008f54 <HAL_HCD_MspInit+0xbc>)
 8008f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <HAL_HCD_MspInit+0xbc>)
 8008f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	2043      	movs	r0, #67	; 0x43
 8008f40:	f7f8 f98a 	bl	8001258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f44:	2043      	movs	r0, #67	; 0x43
 8008f46:	f7f8 f9a3 	bl	8001290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3728      	adds	r7, #40	; 0x28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40023800 	.word	0x40023800
 8008f58:	40020000 	.word	0x40020000

08008f5c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd fed7 	bl	8006d1e <USBH_LL_IncTimer>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fd ff0f 	bl	8006daa <USBH_LL_Connect>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fd ff18 	bl	8006dd8 <USBH_LL_Disconnect>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fd fec9 	bl	8006d72 <USBH_LL_PortEnabled>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fd fec9 	bl	8006d8e <USBH_LL_PortDisabled>
}
 8008ffc:	bf00      	nop
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009012:	2b01      	cmp	r3, #1
 8009014:	d12a      	bne.n	800906c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009016:	4a18      	ldr	r2, [pc, #96]	; (8009078 <USBH_LL_Init+0x74>)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a15      	ldr	r2, [pc, #84]	; (8009078 <USBH_LL_Init+0x74>)
 8009022:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <USBH_LL_Init+0x74>)
 8009028:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800902c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <USBH_LL_Init+0x74>)
 8009030:	2208      	movs	r2, #8
 8009032:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009034:	4b10      	ldr	r3, [pc, #64]	; (8009078 <USBH_LL_Init+0x74>)
 8009036:	2201      	movs	r2, #1
 8009038:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800903a:	4b0f      	ldr	r3, [pc, #60]	; (8009078 <USBH_LL_Init+0x74>)
 800903c:	2200      	movs	r2, #0
 800903e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009040:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <USBH_LL_Init+0x74>)
 8009042:	2202      	movs	r2, #2
 8009044:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009046:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <USBH_LL_Init+0x74>)
 8009048:	2200      	movs	r2, #0
 800904a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800904c:	480a      	ldr	r0, [pc, #40]	; (8009078 <USBH_LL_Init+0x74>)
 800904e:	f7f8 faca 	bl	80015e6 <HAL_HCD_Init>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009058:	f7f7 fce6 	bl	8000a28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800905c:	4806      	ldr	r0, [pc, #24]	; (8009078 <USBH_LL_Init+0x74>)
 800905e:	f7f8 feae 	bl	8001dbe <HAL_HCD_GetCurrentFrame>
 8009062:	4603      	mov	r3, r0
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fd fe4a 	bl	8006d00 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20013340 	.word	0x20013340

0800907c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009092:	4618      	mov	r0, r3
 8009094:	f7f8 fe1d 	bl	8001cd2 <HAL_HCD_Start>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 f95c 	bl	800935c <USBH_Get_USB_Status>
 80090a4:	4603      	mov	r3, r0
 80090a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7f8 fe25 	bl	8001d18 <HAL_HCD_Stop>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f941 	bl	800935c <USBH_Get_USB_Status>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090de:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80090f0:	2301      	movs	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f8 fe6d 	bl	8001dda <HAL_HCD_GetCurrentSpeed>
 8009100:	4603      	mov	r3, r0
 8009102:	2b02      	cmp	r3, #2
 8009104:	d00c      	beq.n	8009120 <USBH_LL_GetSpeed+0x38>
 8009106:	2b02      	cmp	r3, #2
 8009108:	d80d      	bhi.n	8009126 <USBH_LL_GetSpeed+0x3e>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <USBH_LL_GetSpeed+0x2c>
 800910e:	2b01      	cmp	r3, #1
 8009110:	d003      	beq.n	800911a <USBH_LL_GetSpeed+0x32>
 8009112:	e008      	b.n	8009126 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
    break;
 8009118:	e008      	b.n	800912c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800911a:	2301      	movs	r3, #1
 800911c:	73fb      	strb	r3, [r7, #15]
    break;
 800911e:	e005      	b.n	800912c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009120:	2302      	movs	r3, #2
 8009122:	73fb      	strb	r3, [r7, #15]
    break;
 8009124:	e002      	b.n	800912c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009126:	2301      	movs	r3, #1
 8009128:	73fb      	strb	r3, [r7, #15]
    break;
 800912a:	bf00      	nop
  }
  return  speed;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800914c:	4618      	mov	r0, r3
 800914e:	f7f8 fe00 	bl	8001d52 <HAL_HCD_ResetPort>
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 f8ff 	bl	800935c <USBH_Get_USB_Status>
 800915e:	4603      	mov	r3, r0
 8009160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009162:	7bbb      	ldrb	r3, [r7, #14]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f7f8 fe07 	bl	8001d96 <HAL_HCD_HC_GetXferCount>
 8009188:	4603      	mov	r3, r0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009192:	b590      	push	{r4, r7, lr}
 8009194:	b089      	sub	sp, #36	; 0x24
 8009196:	af04      	add	r7, sp, #16
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	461a      	mov	r2, r3
 80091a0:	4603      	mov	r3, r0
 80091a2:	70fb      	strb	r3, [r7, #3]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70bb      	strb	r3, [r7, #2]
 80091a8:	4613      	mov	r3, r2
 80091aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091ba:	787c      	ldrb	r4, [r7, #1]
 80091bc:	78ba      	ldrb	r2, [r7, #2]
 80091be:	78f9      	ldrb	r1, [r7, #3]
 80091c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091c2:	9302      	str	r3, [sp, #8]
 80091c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	4623      	mov	r3, r4
 80091d2:	f7f8 fa6a 	bl	80016aa <HAL_HCD_HC_Init>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f8bd 	bl	800935c <USBH_Get_USB_Status>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd90      	pop	{r4, r7, pc}

080091f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	4611      	mov	r1, r2
 800920e:	4618      	mov	r0, r3
 8009210:	f7f8 fada 	bl	80017c8 <HAL_HCD_HC_Halt>
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009218:	7bfb      	ldrb	r3, [r7, #15]
 800921a:	4618      	mov	r0, r3
 800921c:	f000 f89e 	bl	800935c <USBH_Get_USB_Status>
 8009220:	4603      	mov	r3, r0
 8009222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009224:	7bbb      	ldrb	r3, [r7, #14]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800922e:	b590      	push	{r4, r7, lr}
 8009230:	b089      	sub	sp, #36	; 0x24
 8009232:	af04      	add	r7, sp, #16
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	4608      	mov	r0, r1
 8009238:	4611      	mov	r1, r2
 800923a:	461a      	mov	r2, r3
 800923c:	4603      	mov	r3, r0
 800923e:	70fb      	strb	r3, [r7, #3]
 8009240:	460b      	mov	r3, r1
 8009242:	70bb      	strb	r3, [r7, #2]
 8009244:	4613      	mov	r3, r2
 8009246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009256:	787c      	ldrb	r4, [r7, #1]
 8009258:	78ba      	ldrb	r2, [r7, #2]
 800925a:	78f9      	ldrb	r1, [r7, #3]
 800925c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009260:	9303      	str	r3, [sp, #12]
 8009262:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	4623      	mov	r3, r4
 8009272:	f7f8 facd 	bl	8001810 <HAL_HCD_HC_SubmitRequest>
 8009276:	4603      	mov	r3, r0
 8009278:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	4618      	mov	r0, r3
 800927e:	f000 f86d 	bl	800935c <USBH_Get_USB_Status>
 8009282:	4603      	mov	r3, r0
 8009284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009286:	7bbb      	ldrb	r3, [r7, #14]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	bd90      	pop	{r4, r7, pc}

08009290 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092a2:	78fa      	ldrb	r2, [r7, #3]
 80092a4:	4611      	mov	r1, r2
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7f8 fd61 	bl	8001d6e <HAL_HCD_HC_GetURBState>
 80092ac:	4603      	mov	r3, r0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d103      	bne.n	80092d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f870 	bl	80093b4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80092d4:	20c8      	movs	r0, #200	; 0xc8
 80092d6:	f7f7 fee3 	bl	80010a0 <HAL_Delay>
  return USBH_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
 80092f0:	4613      	mov	r3, r2
 80092f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	212c      	movs	r1, #44	; 0x2c
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	4413      	add	r3, r2
 8009308:	333b      	adds	r3, #59	; 0x3b
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d009      	beq.n	8009324 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	212c      	movs	r1, #44	; 0x2c
 8009316:	fb01 f303 	mul.w	r3, r1, r3
 800931a:	4413      	add	r3, r2
 800931c:	3354      	adds	r3, #84	; 0x54
 800931e:	78ba      	ldrb	r2, [r7, #2]
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	e008      	b.n	8009336 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	212c      	movs	r1, #44	; 0x2c
 800932a:	fb01 f303 	mul.w	r3, r1, r3
 800932e:	4413      	add	r3, r2
 8009330:	3355      	adds	r3, #85	; 0x55
 8009332:	78ba      	ldrb	r2, [r7, #2]
 8009334:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7f7 fea7 	bl	80010a0 <HAL_Delay>
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	2b03      	cmp	r3, #3
 800936e:	d817      	bhi.n	80093a0 <USBH_Get_USB_Status+0x44>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <USBH_Get_USB_Status+0x1c>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	08009389 	.word	0x08009389
 800937c:	0800938f 	.word	0x0800938f
 8009380:	08009395 	.word	0x08009395
 8009384:	0800939b 	.word	0x0800939b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73fb      	strb	r3, [r7, #15]
    break;
 800938c:	e00b      	b.n	80093a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800938e:	2302      	movs	r3, #2
 8009390:	73fb      	strb	r3, [r7, #15]
    break;
 8009392:	e008      	b.n	80093a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009394:	2301      	movs	r3, #1
 8009396:	73fb      	strb	r3, [r7, #15]
    break;
 8009398:	e005      	b.n	80093a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800939a:	2302      	movs	r3, #2
 800939c:	73fb      	strb	r3, [r7, #15]
    break;
 800939e:	e002      	b.n	80093a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093a0:	2302      	movs	r3, #2
 80093a2:	73fb      	strb	r3, [r7, #15]
    break;
 80093a4:	bf00      	nop
  }
  return usb_status;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093c2:	79fb      	ldrb	r3, [r7, #7]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
 80093cc:	e001      	b.n	80093d2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80093ce:	2301      	movs	r3, #1
 80093d0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	461a      	mov	r2, r3
 80093d6:	2101      	movs	r1, #1
 80093d8:	4803      	ldr	r0, [pc, #12]	; (80093e8 <MX_DriverVbusFS+0x34>)
 80093da:	f7f8 f8eb 	bl	80015b4 <HAL_GPIO_WritePin>
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	40020800 	.word	0x40020800

080093ec <__libc_init_array>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	4d0d      	ldr	r5, [pc, #52]	; (8009424 <__libc_init_array+0x38>)
 80093f0:	4c0d      	ldr	r4, [pc, #52]	; (8009428 <__libc_init_array+0x3c>)
 80093f2:	1b64      	subs	r4, r4, r5
 80093f4:	10a4      	asrs	r4, r4, #2
 80093f6:	2600      	movs	r6, #0
 80093f8:	42a6      	cmp	r6, r4
 80093fa:	d109      	bne.n	8009410 <__libc_init_array+0x24>
 80093fc:	4d0b      	ldr	r5, [pc, #44]	; (800942c <__libc_init_array+0x40>)
 80093fe:	4c0c      	ldr	r4, [pc, #48]	; (8009430 <__libc_init_array+0x44>)
 8009400:	f000 fd3c 	bl	8009e7c <_init>
 8009404:	1b64      	subs	r4, r4, r5
 8009406:	10a4      	asrs	r4, r4, #2
 8009408:	2600      	movs	r6, #0
 800940a:	42a6      	cmp	r6, r4
 800940c:	d105      	bne.n	800941a <__libc_init_array+0x2e>
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	f855 3b04 	ldr.w	r3, [r5], #4
 8009414:	4798      	blx	r3
 8009416:	3601      	adds	r6, #1
 8009418:	e7ee      	b.n	80093f8 <__libc_init_array+0xc>
 800941a:	f855 3b04 	ldr.w	r3, [r5], #4
 800941e:	4798      	blx	r3
 8009420:	3601      	adds	r6, #1
 8009422:	e7f2      	b.n	800940a <__libc_init_array+0x1e>
 8009424:	08009f44 	.word	0x08009f44
 8009428:	08009f44 	.word	0x08009f44
 800942c:	08009f44 	.word	0x08009f44
 8009430:	08009f48 	.word	0x08009f48

08009434 <malloc>:
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <malloc+0xc>)
 8009436:	4601      	mov	r1, r0
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f000 b87f 	b.w	800953c <_malloc_r>
 800943e:	bf00      	nop
 8009440:	20000034 	.word	0x20000034

08009444 <free>:
 8009444:	4b02      	ldr	r3, [pc, #8]	; (8009450 <free+0xc>)
 8009446:	4601      	mov	r1, r0
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	f000 b80b 	b.w	8009464 <_free_r>
 800944e:	bf00      	nop
 8009450:	20000034 	.word	0x20000034

08009454 <memset>:
 8009454:	4402      	add	r2, r0
 8009456:	4603      	mov	r3, r0
 8009458:	4293      	cmp	r3, r2
 800945a:	d100      	bne.n	800945e <memset+0xa>
 800945c:	4770      	bx	lr
 800945e:	f803 1b01 	strb.w	r1, [r3], #1
 8009462:	e7f9      	b.n	8009458 <memset+0x4>

08009464 <_free_r>:
 8009464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009466:	2900      	cmp	r1, #0
 8009468:	d044      	beq.n	80094f4 <_free_r+0x90>
 800946a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800946e:	9001      	str	r0, [sp, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	f1a1 0404 	sub.w	r4, r1, #4
 8009476:	bfb8      	it	lt
 8009478:	18e4      	addlt	r4, r4, r3
 800947a:	f000 fc39 	bl	8009cf0 <__malloc_lock>
 800947e:	4a1e      	ldr	r2, [pc, #120]	; (80094f8 <_free_r+0x94>)
 8009480:	9801      	ldr	r0, [sp, #4]
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	b933      	cbnz	r3, 8009494 <_free_r+0x30>
 8009486:	6063      	str	r3, [r4, #4]
 8009488:	6014      	str	r4, [r2, #0]
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009490:	f000 bc34 	b.w	8009cfc <__malloc_unlock>
 8009494:	42a3      	cmp	r3, r4
 8009496:	d908      	bls.n	80094aa <_free_r+0x46>
 8009498:	6825      	ldr	r5, [r4, #0]
 800949a:	1961      	adds	r1, r4, r5
 800949c:	428b      	cmp	r3, r1
 800949e:	bf01      	itttt	eq
 80094a0:	6819      	ldreq	r1, [r3, #0]
 80094a2:	685b      	ldreq	r3, [r3, #4]
 80094a4:	1949      	addeq	r1, r1, r5
 80094a6:	6021      	streq	r1, [r4, #0]
 80094a8:	e7ed      	b.n	8009486 <_free_r+0x22>
 80094aa:	461a      	mov	r2, r3
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	b10b      	cbz	r3, 80094b4 <_free_r+0x50>
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d9fa      	bls.n	80094aa <_free_r+0x46>
 80094b4:	6811      	ldr	r1, [r2, #0]
 80094b6:	1855      	adds	r5, r2, r1
 80094b8:	42a5      	cmp	r5, r4
 80094ba:	d10b      	bne.n	80094d4 <_free_r+0x70>
 80094bc:	6824      	ldr	r4, [r4, #0]
 80094be:	4421      	add	r1, r4
 80094c0:	1854      	adds	r4, r2, r1
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	6011      	str	r1, [r2, #0]
 80094c6:	d1e0      	bne.n	800948a <_free_r+0x26>
 80094c8:	681c      	ldr	r4, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	6053      	str	r3, [r2, #4]
 80094ce:	4421      	add	r1, r4
 80094d0:	6011      	str	r1, [r2, #0]
 80094d2:	e7da      	b.n	800948a <_free_r+0x26>
 80094d4:	d902      	bls.n	80094dc <_free_r+0x78>
 80094d6:	230c      	movs	r3, #12
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	e7d6      	b.n	800948a <_free_r+0x26>
 80094dc:	6825      	ldr	r5, [r4, #0]
 80094de:	1961      	adds	r1, r4, r5
 80094e0:	428b      	cmp	r3, r1
 80094e2:	bf04      	itt	eq
 80094e4:	6819      	ldreq	r1, [r3, #0]
 80094e6:	685b      	ldreq	r3, [r3, #4]
 80094e8:	6063      	str	r3, [r4, #4]
 80094ea:	bf04      	itt	eq
 80094ec:	1949      	addeq	r1, r1, r5
 80094ee:	6021      	streq	r1, [r4, #0]
 80094f0:	6054      	str	r4, [r2, #4]
 80094f2:	e7ca      	b.n	800948a <_free_r+0x26>
 80094f4:	b003      	add	sp, #12
 80094f6:	bd30      	pop	{r4, r5, pc}
 80094f8:	20013644 	.word	0x20013644

080094fc <sbrk_aligned>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	4e0e      	ldr	r6, [pc, #56]	; (8009538 <sbrk_aligned+0x3c>)
 8009500:	460c      	mov	r4, r1
 8009502:	6831      	ldr	r1, [r6, #0]
 8009504:	4605      	mov	r5, r0
 8009506:	b911      	cbnz	r1, 800950e <sbrk_aligned+0x12>
 8009508:	f000 f902 	bl	8009710 <_sbrk_r>
 800950c:	6030      	str	r0, [r6, #0]
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 f8fd 	bl	8009710 <_sbrk_r>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	d00a      	beq.n	8009530 <sbrk_aligned+0x34>
 800951a:	1cc4      	adds	r4, r0, #3
 800951c:	f024 0403 	bic.w	r4, r4, #3
 8009520:	42a0      	cmp	r0, r4
 8009522:	d007      	beq.n	8009534 <sbrk_aligned+0x38>
 8009524:	1a21      	subs	r1, r4, r0
 8009526:	4628      	mov	r0, r5
 8009528:	f000 f8f2 	bl	8009710 <_sbrk_r>
 800952c:	3001      	adds	r0, #1
 800952e:	d101      	bne.n	8009534 <sbrk_aligned+0x38>
 8009530:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009534:	4620      	mov	r0, r4
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	20013648 	.word	0x20013648

0800953c <_malloc_r>:
 800953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009540:	1ccd      	adds	r5, r1, #3
 8009542:	f025 0503 	bic.w	r5, r5, #3
 8009546:	3508      	adds	r5, #8
 8009548:	2d0c      	cmp	r5, #12
 800954a:	bf38      	it	cc
 800954c:	250c      	movcc	r5, #12
 800954e:	2d00      	cmp	r5, #0
 8009550:	4607      	mov	r7, r0
 8009552:	db01      	blt.n	8009558 <_malloc_r+0x1c>
 8009554:	42a9      	cmp	r1, r5
 8009556:	d905      	bls.n	8009564 <_malloc_r+0x28>
 8009558:	230c      	movs	r3, #12
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	2600      	movs	r6, #0
 800955e:	4630      	mov	r0, r6
 8009560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009564:	4e2e      	ldr	r6, [pc, #184]	; (8009620 <_malloc_r+0xe4>)
 8009566:	f000 fbc3 	bl	8009cf0 <__malloc_lock>
 800956a:	6833      	ldr	r3, [r6, #0]
 800956c:	461c      	mov	r4, r3
 800956e:	bb34      	cbnz	r4, 80095be <_malloc_r+0x82>
 8009570:	4629      	mov	r1, r5
 8009572:	4638      	mov	r0, r7
 8009574:	f7ff ffc2 	bl	80094fc <sbrk_aligned>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	4604      	mov	r4, r0
 800957c:	d14d      	bne.n	800961a <_malloc_r+0xde>
 800957e:	6834      	ldr	r4, [r6, #0]
 8009580:	4626      	mov	r6, r4
 8009582:	2e00      	cmp	r6, #0
 8009584:	d140      	bne.n	8009608 <_malloc_r+0xcc>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	4631      	mov	r1, r6
 800958a:	4638      	mov	r0, r7
 800958c:	eb04 0803 	add.w	r8, r4, r3
 8009590:	f000 f8be 	bl	8009710 <_sbrk_r>
 8009594:	4580      	cmp	r8, r0
 8009596:	d13a      	bne.n	800960e <_malloc_r+0xd2>
 8009598:	6821      	ldr	r1, [r4, #0]
 800959a:	3503      	adds	r5, #3
 800959c:	1a6d      	subs	r5, r5, r1
 800959e:	f025 0503 	bic.w	r5, r5, #3
 80095a2:	3508      	adds	r5, #8
 80095a4:	2d0c      	cmp	r5, #12
 80095a6:	bf38      	it	cc
 80095a8:	250c      	movcc	r5, #12
 80095aa:	4629      	mov	r1, r5
 80095ac:	4638      	mov	r0, r7
 80095ae:	f7ff ffa5 	bl	80094fc <sbrk_aligned>
 80095b2:	3001      	adds	r0, #1
 80095b4:	d02b      	beq.n	800960e <_malloc_r+0xd2>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	442b      	add	r3, r5
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	e00e      	b.n	80095dc <_malloc_r+0xa0>
 80095be:	6822      	ldr	r2, [r4, #0]
 80095c0:	1b52      	subs	r2, r2, r5
 80095c2:	d41e      	bmi.n	8009602 <_malloc_r+0xc6>
 80095c4:	2a0b      	cmp	r2, #11
 80095c6:	d916      	bls.n	80095f6 <_malloc_r+0xba>
 80095c8:	1961      	adds	r1, r4, r5
 80095ca:	42a3      	cmp	r3, r4
 80095cc:	6025      	str	r5, [r4, #0]
 80095ce:	bf18      	it	ne
 80095d0:	6059      	strne	r1, [r3, #4]
 80095d2:	6863      	ldr	r3, [r4, #4]
 80095d4:	bf08      	it	eq
 80095d6:	6031      	streq	r1, [r6, #0]
 80095d8:	5162      	str	r2, [r4, r5]
 80095da:	604b      	str	r3, [r1, #4]
 80095dc:	4638      	mov	r0, r7
 80095de:	f104 060b 	add.w	r6, r4, #11
 80095e2:	f000 fb8b 	bl	8009cfc <__malloc_unlock>
 80095e6:	f026 0607 	bic.w	r6, r6, #7
 80095ea:	1d23      	adds	r3, r4, #4
 80095ec:	1af2      	subs	r2, r6, r3
 80095ee:	d0b6      	beq.n	800955e <_malloc_r+0x22>
 80095f0:	1b9b      	subs	r3, r3, r6
 80095f2:	50a3      	str	r3, [r4, r2]
 80095f4:	e7b3      	b.n	800955e <_malloc_r+0x22>
 80095f6:	6862      	ldr	r2, [r4, #4]
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	bf0c      	ite	eq
 80095fc:	6032      	streq	r2, [r6, #0]
 80095fe:	605a      	strne	r2, [r3, #4]
 8009600:	e7ec      	b.n	80095dc <_malloc_r+0xa0>
 8009602:	4623      	mov	r3, r4
 8009604:	6864      	ldr	r4, [r4, #4]
 8009606:	e7b2      	b.n	800956e <_malloc_r+0x32>
 8009608:	4634      	mov	r4, r6
 800960a:	6876      	ldr	r6, [r6, #4]
 800960c:	e7b9      	b.n	8009582 <_malloc_r+0x46>
 800960e:	230c      	movs	r3, #12
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	4638      	mov	r0, r7
 8009614:	f000 fb72 	bl	8009cfc <__malloc_unlock>
 8009618:	e7a1      	b.n	800955e <_malloc_r+0x22>
 800961a:	6025      	str	r5, [r4, #0]
 800961c:	e7de      	b.n	80095dc <_malloc_r+0xa0>
 800961e:	bf00      	nop
 8009620:	20013644 	.word	0x20013644

08009624 <_puts_r>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	460e      	mov	r6, r1
 8009628:	4605      	mov	r5, r0
 800962a:	b118      	cbz	r0, 8009634 <_puts_r+0x10>
 800962c:	6983      	ldr	r3, [r0, #24]
 800962e:	b90b      	cbnz	r3, 8009634 <_puts_r+0x10>
 8009630:	f000 fa58 	bl	8009ae4 <__sinit>
 8009634:	69ab      	ldr	r3, [r5, #24]
 8009636:	68ac      	ldr	r4, [r5, #8]
 8009638:	b913      	cbnz	r3, 8009640 <_puts_r+0x1c>
 800963a:	4628      	mov	r0, r5
 800963c:	f000 fa52 	bl	8009ae4 <__sinit>
 8009640:	4b2c      	ldr	r3, [pc, #176]	; (80096f4 <_puts_r+0xd0>)
 8009642:	429c      	cmp	r4, r3
 8009644:	d120      	bne.n	8009688 <_puts_r+0x64>
 8009646:	686c      	ldr	r4, [r5, #4]
 8009648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800964a:	07db      	lsls	r3, r3, #31
 800964c:	d405      	bmi.n	800965a <_puts_r+0x36>
 800964e:	89a3      	ldrh	r3, [r4, #12]
 8009650:	0598      	lsls	r0, r3, #22
 8009652:	d402      	bmi.n	800965a <_puts_r+0x36>
 8009654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009656:	f000 fae3 	bl	8009c20 <__retarget_lock_acquire_recursive>
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	0719      	lsls	r1, r3, #28
 800965e:	d51d      	bpl.n	800969c <_puts_r+0x78>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	b1db      	cbz	r3, 800969c <_puts_r+0x78>
 8009664:	3e01      	subs	r6, #1
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800966c:	3b01      	subs	r3, #1
 800966e:	60a3      	str	r3, [r4, #8]
 8009670:	bb39      	cbnz	r1, 80096c2 <_puts_r+0x9e>
 8009672:	2b00      	cmp	r3, #0
 8009674:	da38      	bge.n	80096e8 <_puts_r+0xc4>
 8009676:	4622      	mov	r2, r4
 8009678:	210a      	movs	r1, #10
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f858 	bl	8009730 <__swbuf_r>
 8009680:	3001      	adds	r0, #1
 8009682:	d011      	beq.n	80096a8 <_puts_r+0x84>
 8009684:	250a      	movs	r5, #10
 8009686:	e011      	b.n	80096ac <_puts_r+0x88>
 8009688:	4b1b      	ldr	r3, [pc, #108]	; (80096f8 <_puts_r+0xd4>)
 800968a:	429c      	cmp	r4, r3
 800968c:	d101      	bne.n	8009692 <_puts_r+0x6e>
 800968e:	68ac      	ldr	r4, [r5, #8]
 8009690:	e7da      	b.n	8009648 <_puts_r+0x24>
 8009692:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <_puts_r+0xd8>)
 8009694:	429c      	cmp	r4, r3
 8009696:	bf08      	it	eq
 8009698:	68ec      	ldreq	r4, [r5, #12]
 800969a:	e7d5      	b.n	8009648 <_puts_r+0x24>
 800969c:	4621      	mov	r1, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	f000 f898 	bl	80097d4 <__swsetup_r>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d0dd      	beq.n	8009664 <_puts_r+0x40>
 80096a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80096ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ae:	07da      	lsls	r2, r3, #31
 80096b0:	d405      	bmi.n	80096be <_puts_r+0x9a>
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	059b      	lsls	r3, r3, #22
 80096b6:	d402      	bmi.n	80096be <_puts_r+0x9a>
 80096b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ba:	f000 fab2 	bl	8009c22 <__retarget_lock_release_recursive>
 80096be:	4628      	mov	r0, r5
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	da04      	bge.n	80096d0 <_puts_r+0xac>
 80096c6:	69a2      	ldr	r2, [r4, #24]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	dc06      	bgt.n	80096da <_puts_r+0xb6>
 80096cc:	290a      	cmp	r1, #10
 80096ce:	d004      	beq.n	80096da <_puts_r+0xb6>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	6022      	str	r2, [r4, #0]
 80096d6:	7019      	strb	r1, [r3, #0]
 80096d8:	e7c5      	b.n	8009666 <_puts_r+0x42>
 80096da:	4622      	mov	r2, r4
 80096dc:	4628      	mov	r0, r5
 80096de:	f000 f827 	bl	8009730 <__swbuf_r>
 80096e2:	3001      	adds	r0, #1
 80096e4:	d1bf      	bne.n	8009666 <_puts_r+0x42>
 80096e6:	e7df      	b.n	80096a8 <_puts_r+0x84>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	250a      	movs	r5, #10
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	6022      	str	r2, [r4, #0]
 80096f0:	701d      	strb	r5, [r3, #0]
 80096f2:	e7db      	b.n	80096ac <_puts_r+0x88>
 80096f4:	08009efc 	.word	0x08009efc
 80096f8:	08009f1c 	.word	0x08009f1c
 80096fc:	08009edc 	.word	0x08009edc

08009700 <puts>:
 8009700:	4b02      	ldr	r3, [pc, #8]	; (800970c <puts+0xc>)
 8009702:	4601      	mov	r1, r0
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	f7ff bf8d 	b.w	8009624 <_puts_r>
 800970a:	bf00      	nop
 800970c:	20000034 	.word	0x20000034

08009710 <_sbrk_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	; (800972c <_sbrk_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f000 fba0 	bl	8009e60 <_sbrk>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_sbrk_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_sbrk_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	20013650 	.word	0x20013650

08009730 <__swbuf_r>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	460e      	mov	r6, r1
 8009734:	4614      	mov	r4, r2
 8009736:	4605      	mov	r5, r0
 8009738:	b118      	cbz	r0, 8009742 <__swbuf_r+0x12>
 800973a:	6983      	ldr	r3, [r0, #24]
 800973c:	b90b      	cbnz	r3, 8009742 <__swbuf_r+0x12>
 800973e:	f000 f9d1 	bl	8009ae4 <__sinit>
 8009742:	4b21      	ldr	r3, [pc, #132]	; (80097c8 <__swbuf_r+0x98>)
 8009744:	429c      	cmp	r4, r3
 8009746:	d12b      	bne.n	80097a0 <__swbuf_r+0x70>
 8009748:	686c      	ldr	r4, [r5, #4]
 800974a:	69a3      	ldr	r3, [r4, #24]
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	071a      	lsls	r2, r3, #28
 8009752:	d52f      	bpl.n	80097b4 <__swbuf_r+0x84>
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	b36b      	cbz	r3, 80097b4 <__swbuf_r+0x84>
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	1ac0      	subs	r0, r0, r3
 800975e:	6963      	ldr	r3, [r4, #20]
 8009760:	b2f6      	uxtb	r6, r6
 8009762:	4283      	cmp	r3, r0
 8009764:	4637      	mov	r7, r6
 8009766:	dc04      	bgt.n	8009772 <__swbuf_r+0x42>
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f926 	bl	80099bc <_fflush_r>
 8009770:	bb30      	cbnz	r0, 80097c0 <__swbuf_r+0x90>
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	3b01      	subs	r3, #1
 8009776:	60a3      	str	r3, [r4, #8]
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	6022      	str	r2, [r4, #0]
 800977e:	701e      	strb	r6, [r3, #0]
 8009780:	6963      	ldr	r3, [r4, #20]
 8009782:	3001      	adds	r0, #1
 8009784:	4283      	cmp	r3, r0
 8009786:	d004      	beq.n	8009792 <__swbuf_r+0x62>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	07db      	lsls	r3, r3, #31
 800978c:	d506      	bpl.n	800979c <__swbuf_r+0x6c>
 800978e:	2e0a      	cmp	r6, #10
 8009790:	d104      	bne.n	800979c <__swbuf_r+0x6c>
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f000 f911 	bl	80099bc <_fflush_r>
 800979a:	b988      	cbnz	r0, 80097c0 <__swbuf_r+0x90>
 800979c:	4638      	mov	r0, r7
 800979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <__swbuf_r+0x9c>)
 80097a2:	429c      	cmp	r4, r3
 80097a4:	d101      	bne.n	80097aa <__swbuf_r+0x7a>
 80097a6:	68ac      	ldr	r4, [r5, #8]
 80097a8:	e7cf      	b.n	800974a <__swbuf_r+0x1a>
 80097aa:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <__swbuf_r+0xa0>)
 80097ac:	429c      	cmp	r4, r3
 80097ae:	bf08      	it	eq
 80097b0:	68ec      	ldreq	r4, [r5, #12]
 80097b2:	e7ca      	b.n	800974a <__swbuf_r+0x1a>
 80097b4:	4621      	mov	r1, r4
 80097b6:	4628      	mov	r0, r5
 80097b8:	f000 f80c 	bl	80097d4 <__swsetup_r>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d0cb      	beq.n	8009758 <__swbuf_r+0x28>
 80097c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80097c4:	e7ea      	b.n	800979c <__swbuf_r+0x6c>
 80097c6:	bf00      	nop
 80097c8:	08009efc 	.word	0x08009efc
 80097cc:	08009f1c 	.word	0x08009f1c
 80097d0:	08009edc 	.word	0x08009edc

080097d4 <__swsetup_r>:
 80097d4:	4b32      	ldr	r3, [pc, #200]	; (80098a0 <__swsetup_r+0xcc>)
 80097d6:	b570      	push	{r4, r5, r6, lr}
 80097d8:	681d      	ldr	r5, [r3, #0]
 80097da:	4606      	mov	r6, r0
 80097dc:	460c      	mov	r4, r1
 80097de:	b125      	cbz	r5, 80097ea <__swsetup_r+0x16>
 80097e0:	69ab      	ldr	r3, [r5, #24]
 80097e2:	b913      	cbnz	r3, 80097ea <__swsetup_r+0x16>
 80097e4:	4628      	mov	r0, r5
 80097e6:	f000 f97d 	bl	8009ae4 <__sinit>
 80097ea:	4b2e      	ldr	r3, [pc, #184]	; (80098a4 <__swsetup_r+0xd0>)
 80097ec:	429c      	cmp	r4, r3
 80097ee:	d10f      	bne.n	8009810 <__swsetup_r+0x3c>
 80097f0:	686c      	ldr	r4, [r5, #4]
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097f8:	0719      	lsls	r1, r3, #28
 80097fa:	d42c      	bmi.n	8009856 <__swsetup_r+0x82>
 80097fc:	06dd      	lsls	r5, r3, #27
 80097fe:	d411      	bmi.n	8009824 <__swsetup_r+0x50>
 8009800:	2309      	movs	r3, #9
 8009802:	6033      	str	r3, [r6, #0]
 8009804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800980e:	e03e      	b.n	800988e <__swsetup_r+0xba>
 8009810:	4b25      	ldr	r3, [pc, #148]	; (80098a8 <__swsetup_r+0xd4>)
 8009812:	429c      	cmp	r4, r3
 8009814:	d101      	bne.n	800981a <__swsetup_r+0x46>
 8009816:	68ac      	ldr	r4, [r5, #8]
 8009818:	e7eb      	b.n	80097f2 <__swsetup_r+0x1e>
 800981a:	4b24      	ldr	r3, [pc, #144]	; (80098ac <__swsetup_r+0xd8>)
 800981c:	429c      	cmp	r4, r3
 800981e:	bf08      	it	eq
 8009820:	68ec      	ldreq	r4, [r5, #12]
 8009822:	e7e6      	b.n	80097f2 <__swsetup_r+0x1e>
 8009824:	0758      	lsls	r0, r3, #29
 8009826:	d512      	bpl.n	800984e <__swsetup_r+0x7a>
 8009828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800982a:	b141      	cbz	r1, 800983e <__swsetup_r+0x6a>
 800982c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009830:	4299      	cmp	r1, r3
 8009832:	d002      	beq.n	800983a <__swsetup_r+0x66>
 8009834:	4630      	mov	r0, r6
 8009836:	f7ff fe15 	bl	8009464 <_free_r>
 800983a:	2300      	movs	r3, #0
 800983c:	6363      	str	r3, [r4, #52]	; 0x34
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009844:	81a3      	strh	r3, [r4, #12]
 8009846:	2300      	movs	r3, #0
 8009848:	6063      	str	r3, [r4, #4]
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f043 0308 	orr.w	r3, r3, #8
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	6923      	ldr	r3, [r4, #16]
 8009858:	b94b      	cbnz	r3, 800986e <__swsetup_r+0x9a>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009864:	d003      	beq.n	800986e <__swsetup_r+0x9a>
 8009866:	4621      	mov	r1, r4
 8009868:	4630      	mov	r0, r6
 800986a:	f000 fa01 	bl	8009c70 <__smakebuf_r>
 800986e:	89a0      	ldrh	r0, [r4, #12]
 8009870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009874:	f010 0301 	ands.w	r3, r0, #1
 8009878:	d00a      	beq.n	8009890 <__swsetup_r+0xbc>
 800987a:	2300      	movs	r3, #0
 800987c:	60a3      	str	r3, [r4, #8]
 800987e:	6963      	ldr	r3, [r4, #20]
 8009880:	425b      	negs	r3, r3
 8009882:	61a3      	str	r3, [r4, #24]
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	b943      	cbnz	r3, 800989a <__swsetup_r+0xc6>
 8009888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800988c:	d1ba      	bne.n	8009804 <__swsetup_r+0x30>
 800988e:	bd70      	pop	{r4, r5, r6, pc}
 8009890:	0781      	lsls	r1, r0, #30
 8009892:	bf58      	it	pl
 8009894:	6963      	ldrpl	r3, [r4, #20]
 8009896:	60a3      	str	r3, [r4, #8]
 8009898:	e7f4      	b.n	8009884 <__swsetup_r+0xb0>
 800989a:	2000      	movs	r0, #0
 800989c:	e7f7      	b.n	800988e <__swsetup_r+0xba>
 800989e:	bf00      	nop
 80098a0:	20000034 	.word	0x20000034
 80098a4:	08009efc 	.word	0x08009efc
 80098a8:	08009f1c 	.word	0x08009f1c
 80098ac:	08009edc 	.word	0x08009edc

080098b0 <__sflush_r>:
 80098b0:	898a      	ldrh	r2, [r1, #12]
 80098b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b6:	4605      	mov	r5, r0
 80098b8:	0710      	lsls	r0, r2, #28
 80098ba:	460c      	mov	r4, r1
 80098bc:	d458      	bmi.n	8009970 <__sflush_r+0xc0>
 80098be:	684b      	ldr	r3, [r1, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	dc05      	bgt.n	80098d0 <__sflush_r+0x20>
 80098c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	dc02      	bgt.n	80098d0 <__sflush_r+0x20>
 80098ca:	2000      	movs	r0, #0
 80098cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098d2:	2e00      	cmp	r6, #0
 80098d4:	d0f9      	beq.n	80098ca <__sflush_r+0x1a>
 80098d6:	2300      	movs	r3, #0
 80098d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098dc:	682f      	ldr	r7, [r5, #0]
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	d032      	beq.n	8009948 <__sflush_r+0x98>
 80098e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	075a      	lsls	r2, r3, #29
 80098e8:	d505      	bpl.n	80098f6 <__sflush_r+0x46>
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	1ac0      	subs	r0, r0, r3
 80098ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098f0:	b10b      	cbz	r3, 80098f6 <__sflush_r+0x46>
 80098f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098f4:	1ac0      	subs	r0, r0, r3
 80098f6:	2300      	movs	r3, #0
 80098f8:	4602      	mov	r2, r0
 80098fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098fc:	6a21      	ldr	r1, [r4, #32]
 80098fe:	4628      	mov	r0, r5
 8009900:	47b0      	blx	r6
 8009902:	1c43      	adds	r3, r0, #1
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	d106      	bne.n	8009916 <__sflush_r+0x66>
 8009908:	6829      	ldr	r1, [r5, #0]
 800990a:	291d      	cmp	r1, #29
 800990c:	d82c      	bhi.n	8009968 <__sflush_r+0xb8>
 800990e:	4a2a      	ldr	r2, [pc, #168]	; (80099b8 <__sflush_r+0x108>)
 8009910:	40ca      	lsrs	r2, r1
 8009912:	07d6      	lsls	r6, r2, #31
 8009914:	d528      	bpl.n	8009968 <__sflush_r+0xb8>
 8009916:	2200      	movs	r2, #0
 8009918:	6062      	str	r2, [r4, #4]
 800991a:	04d9      	lsls	r1, r3, #19
 800991c:	6922      	ldr	r2, [r4, #16]
 800991e:	6022      	str	r2, [r4, #0]
 8009920:	d504      	bpl.n	800992c <__sflush_r+0x7c>
 8009922:	1c42      	adds	r2, r0, #1
 8009924:	d101      	bne.n	800992a <__sflush_r+0x7a>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	b903      	cbnz	r3, 800992c <__sflush_r+0x7c>
 800992a:	6560      	str	r0, [r4, #84]	; 0x54
 800992c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800992e:	602f      	str	r7, [r5, #0]
 8009930:	2900      	cmp	r1, #0
 8009932:	d0ca      	beq.n	80098ca <__sflush_r+0x1a>
 8009934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009938:	4299      	cmp	r1, r3
 800993a:	d002      	beq.n	8009942 <__sflush_r+0x92>
 800993c:	4628      	mov	r0, r5
 800993e:	f7ff fd91 	bl	8009464 <_free_r>
 8009942:	2000      	movs	r0, #0
 8009944:	6360      	str	r0, [r4, #52]	; 0x34
 8009946:	e7c1      	b.n	80098cc <__sflush_r+0x1c>
 8009948:	6a21      	ldr	r1, [r4, #32]
 800994a:	2301      	movs	r3, #1
 800994c:	4628      	mov	r0, r5
 800994e:	47b0      	blx	r6
 8009950:	1c41      	adds	r1, r0, #1
 8009952:	d1c7      	bne.n	80098e4 <__sflush_r+0x34>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0c4      	beq.n	80098e4 <__sflush_r+0x34>
 800995a:	2b1d      	cmp	r3, #29
 800995c:	d001      	beq.n	8009962 <__sflush_r+0xb2>
 800995e:	2b16      	cmp	r3, #22
 8009960:	d101      	bne.n	8009966 <__sflush_r+0xb6>
 8009962:	602f      	str	r7, [r5, #0]
 8009964:	e7b1      	b.n	80098ca <__sflush_r+0x1a>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	e7ad      	b.n	80098cc <__sflush_r+0x1c>
 8009970:	690f      	ldr	r7, [r1, #16]
 8009972:	2f00      	cmp	r7, #0
 8009974:	d0a9      	beq.n	80098ca <__sflush_r+0x1a>
 8009976:	0793      	lsls	r3, r2, #30
 8009978:	680e      	ldr	r6, [r1, #0]
 800997a:	bf08      	it	eq
 800997c:	694b      	ldreq	r3, [r1, #20]
 800997e:	600f      	str	r7, [r1, #0]
 8009980:	bf18      	it	ne
 8009982:	2300      	movne	r3, #0
 8009984:	eba6 0807 	sub.w	r8, r6, r7
 8009988:	608b      	str	r3, [r1, #8]
 800998a:	f1b8 0f00 	cmp.w	r8, #0
 800998e:	dd9c      	ble.n	80098ca <__sflush_r+0x1a>
 8009990:	6a21      	ldr	r1, [r4, #32]
 8009992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009994:	4643      	mov	r3, r8
 8009996:	463a      	mov	r2, r7
 8009998:	4628      	mov	r0, r5
 800999a:	47b0      	blx	r6
 800999c:	2800      	cmp	r0, #0
 800999e:	dc06      	bgt.n	80099ae <__sflush_r+0xfe>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099ac:	e78e      	b.n	80098cc <__sflush_r+0x1c>
 80099ae:	4407      	add	r7, r0
 80099b0:	eba8 0800 	sub.w	r8, r8, r0
 80099b4:	e7e9      	b.n	800998a <__sflush_r+0xda>
 80099b6:	bf00      	nop
 80099b8:	20400001 	.word	0x20400001

080099bc <_fflush_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	690b      	ldr	r3, [r1, #16]
 80099c0:	4605      	mov	r5, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	b913      	cbnz	r3, 80099cc <_fflush_r+0x10>
 80099c6:	2500      	movs	r5, #0
 80099c8:	4628      	mov	r0, r5
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	b118      	cbz	r0, 80099d6 <_fflush_r+0x1a>
 80099ce:	6983      	ldr	r3, [r0, #24]
 80099d0:	b90b      	cbnz	r3, 80099d6 <_fflush_r+0x1a>
 80099d2:	f000 f887 	bl	8009ae4 <__sinit>
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <_fflush_r+0x6c>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	d11b      	bne.n	8009a14 <_fflush_r+0x58>
 80099dc:	686c      	ldr	r4, [r5, #4]
 80099de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0ef      	beq.n	80099c6 <_fflush_r+0xa>
 80099e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099e8:	07d0      	lsls	r0, r2, #31
 80099ea:	d404      	bmi.n	80099f6 <_fflush_r+0x3a>
 80099ec:	0599      	lsls	r1, r3, #22
 80099ee:	d402      	bmi.n	80099f6 <_fflush_r+0x3a>
 80099f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f2:	f000 f915 	bl	8009c20 <__retarget_lock_acquire_recursive>
 80099f6:	4628      	mov	r0, r5
 80099f8:	4621      	mov	r1, r4
 80099fa:	f7ff ff59 	bl	80098b0 <__sflush_r>
 80099fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a00:	07da      	lsls	r2, r3, #31
 8009a02:	4605      	mov	r5, r0
 8009a04:	d4e0      	bmi.n	80099c8 <_fflush_r+0xc>
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	059b      	lsls	r3, r3, #22
 8009a0a:	d4dd      	bmi.n	80099c8 <_fflush_r+0xc>
 8009a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a0e:	f000 f908 	bl	8009c22 <__retarget_lock_release_recursive>
 8009a12:	e7d9      	b.n	80099c8 <_fflush_r+0xc>
 8009a14:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <_fflush_r+0x70>)
 8009a16:	429c      	cmp	r4, r3
 8009a18:	d101      	bne.n	8009a1e <_fflush_r+0x62>
 8009a1a:	68ac      	ldr	r4, [r5, #8]
 8009a1c:	e7df      	b.n	80099de <_fflush_r+0x22>
 8009a1e:	4b04      	ldr	r3, [pc, #16]	; (8009a30 <_fflush_r+0x74>)
 8009a20:	429c      	cmp	r4, r3
 8009a22:	bf08      	it	eq
 8009a24:	68ec      	ldreq	r4, [r5, #12]
 8009a26:	e7da      	b.n	80099de <_fflush_r+0x22>
 8009a28:	08009efc 	.word	0x08009efc
 8009a2c:	08009f1c 	.word	0x08009f1c
 8009a30:	08009edc 	.word	0x08009edc

08009a34 <std>:
 8009a34:	2300      	movs	r3, #0
 8009a36:	b510      	push	{r4, lr}
 8009a38:	4604      	mov	r4, r0
 8009a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a42:	6083      	str	r3, [r0, #8]
 8009a44:	8181      	strh	r1, [r0, #12]
 8009a46:	6643      	str	r3, [r0, #100]	; 0x64
 8009a48:	81c2      	strh	r2, [r0, #14]
 8009a4a:	6183      	str	r3, [r0, #24]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	2208      	movs	r2, #8
 8009a50:	305c      	adds	r0, #92	; 0x5c
 8009a52:	f7ff fcff 	bl	8009454 <memset>
 8009a56:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <std+0x38>)
 8009a58:	6263      	str	r3, [r4, #36]	; 0x24
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <std+0x3c>)
 8009a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <std+0x40>)
 8009a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <std+0x44>)
 8009a64:	6224      	str	r4, [r4, #32]
 8009a66:	6323      	str	r3, [r4, #48]	; 0x30
 8009a68:	bd10      	pop	{r4, pc}
 8009a6a:	bf00      	nop
 8009a6c:	08009d09 	.word	0x08009d09
 8009a70:	08009d2b 	.word	0x08009d2b
 8009a74:	08009d63 	.word	0x08009d63
 8009a78:	08009d87 	.word	0x08009d87

08009a7c <_cleanup_r>:
 8009a7c:	4901      	ldr	r1, [pc, #4]	; (8009a84 <_cleanup_r+0x8>)
 8009a7e:	f000 b8af 	b.w	8009be0 <_fwalk_reent>
 8009a82:	bf00      	nop
 8009a84:	080099bd 	.word	0x080099bd

08009a88 <__sfmoreglue>:
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	2268      	movs	r2, #104	; 0x68
 8009a8c:	1e4d      	subs	r5, r1, #1
 8009a8e:	4355      	muls	r5, r2
 8009a90:	460e      	mov	r6, r1
 8009a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a96:	f7ff fd51 	bl	800953c <_malloc_r>
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	b140      	cbz	r0, 8009ab0 <__sfmoreglue+0x28>
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8009aa4:	300c      	adds	r0, #12
 8009aa6:	60a0      	str	r0, [r4, #8]
 8009aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009aac:	f7ff fcd2 	bl	8009454 <memset>
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	bd70      	pop	{r4, r5, r6, pc}

08009ab4 <__sfp_lock_acquire>:
 8009ab4:	4801      	ldr	r0, [pc, #4]	; (8009abc <__sfp_lock_acquire+0x8>)
 8009ab6:	f000 b8b3 	b.w	8009c20 <__retarget_lock_acquire_recursive>
 8009aba:	bf00      	nop
 8009abc:	2001364d 	.word	0x2001364d

08009ac0 <__sfp_lock_release>:
 8009ac0:	4801      	ldr	r0, [pc, #4]	; (8009ac8 <__sfp_lock_release+0x8>)
 8009ac2:	f000 b8ae 	b.w	8009c22 <__retarget_lock_release_recursive>
 8009ac6:	bf00      	nop
 8009ac8:	2001364d 	.word	0x2001364d

08009acc <__sinit_lock_acquire>:
 8009acc:	4801      	ldr	r0, [pc, #4]	; (8009ad4 <__sinit_lock_acquire+0x8>)
 8009ace:	f000 b8a7 	b.w	8009c20 <__retarget_lock_acquire_recursive>
 8009ad2:	bf00      	nop
 8009ad4:	2001364e 	.word	0x2001364e

08009ad8 <__sinit_lock_release>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	; (8009ae0 <__sinit_lock_release+0x8>)
 8009ada:	f000 b8a2 	b.w	8009c22 <__retarget_lock_release_recursive>
 8009ade:	bf00      	nop
 8009ae0:	2001364e 	.word	0x2001364e

08009ae4 <__sinit>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	f7ff fff0 	bl	8009acc <__sinit_lock_acquire>
 8009aec:	69a3      	ldr	r3, [r4, #24]
 8009aee:	b11b      	cbz	r3, 8009af8 <__sinit+0x14>
 8009af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af4:	f7ff bff0 	b.w	8009ad8 <__sinit_lock_release>
 8009af8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009afc:	6523      	str	r3, [r4, #80]	; 0x50
 8009afe:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <__sinit+0x68>)
 8009b00:	4a13      	ldr	r2, [pc, #76]	; (8009b50 <__sinit+0x6c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b06:	42a3      	cmp	r3, r4
 8009b08:	bf04      	itt	eq
 8009b0a:	2301      	moveq	r3, #1
 8009b0c:	61a3      	streq	r3, [r4, #24]
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f000 f820 	bl	8009b54 <__sfp>
 8009b14:	6060      	str	r0, [r4, #4]
 8009b16:	4620      	mov	r0, r4
 8009b18:	f000 f81c 	bl	8009b54 <__sfp>
 8009b1c:	60a0      	str	r0, [r4, #8]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 f818 	bl	8009b54 <__sfp>
 8009b24:	2200      	movs	r2, #0
 8009b26:	60e0      	str	r0, [r4, #12]
 8009b28:	2104      	movs	r1, #4
 8009b2a:	6860      	ldr	r0, [r4, #4]
 8009b2c:	f7ff ff82 	bl	8009a34 <std>
 8009b30:	68a0      	ldr	r0, [r4, #8]
 8009b32:	2201      	movs	r2, #1
 8009b34:	2109      	movs	r1, #9
 8009b36:	f7ff ff7d 	bl	8009a34 <std>
 8009b3a:	68e0      	ldr	r0, [r4, #12]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	2112      	movs	r1, #18
 8009b40:	f7ff ff78 	bl	8009a34 <std>
 8009b44:	2301      	movs	r3, #1
 8009b46:	61a3      	str	r3, [r4, #24]
 8009b48:	e7d2      	b.n	8009af0 <__sinit+0xc>
 8009b4a:	bf00      	nop
 8009b4c:	08009ed8 	.word	0x08009ed8
 8009b50:	08009a7d 	.word	0x08009a7d

08009b54 <__sfp>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	4607      	mov	r7, r0
 8009b58:	f7ff ffac 	bl	8009ab4 <__sfp_lock_acquire>
 8009b5c:	4b1e      	ldr	r3, [pc, #120]	; (8009bd8 <__sfp+0x84>)
 8009b5e:	681e      	ldr	r6, [r3, #0]
 8009b60:	69b3      	ldr	r3, [r6, #24]
 8009b62:	b913      	cbnz	r3, 8009b6a <__sfp+0x16>
 8009b64:	4630      	mov	r0, r6
 8009b66:	f7ff ffbd 	bl	8009ae4 <__sinit>
 8009b6a:	3648      	adds	r6, #72	; 0x48
 8009b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	d503      	bpl.n	8009b7c <__sfp+0x28>
 8009b74:	6833      	ldr	r3, [r6, #0]
 8009b76:	b30b      	cbz	r3, 8009bbc <__sfp+0x68>
 8009b78:	6836      	ldr	r6, [r6, #0]
 8009b7a:	e7f7      	b.n	8009b6c <__sfp+0x18>
 8009b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b80:	b9d5      	cbnz	r5, 8009bb8 <__sfp+0x64>
 8009b82:	4b16      	ldr	r3, [pc, #88]	; (8009bdc <__sfp+0x88>)
 8009b84:	60e3      	str	r3, [r4, #12]
 8009b86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b8a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b8c:	f000 f847 	bl	8009c1e <__retarget_lock_init_recursive>
 8009b90:	f7ff ff96 	bl	8009ac0 <__sfp_lock_release>
 8009b94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b9c:	6025      	str	r5, [r4, #0]
 8009b9e:	61a5      	str	r5, [r4, #24]
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ba8:	f7ff fc54 	bl	8009454 <memset>
 8009bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb8:	3468      	adds	r4, #104	; 0x68
 8009bba:	e7d9      	b.n	8009b70 <__sfp+0x1c>
 8009bbc:	2104      	movs	r1, #4
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f7ff ff62 	bl	8009a88 <__sfmoreglue>
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	6030      	str	r0, [r6, #0]
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d1d5      	bne.n	8009b78 <__sfp+0x24>
 8009bcc:	f7ff ff78 	bl	8009ac0 <__sfp_lock_release>
 8009bd0:	230c      	movs	r3, #12
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	e7ee      	b.n	8009bb4 <__sfp+0x60>
 8009bd6:	bf00      	nop
 8009bd8:	08009ed8 	.word	0x08009ed8
 8009bdc:	ffff0001 	.word	0xffff0001

08009be0 <_fwalk_reent>:
 8009be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be4:	4606      	mov	r6, r0
 8009be6:	4688      	mov	r8, r1
 8009be8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bec:	2700      	movs	r7, #0
 8009bee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bf2:	f1b9 0901 	subs.w	r9, r9, #1
 8009bf6:	d505      	bpl.n	8009c04 <_fwalk_reent+0x24>
 8009bf8:	6824      	ldr	r4, [r4, #0]
 8009bfa:	2c00      	cmp	r4, #0
 8009bfc:	d1f7      	bne.n	8009bee <_fwalk_reent+0xe>
 8009bfe:	4638      	mov	r0, r7
 8009c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c04:	89ab      	ldrh	r3, [r5, #12]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d907      	bls.n	8009c1a <_fwalk_reent+0x3a>
 8009c0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	d003      	beq.n	8009c1a <_fwalk_reent+0x3a>
 8009c12:	4629      	mov	r1, r5
 8009c14:	4630      	mov	r0, r6
 8009c16:	47c0      	blx	r8
 8009c18:	4307      	orrs	r7, r0
 8009c1a:	3568      	adds	r5, #104	; 0x68
 8009c1c:	e7e9      	b.n	8009bf2 <_fwalk_reent+0x12>

08009c1e <__retarget_lock_init_recursive>:
 8009c1e:	4770      	bx	lr

08009c20 <__retarget_lock_acquire_recursive>:
 8009c20:	4770      	bx	lr

08009c22 <__retarget_lock_release_recursive>:
 8009c22:	4770      	bx	lr

08009c24 <__swhatbuf_r>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	460e      	mov	r6, r1
 8009c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	b096      	sub	sp, #88	; 0x58
 8009c30:	4614      	mov	r4, r2
 8009c32:	461d      	mov	r5, r3
 8009c34:	da08      	bge.n	8009c48 <__swhatbuf_r+0x24>
 8009c36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	602a      	str	r2, [r5, #0]
 8009c3e:	061a      	lsls	r2, r3, #24
 8009c40:	d410      	bmi.n	8009c64 <__swhatbuf_r+0x40>
 8009c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c46:	e00e      	b.n	8009c66 <__swhatbuf_r+0x42>
 8009c48:	466a      	mov	r2, sp
 8009c4a:	f000 f8c3 	bl	8009dd4 <_fstat_r>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	dbf1      	blt.n	8009c36 <__swhatbuf_r+0x12>
 8009c52:	9a01      	ldr	r2, [sp, #4]
 8009c54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c5c:	425a      	negs	r2, r3
 8009c5e:	415a      	adcs	r2, r3
 8009c60:	602a      	str	r2, [r5, #0]
 8009c62:	e7ee      	b.n	8009c42 <__swhatbuf_r+0x1e>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	2000      	movs	r0, #0
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	b016      	add	sp, #88	; 0x58
 8009c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c70 <__smakebuf_r>:
 8009c70:	898b      	ldrh	r3, [r1, #12]
 8009c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c74:	079d      	lsls	r5, r3, #30
 8009c76:	4606      	mov	r6, r0
 8009c78:	460c      	mov	r4, r1
 8009c7a:	d507      	bpl.n	8009c8c <__smakebuf_r+0x1c>
 8009c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	6123      	str	r3, [r4, #16]
 8009c84:	2301      	movs	r3, #1
 8009c86:	6163      	str	r3, [r4, #20]
 8009c88:	b002      	add	sp, #8
 8009c8a:	bd70      	pop	{r4, r5, r6, pc}
 8009c8c:	ab01      	add	r3, sp, #4
 8009c8e:	466a      	mov	r2, sp
 8009c90:	f7ff ffc8 	bl	8009c24 <__swhatbuf_r>
 8009c94:	9900      	ldr	r1, [sp, #0]
 8009c96:	4605      	mov	r5, r0
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff fc4f 	bl	800953c <_malloc_r>
 8009c9e:	b948      	cbnz	r0, 8009cb4 <__smakebuf_r+0x44>
 8009ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca4:	059a      	lsls	r2, r3, #22
 8009ca6:	d4ef      	bmi.n	8009c88 <__smakebuf_r+0x18>
 8009ca8:	f023 0303 	bic.w	r3, r3, #3
 8009cac:	f043 0302 	orr.w	r3, r3, #2
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	e7e3      	b.n	8009c7c <__smakebuf_r+0xc>
 8009cb4:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <__smakebuf_r+0x7c>)
 8009cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	6020      	str	r0, [r4, #0]
 8009cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	9b00      	ldr	r3, [sp, #0]
 8009cc4:	6163      	str	r3, [r4, #20]
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	6120      	str	r0, [r4, #16]
 8009cca:	b15b      	cbz	r3, 8009ce4 <__smakebuf_r+0x74>
 8009ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f000 f891 	bl	8009df8 <_isatty_r>
 8009cd6:	b128      	cbz	r0, 8009ce4 <__smakebuf_r+0x74>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f023 0303 	bic.w	r3, r3, #3
 8009cde:	f043 0301 	orr.w	r3, r3, #1
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	89a0      	ldrh	r0, [r4, #12]
 8009ce6:	4305      	orrs	r5, r0
 8009ce8:	81a5      	strh	r5, [r4, #12]
 8009cea:	e7cd      	b.n	8009c88 <__smakebuf_r+0x18>
 8009cec:	08009a7d 	.word	0x08009a7d

08009cf0 <__malloc_lock>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	; (8009cf8 <__malloc_lock+0x8>)
 8009cf2:	f7ff bf95 	b.w	8009c20 <__retarget_lock_acquire_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	2001364c 	.word	0x2001364c

08009cfc <__malloc_unlock>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	; (8009d04 <__malloc_unlock+0x8>)
 8009cfe:	f7ff bf90 	b.w	8009c22 <__retarget_lock_release_recursive>
 8009d02:	bf00      	nop
 8009d04:	2001364c 	.word	0x2001364c

08009d08 <__sread>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d10:	f000 f894 	bl	8009e3c <_read_r>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	bfab      	itete	ge
 8009d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d1c:	181b      	addge	r3, r3, r0
 8009d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d22:	bfac      	ite	ge
 8009d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d26:	81a3      	strhlt	r3, [r4, #12]
 8009d28:	bd10      	pop	{r4, pc}

08009d2a <__swrite>:
 8009d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2e:	461f      	mov	r7, r3
 8009d30:	898b      	ldrh	r3, [r1, #12]
 8009d32:	05db      	lsls	r3, r3, #23
 8009d34:	4605      	mov	r5, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	4616      	mov	r6, r2
 8009d3a:	d505      	bpl.n	8009d48 <__swrite+0x1e>
 8009d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d40:	2302      	movs	r3, #2
 8009d42:	2200      	movs	r2, #0
 8009d44:	f000 f868 	bl	8009e18 <_lseek_r>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	4632      	mov	r2, r6
 8009d56:	463b      	mov	r3, r7
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5e:	f000 b817 	b.w	8009d90 <_write_r>

08009d62 <__sseek>:
 8009d62:	b510      	push	{r4, lr}
 8009d64:	460c      	mov	r4, r1
 8009d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6a:	f000 f855 	bl	8009e18 <_lseek_r>
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	bf15      	itete	ne
 8009d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d7e:	81a3      	strheq	r3, [r4, #12]
 8009d80:	bf18      	it	ne
 8009d82:	81a3      	strhne	r3, [r4, #12]
 8009d84:	bd10      	pop	{r4, pc}

08009d86 <__sclose>:
 8009d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8a:	f000 b813 	b.w	8009db4 <_close_r>
	...

08009d90 <_write_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4d07      	ldr	r5, [pc, #28]	; (8009db0 <_write_r+0x20>)
 8009d94:	4604      	mov	r4, r0
 8009d96:	4608      	mov	r0, r1
 8009d98:	4611      	mov	r1, r2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	602a      	str	r2, [r5, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f7f7 f8af 	bl	8000f02 <_write>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_write_r+0x1e>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_write_r+0x1e>
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	20013650 	.word	0x20013650

08009db4 <_close_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d06      	ldr	r5, [pc, #24]	; (8009dd0 <_close_r+0x1c>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	602b      	str	r3, [r5, #0]
 8009dc0:	f7f7 f8bb 	bl	8000f3a <_close>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_close_r+0x1a>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_close_r+0x1a>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	20013650 	.word	0x20013650

08009dd4 <_fstat_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4d07      	ldr	r5, [pc, #28]	; (8009df4 <_fstat_r+0x20>)
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4604      	mov	r4, r0
 8009ddc:	4608      	mov	r0, r1
 8009dde:	4611      	mov	r1, r2
 8009de0:	602b      	str	r3, [r5, #0]
 8009de2:	f7f7 f8b6 	bl	8000f52 <_fstat>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	d102      	bne.n	8009df0 <_fstat_r+0x1c>
 8009dea:	682b      	ldr	r3, [r5, #0]
 8009dec:	b103      	cbz	r3, 8009df0 <_fstat_r+0x1c>
 8009dee:	6023      	str	r3, [r4, #0]
 8009df0:	bd38      	pop	{r3, r4, r5, pc}
 8009df2:	bf00      	nop
 8009df4:	20013650 	.word	0x20013650

08009df8 <_isatty_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d06      	ldr	r5, [pc, #24]	; (8009e14 <_isatty_r+0x1c>)
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	f7f7 f8b5 	bl	8000f72 <_isatty>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_isatty_r+0x1a>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_isatty_r+0x1a>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	20013650 	.word	0x20013650

08009e18 <_lseek_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d07      	ldr	r5, [pc, #28]	; (8009e38 <_lseek_r+0x20>)
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4611      	mov	r1, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	602a      	str	r2, [r5, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f7f7 f8ae 	bl	8000f88 <_lseek>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_lseek_r+0x1e>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_lseek_r+0x1e>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	20013650 	.word	0x20013650

08009e3c <_read_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4d07      	ldr	r5, [pc, #28]	; (8009e5c <_read_r+0x20>)
 8009e40:	4604      	mov	r4, r0
 8009e42:	4608      	mov	r0, r1
 8009e44:	4611      	mov	r1, r2
 8009e46:	2200      	movs	r2, #0
 8009e48:	602a      	str	r2, [r5, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f7f7 f83c 	bl	8000ec8 <_read>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_read_r+0x1e>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_read_r+0x1e>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	20013650 	.word	0x20013650

08009e60 <_sbrk>:
 8009e60:	4a04      	ldr	r2, [pc, #16]	; (8009e74 <_sbrk+0x14>)
 8009e62:	6811      	ldr	r1, [r2, #0]
 8009e64:	4603      	mov	r3, r0
 8009e66:	b909      	cbnz	r1, 8009e6c <_sbrk+0xc>
 8009e68:	4903      	ldr	r1, [pc, #12]	; (8009e78 <_sbrk+0x18>)
 8009e6a:	6011      	str	r1, [r2, #0]
 8009e6c:	6810      	ldr	r0, [r2, #0]
 8009e6e:	4403      	add	r3, r0
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	4770      	bx	lr
 8009e74:	20013654 	.word	0x20013654
 8009e78:	20013658 	.word	0x20013658

08009e7c <_init>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	bf00      	nop
 8009e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e82:	bc08      	pop	{r3}
 8009e84:	469e      	mov	lr, r3
 8009e86:	4770      	bx	lr

08009e88 <_fini>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	bf00      	nop
 8009e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8e:	bc08      	pop	{r3}
 8009e90:	469e      	mov	lr, r3
 8009e92:	4770      	bx	lr
